
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08004031 	.word	0x08004031
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	08001261 	.word	0x08001261
 800005c:	080012b1 	.word	0x080012b1
 8000060:	08001301 	.word	0x08001301
 8000064:	08001351 	.word	0x08001351
 8000068:	080013a1 	.word	0x080013a1
 800006c:	08001801 	.word	0x08001801
 8000070:	08001841 	.word	0x08001841
 8000074:	08001881 	.word	0x08001881
 8000078:	080018c1 	.word	0x080018c1
 800007c:	08001901 	.word	0x08001901
 8000080:	08001941 	.word	0x08001941
 8000084:	08001981 	.word	0x08001981
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	080013f1 	.word	0x080013f1
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080025a1 	.word	0x080025a1
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	080029d1 	.word	0x080029d1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	080014c1 	.word	0x080014c1
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080019c1 	.word	0x080019c1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080002db 	.word	0x080002db
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08001a01 	.word	0x08001a01
 8000124:	08001a41 	.word	0x08001a41
 8000128:	08001a81 	.word	0x08001a81
 800012c:	08001ac1 	.word	0x08001ac1
 8000130:	08001b01 	.word	0x08001b01
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08001b41 	.word	0x08001b41
 8000154:	08001b81 	.word	0x08001b81
 8000158:	08001bc1 	.word	0x08001bc1
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
 8000200:	b672      	cpsid	i
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
 8000204:	f380 8808 	msr	MSP, r0
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8000218:	6008      	str	r0, [r1, #0]
 800021a:	2002      	movs	r0, #2
 800021c:	f380 8814 	msr	CONTROL, r0
 8000220:	f3bf 8f6f 	isb	sy
 8000224:	f000 f97c 	bl	8000520 <__core_init>
 8000228:	f002 fc9a 	bl	8002b60 <__early_init>
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
 8000234:	4291      	cmp	r1, r2
 8000236:	bf3c      	itt	cc
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
 800023c:	e7fa      	bcc.n	8000234 <msloop>
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
 8000242:	4291      	cmp	r1, r2
 8000244:	bf3c      	itt	cc
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
 800024a:	e7fa      	bcc.n	8000242 <psloop>
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
 8000252:	429a      	cmp	r2, r3
 8000254:	bf3e      	ittt	cc
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
 800025e:	e7f8      	bcc.n	8000252 <dloop>
 8000260:	2000      	movs	r0, #0
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
 8000266:	4291      	cmp	r1, r2
 8000268:	bf3c      	itt	cc
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
 800026e:	e7fa      	bcc.n	8000266 <bloop>
 8000270:	f000 f96e 	bl	8000550 <__init_ram_areas>
 8000274:	f000 f95c 	bl	8000530 <__late_init>
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
 800027c:	42ac      	cmp	r4, r5
 800027e:	da03      	bge.n	8000288 <endinitloop>
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
 8000284:	4788      	blx	r1
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
 8000288:	f004 fc32 	bl	8004af0 <main>
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
 8000290:	42ac      	cmp	r4, r5
 8000292:	da03      	bge.n	800029c <endfiniloop>
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
 8000298:	4788      	blx	r1
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
 800029c:	f000 b950 	b.w	8000540 <__default_exit>
 80002a0:	20000400 	.word	0x20000400
 80002a4:	20000800 	.word	0x20000800
 80002a8:	08000000 	.word	0x08000000
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000400 	.word	0x20000400
 80002b4:	08004e4c 	.word	0x08004e4c
 80002b8:	20000800 	.word	0x20000800
 80002bc:	2000081c 	.word	0x2000081c
 80002c0:	20000820 	.word	0x20000820
 80002c4:	20000be8 	.word	0x20000be8
 80002c8:	080001e0 	.word	0x080001e0
 80002cc:	080001e0 	.word	0x080001e0
 80002d0:	080001e0 	.word	0x080001e0
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002e8:	68c3      	ldr	r3, [r0, #12]
 80002ea:	469d      	mov	sp, r3
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
 80002f0:	2300      	movs	r3, #0
 80002f2:	f383 8811 	msr	BASEPRI, r3
 80002f6:	4628      	mov	r0, r5
 80002f8:	47a0      	blx	r4
 80002fa:	2000      	movs	r0, #0
 80002fc:	f003 fae0 	bl	80038c0 <chThdExit>

08000300 <_port_switch_from_isr>:
 8000300:	f003 f96e 	bl	80035e0 <chSchDoReschedule>

08000304 <_port_exit_from_isr>:
 8000304:	df00      	svc	0
 8000306:	e7fe      	b.n	8000306 <_port_exit_from_isr+0x2>

08000308 <memcpy>:
 8000308:	4684      	mov	ip, r0
 800030a:	ea41 0300 	orr.w	r3, r1, r0
 800030e:	f013 0303 	ands.w	r3, r3, #3
 8000312:	d16d      	bne.n	80003f0 <memcpy+0xe8>
 8000314:	3a40      	subs	r2, #64	; 0x40
 8000316:	d341      	bcc.n	800039c <memcpy+0x94>
 8000318:	f851 3b04 	ldr.w	r3, [r1], #4
 800031c:	f840 3b04 	str.w	r3, [r0], #4
 8000320:	f851 3b04 	ldr.w	r3, [r1], #4
 8000324:	f840 3b04 	str.w	r3, [r0], #4
 8000328:	f851 3b04 	ldr.w	r3, [r1], #4
 800032c:	f840 3b04 	str.w	r3, [r0], #4
 8000330:	f851 3b04 	ldr.w	r3, [r1], #4
 8000334:	f840 3b04 	str.w	r3, [r0], #4
 8000338:	f851 3b04 	ldr.w	r3, [r1], #4
 800033c:	f840 3b04 	str.w	r3, [r0], #4
 8000340:	f851 3b04 	ldr.w	r3, [r1], #4
 8000344:	f840 3b04 	str.w	r3, [r0], #4
 8000348:	f851 3b04 	ldr.w	r3, [r1], #4
 800034c:	f840 3b04 	str.w	r3, [r0], #4
 8000350:	f851 3b04 	ldr.w	r3, [r1], #4
 8000354:	f840 3b04 	str.w	r3, [r0], #4
 8000358:	f851 3b04 	ldr.w	r3, [r1], #4
 800035c:	f840 3b04 	str.w	r3, [r0], #4
 8000360:	f851 3b04 	ldr.w	r3, [r1], #4
 8000364:	f840 3b04 	str.w	r3, [r0], #4
 8000368:	f851 3b04 	ldr.w	r3, [r1], #4
 800036c:	f840 3b04 	str.w	r3, [r0], #4
 8000370:	f851 3b04 	ldr.w	r3, [r1], #4
 8000374:	f840 3b04 	str.w	r3, [r0], #4
 8000378:	f851 3b04 	ldr.w	r3, [r1], #4
 800037c:	f840 3b04 	str.w	r3, [r0], #4
 8000380:	f851 3b04 	ldr.w	r3, [r1], #4
 8000384:	f840 3b04 	str.w	r3, [r0], #4
 8000388:	f851 3b04 	ldr.w	r3, [r1], #4
 800038c:	f840 3b04 	str.w	r3, [r0], #4
 8000390:	f851 3b04 	ldr.w	r3, [r1], #4
 8000394:	f840 3b04 	str.w	r3, [r0], #4
 8000398:	3a40      	subs	r2, #64	; 0x40
 800039a:	d2bd      	bcs.n	8000318 <memcpy+0x10>
 800039c:	3230      	adds	r2, #48	; 0x30
 800039e:	d311      	bcc.n	80003c4 <memcpy+0xbc>
 80003a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a4:	f840 3b04 	str.w	r3, [r0], #4
 80003a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003ac:	f840 3b04 	str.w	r3, [r0], #4
 80003b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b4:	f840 3b04 	str.w	r3, [r0], #4
 80003b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003bc:	f840 3b04 	str.w	r3, [r0], #4
 80003c0:	3a10      	subs	r2, #16
 80003c2:	d2ed      	bcs.n	80003a0 <memcpy+0x98>
 80003c4:	320c      	adds	r2, #12
 80003c6:	d305      	bcc.n	80003d4 <memcpy+0xcc>
 80003c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80003cc:	f840 3b04 	str.w	r3, [r0], #4
 80003d0:	3a04      	subs	r2, #4
 80003d2:	d2f9      	bcs.n	80003c8 <memcpy+0xc0>
 80003d4:	3204      	adds	r2, #4
 80003d6:	d008      	beq.n	80003ea <memcpy+0xe2>
 80003d8:	07d2      	lsls	r2, r2, #31
 80003da:	bf1c      	itt	ne
 80003dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e4:	d301      	bcc.n	80003ea <memcpy+0xe2>
 80003e6:	880b      	ldrh	r3, [r1, #0]
 80003e8:	8003      	strh	r3, [r0, #0]
 80003ea:	4660      	mov	r0, ip
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2a08      	cmp	r2, #8
 80003f2:	d313      	bcc.n	800041c <memcpy+0x114>
 80003f4:	078b      	lsls	r3, r1, #30
 80003f6:	d08d      	beq.n	8000314 <memcpy+0xc>
 80003f8:	f010 0303 	ands.w	r3, r0, #3
 80003fc:	d08a      	beq.n	8000314 <memcpy+0xc>
 80003fe:	f1c3 0304 	rsb	r3, r3, #4
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	07db      	lsls	r3, r3, #31
 8000406:	bf1c      	itt	ne
 8000408:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800040c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000410:	d380      	bcc.n	8000314 <memcpy+0xc>
 8000412:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000416:	f820 3b02 	strh.w	r3, [r0], #2
 800041a:	e77b      	b.n	8000314 <memcpy+0xc>
 800041c:	3a04      	subs	r2, #4
 800041e:	d3d9      	bcc.n	80003d4 <memcpy+0xcc>
 8000420:	3a01      	subs	r2, #1
 8000422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000426:	f800 3b01 	strb.w	r3, [r0], #1
 800042a:	d2f9      	bcs.n	8000420 <memcpy+0x118>
 800042c:	780b      	ldrb	r3, [r1, #0]
 800042e:	7003      	strb	r3, [r0, #0]
 8000430:	784b      	ldrb	r3, [r1, #1]
 8000432:	7043      	strb	r3, [r0, #1]
 8000434:	788b      	ldrb	r3, [r1, #2]
 8000436:	7083      	strb	r3, [r0, #2]
 8000438:	4660      	mov	r0, ip
 800043a:	4770      	bx	lr
 800043c:	0000      	movs	r0, r0
	...

08000440 <strlen>:
 8000440:	f890 f000 	pld	[r0]
 8000444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000448:	f020 0107 	bic.w	r1, r0, #7
 800044c:	f06f 0c00 	mvn.w	ip, #0
 8000450:	f010 0407 	ands.w	r4, r0, #7
 8000454:	f891 f020 	pld	[r1, #32]
 8000458:	f040 8049 	bne.w	80004ee <strlen+0xae>
 800045c:	f04f 0400 	mov.w	r4, #0
 8000460:	f06f 0007 	mvn.w	r0, #7
 8000464:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000468:	f891 f040 	pld	[r1, #64]	; 0x40
 800046c:	f100 0008 	add.w	r0, r0, #8
 8000470:	fa82 f24c 	uadd8	r2, r2, ip
 8000474:	faa4 f28c 	sel	r2, r4, ip
 8000478:	fa83 f34c 	uadd8	r3, r3, ip
 800047c:	faa2 f38c 	sel	r3, r2, ip
 8000480:	bb4b      	cbnz	r3, 80004d6 <strlen+0x96>
 8000482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000486:	fa82 f24c 	uadd8	r2, r2, ip
 800048a:	f100 0008 	add.w	r0, r0, #8
 800048e:	faa4 f28c 	sel	r2, r4, ip
 8000492:	fa83 f34c 	uadd8	r3, r3, ip
 8000496:	faa2 f38c 	sel	r3, r2, ip
 800049a:	b9e3      	cbnz	r3, 80004d6 <strlen+0x96>
 800049c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80004a0:	fa82 f24c 	uadd8	r2, r2, ip
 80004a4:	f100 0008 	add.w	r0, r0, #8
 80004a8:	faa4 f28c 	sel	r2, r4, ip
 80004ac:	fa83 f34c 	uadd8	r3, r3, ip
 80004b0:	faa2 f38c 	sel	r3, r2, ip
 80004b4:	b97b      	cbnz	r3, 80004d6 <strlen+0x96>
 80004b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80004ba:	f101 0120 	add.w	r1, r1, #32
 80004be:	fa82 f24c 	uadd8	r2, r2, ip
 80004c2:	f100 0008 	add.w	r0, r0, #8
 80004c6:	faa4 f28c 	sel	r2, r4, ip
 80004ca:	fa83 f34c 	uadd8	r3, r3, ip
 80004ce:	faa2 f38c 	sel	r3, r2, ip
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0c6      	beq.n	8000464 <strlen+0x24>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	bf04      	itt	eq
 80004da:	3004      	addeq	r0, #4
 80004dc:	461a      	moveq	r2, r3
 80004de:	ba12      	rev	r2, r2
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80004e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80004ec:	4770      	bx	lr
 80004ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80004f2:	f004 0503 	and.w	r5, r4, #3
 80004f6:	f1c4 0000 	rsb	r0, r4, #0
 80004fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004fe:	f014 0f04 	tst.w	r4, #4
 8000502:	f891 f040 	pld	[r1, #64]	; 0x40
 8000506:	fa0c f505 	lsl.w	r5, ip, r5
 800050a:	ea62 0205 	orn	r2, r2, r5
 800050e:	bf1c      	itt	ne
 8000510:	ea63 0305 	ornne	r3, r3, r5
 8000514:	4662      	movne	r2, ip
 8000516:	f04f 0400 	mov.w	r4, #0
 800051a:	e7a9      	b.n	8000470 <strlen+0x30>
 800051c:	0000      	movs	r0, r0
	...

08000520 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
	...

08000530 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
	...

08000540 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8000540:	e7fe      	b.n	8000540 <__default_exit>
 8000542:	bf00      	nop
	...

08000550 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000550:	b084      	sub	sp, #16
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <__init_ram_areas+0x5c>)
 8000554:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
 8000556:	9b03      	ldr	r3, [sp, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
 800055c:	9b03      	ldr	r3, [sp, #12]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	e009      	b.n	8000578 <__init_ram_areas+0x28>

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
      *p = *tp;
 8000564:	9b02      	ldr	r3, [sp, #8]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	601a      	str	r2, [r3, #0]
      p++;
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	3304      	adds	r3, #4
 8000570:	9301      	str	r3, [sp, #4]
      tp++;
 8000572:	9b02      	ldr	r3, [sp, #8]
 8000574:	3304      	adds	r3, #4
 8000576:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
 8000578:	9b03      	ldr	r3, [sp, #12]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	9a01      	ldr	r2, [sp, #4]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3f0      	bcc.n	8000564 <__init_ram_areas+0x14>
 8000582:	e005      	b.n	8000590 <__init_ram_areas+0x40>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
      p++;
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	3304      	adds	r3, #4
 800058e:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
 8000590:	9b03      	ldr	r3, [sp, #12]
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	9a01      	ldr	r2, [sp, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3f4      	bcc.n	8000584 <__init_ram_areas+0x34>
    }
    rap++;
 800059a:	9b03      	ldr	r3, [sp, #12]
 800059c:	3310      	adds	r3, #16
 800059e:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80005a0:	9b03      	ldr	r3, [sp, #12]
 80005a2:	4a03      	ldr	r2, [pc, #12]	; (80005b0 <__init_ram_areas+0x60>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d3d6      	bcc.n	8000556 <__init_ram_areas+0x6>
#endif
}
 80005a8:	b004      	add	sp, #16
 80005aa:	4770      	bx	lr
 80005ac:	08004bcc 	.word	0x08004bcc
 80005b0:	08004c4c 	.word	0x08004c4c
	...

080005c0 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
	...

080005d0 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 80005d0:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
 80005d2:	f7ff fff5 	bl	80005c0 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
 80005d6:	f001 f82b 	bl	8001630 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
 80005da:	f001 fbe9 	bl	8001db0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 80005de:	f000 fc9f 	bl	8000f20 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 80005e2:	f000 fd65 	bl	80010b0 <spiInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 80005e6:	f002 fac3 	bl	8002b70 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 80005ea:	f000 f821 	bl	8000630 <stInit>
#endif
}
 80005ee:	bd08      	pop	{r3, pc}

080005f0 <st_lld_start_alarm>:
 *
 * @param[in] time      the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {
 80005f0:	b082      	sub	sp, #8
 80005f2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80005f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f8:	9b01      	ldr	r3, [sp, #4]
 80005fa:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80005fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000608:	2202      	movs	r2, #2
 800060a:	60da      	str	r2, [r3, #12]
}
 800060c:	b002      	add	sp, #8
 800060e:	4770      	bx	lr

08000610 <st_lld_stop_alarm>:
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
}
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	0000      	movs	r0, r0
	...

08000620 <st_lld_set_alarm>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {
 8000620:	b082      	sub	sp, #8
 8000622:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000628:	9b01      	ldr	r3, [sp, #4]
 800062a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800062c:	b002      	add	sp, #8
 800062e:	4770      	bx	lr

08000630 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
 8000630:	b508      	push	{r3, lr}

  st_lld_init();
 8000632:	f001 ffcd 	bl	80025d0 <st_lld_init>
}
 8000636:	bd08      	pop	{r3, pc}
	...

08000640 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
 8000640:	b500      	push	{lr}
 8000642:	b083      	sub	sp, #12
 8000644:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");

  st_lld_start_alarm(abstime);
 8000646:	9801      	ldr	r0, [sp, #4]
 8000648:	f7ff ffd2 	bl	80005f0 <st_lld_start_alarm>
}
 800064c:	b003      	add	sp, #12
 800064e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000652:	bf00      	nop
	...

08000660 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
 8000660:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
 8000662:	f7ff ffd5 	bl	8000610 <st_lld_stop_alarm>
}
 8000666:	bd08      	pop	{r3, pc}
	...

08000670 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000670:	b500      	push	{lr}
 8000672:	b083      	sub	sp, #12
 8000674:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");

  st_lld_set_alarm(abstime);
 8000676:	9801      	ldr	r0, [sp, #4]
 8000678:	f7ff ffd2 	bl	8000620 <st_lld_set_alarm>
}
 800067c:	b003      	add	sp, #12
 800067e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000682:	bf00      	nop
	...

08000690 <port_lock.lto_priv.129>:
/**
 * @brief   Kernel-lock action.
 * @details In this port this function raises the base priority to kernel
 *          level.
 */
static inline void port_lock(void) {
 8000690:	b082      	sub	sp, #8
 8000692:	2320      	movs	r3, #32
 8000694:	9301      	str	r3, [sp, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000696:	9b01      	ldr	r3, [sp, #4]
 8000698:	f383 8811 	msr	BASEPRI, r3
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 800069c:	b002      	add	sp, #8
 800069e:	4770      	bx	lr

080006a0 <port_unlock.lto_priv.105>:
/**
 * @brief   Kernel-unlock action.
 * @details In this port this function lowers the base priority to user
 *          level.
 */
static inline void port_unlock(void) {
 80006a0:	b082      	sub	sp, #8
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	9b01      	ldr	r3, [sp, #4]
 80006a8:	f383 8811 	msr	BASEPRI, r3
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
 80006ac:	b002      	add	sp, #8
 80006ae:	4770      	bx	lr

080006b0 <queue_init.lto_priv.156>:
 *
 * @param[in] tqp       pointer to the threads queue object
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {
 80006b0:	b082      	sub	sp, #8
 80006b2:	9001      	str	r0, [sp, #4]

  tqp->next = (thread_t *)tqp;
 80006b4:	9b01      	ldr	r3, [sp, #4]
 80006b6:	9a01      	ldr	r2, [sp, #4]
 80006b8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 80006ba:	9b01      	ldr	r3, [sp, #4]
 80006bc:	9a01      	ldr	r2, [sp, #4]
 80006be:	605a      	str	r2, [r3, #4]
}
 80006c0:	b002      	add	sp, #8
 80006c2:	4770      	bx	lr
	...

080006d0 <chSysLock.lto_priv.72>:
/**
 * @brief   Enters the kernel lock state.
 *
 * @special
 */
static inline void chSysLock(void) {
 80006d0:	b508      	push	{r3, lr}

  port_lock();
 80006d2:	f7ff ffdd 	bl	8000690 <port_lock.lto_priv.129>
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
}
 80006d6:	bd08      	pop	{r3, pc}
	...

080006e0 <chSysUnlock.lto_priv.53>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 80006e0:	b508      	push	{r3, lr}
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  port_unlock();
 80006e2:	f7ff ffdd 	bl	80006a0 <port_unlock.lto_priv.105>
}
 80006e6:	bd08      	pop	{r3, pc}
	...

080006f0 <chThdQueueObjectInit.lto_priv.153>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 80006f0:	b500      	push	{lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	9001      	str	r0, [sp, #4]

  queue_init(tqp);
 80006f6:	9801      	ldr	r0, [sp, #4]
 80006f8:	f7ff ffda 	bl	80006b0 <queue_init.lto_priv.156>
}
 80006fc:	b003      	add	sp, #12
 80006fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000702:	bf00      	nop
	...

08000710 <osalSysLock.lto_priv.33>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
 8000710:	b508      	push	{r3, lr}

  chSysLock();
 8000712:	f7ff ffdd 	bl	80006d0 <chSysLock.lto_priv.72>
}
 8000716:	bd08      	pop	{r3, pc}
	...

08000720 <osalSysUnlock.lto_priv.27>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
 8000720:	b508      	push	{r3, lr}

  chSysUnlock();
 8000722:	f7ff ffdd 	bl	80006e0 <chSysUnlock.lto_priv.53>
}
 8000726:	bd08      	pop	{r3, pc}
	...

08000730 <osalThreadQueueObjectInit.lto_priv.214>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 8000730:	b500      	push	{lr}
 8000732:	b083      	sub	sp, #12
 8000734:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
 8000736:	9801      	ldr	r0, [sp, #4]
 8000738:	f7ff ffda 	bl	80006f0 <chThdQueueObjectInit.lto_priv.153>
}
 800073c:	b003      	add	sp, #12
 800073e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000742:	bf00      	nop
	...

08000750 <osalThreadEnqueueTimeoutS.lto_priv.212>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
 8000750:	b500      	push	{lr}
 8000752:	b083      	sub	sp, #12
 8000754:	9001      	str	r0, [sp, #4]
 8000756:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000758:	9900      	ldr	r1, [sp, #0]
 800075a:	9801      	ldr	r0, [sp, #4]
 800075c:	f003 f948 	bl	80039f0 <chThdEnqueueTimeoutS>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	b003      	add	sp, #12
 8000766:	f85d fb04 	ldr.w	pc, [sp], #4
 800076a:	bf00      	nop
 800076c:	0000      	movs	r0, r0
	...

08000770 <osalThreadDequeueNextI.lto_priv.210>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8000770:	b500      	push	{lr}
 8000772:	b083      	sub	sp, #12
 8000774:	9001      	str	r0, [sp, #4]
 8000776:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
 8000778:	9900      	ldr	r1, [sp, #0]
 800077a:	9801      	ldr	r0, [sp, #4]
 800077c:	f003 f958 	bl	8003a30 <chThdDequeueNextI>
}
 8000780:	b003      	add	sp, #12
 8000782:	f85d fb04 	ldr.w	pc, [sp], #4
 8000786:	bf00      	nop
	...

08000790 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
 8000790:	b500      	push	{lr}
 8000792:	b087      	sub	sp, #28
 8000794:	9003      	str	r0, [sp, #12]
 8000796:	9102      	str	r1, [sp, #8]
 8000798:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 800079a:	9b03      	ldr	r3, [sp, #12]
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	9a01      	ldr	r2, [sp, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d902      	bls.n	80007aa <iq_read+0x1a>
    n = iqGetFullI(iqp);
 80007a4:	9b03      	ldr	r3, [sp, #12]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80007aa:	9b03      	ldr	r3, [sp, #12]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	461a      	mov	r2, r3
 80007b0:	9b03      	ldr	r3, [sp, #12]
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 80007b8:	9a01      	ldr	r2, [sp, #4]
 80007ba:	9b05      	ldr	r3, [sp, #20]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d20d      	bcs.n	80007dc <iq_read+0x4c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80007c0:	9b03      	ldr	r3, [sp, #12]
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	9a01      	ldr	r2, [sp, #4]
 80007c6:	4619      	mov	r1, r3
 80007c8:	9802      	ldr	r0, [sp, #8]
 80007ca:	f7ff fd9d 	bl	8000308 <memcpy>
    iqp->q_rdptr += n;
 80007ce:	9b03      	ldr	r3, [sp, #12]
 80007d0:	699a      	ldr	r2, [r3, #24]
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	441a      	add	r2, r3
 80007d6:	9b03      	ldr	r3, [sp, #12]
 80007d8:	619a      	str	r2, [r3, #24]
 80007da:	e02b      	b.n	8000834 <iq_read+0xa4>
  }
  else if (n > s1) {
 80007dc:	9a01      	ldr	r2, [sp, #4]
 80007de:	9b05      	ldr	r3, [sp, #20]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d91c      	bls.n	800081e <iq_read+0x8e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80007e4:	9b03      	ldr	r3, [sp, #12]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	9a05      	ldr	r2, [sp, #20]
 80007ea:	4619      	mov	r1, r3
 80007ec:	9802      	ldr	r0, [sp, #8]
 80007ee:	f7ff fd8b 	bl	8000308 <memcpy>
    bp += s1;
 80007f2:	9a02      	ldr	r2, [sp, #8]
 80007f4:	9b05      	ldr	r3, [sp, #20]
 80007f6:	4413      	add	r3, r2
 80007f8:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80007fa:	9a01      	ldr	r2, [sp, #4]
 80007fc:	9b05      	ldr	r3, [sp, #20]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000802:	9b03      	ldr	r3, [sp, #12]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	9a04      	ldr	r2, [sp, #16]
 8000808:	4619      	mov	r1, r3
 800080a:	9802      	ldr	r0, [sp, #8]
 800080c:	f7ff fd7c 	bl	8000308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000810:	9b03      	ldr	r3, [sp, #12]
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	9b04      	ldr	r3, [sp, #16]
 8000816:	441a      	add	r2, r3
 8000818:	9b03      	ldr	r3, [sp, #12]
 800081a:	619a      	str	r2, [r3, #24]
 800081c:	e00a      	b.n	8000834 <iq_read+0xa4>
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800081e:	9b03      	ldr	r3, [sp, #12]
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	9a01      	ldr	r2, [sp, #4]
 8000824:	4619      	mov	r1, r3
 8000826:	9802      	ldr	r0, [sp, #8]
 8000828:	f7ff fd6e 	bl	8000308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800082c:	9b03      	ldr	r3, [sp, #12]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	9b03      	ldr	r3, [sp, #12]
 8000832:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	689a      	ldr	r2, [r3, #8]
 8000838:	9b01      	ldr	r3, [sp, #4]
 800083a:	1ad2      	subs	r2, r2, r3
 800083c:	9b03      	ldr	r3, [sp, #12]
 800083e:	609a      	str	r2, [r3, #8]
  return n;
 8000840:	9b01      	ldr	r3, [sp, #4]
}
 8000842:	4618      	mov	r0, r3
 8000844:	b007      	add	sp, #28
 8000846:	f85d fb04 	ldr.w	pc, [sp], #4
 800084a:	bf00      	nop
 800084c:	0000      	movs	r0, r0
	...

08000850 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 8000850:	b500      	push	{lr}
 8000852:	b087      	sub	sp, #28
 8000854:	9003      	str	r0, [sp, #12]
 8000856:	9102      	str	r1, [sp, #8]
 8000858:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 800085a:	9b03      	ldr	r3, [sp, #12]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	9a01      	ldr	r2, [sp, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	d902      	bls.n	800086a <oq_write+0x1a>
    n = oqGetEmptyI(oqp);
 8000864:	9b03      	ldr	r3, [sp, #12]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800086a:	9b03      	ldr	r3, [sp, #12]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	461a      	mov	r2, r3
 8000870:	9b03      	ldr	r3, [sp, #12]
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
 8000878:	9a01      	ldr	r2, [sp, #4]
 800087a:	9b05      	ldr	r3, [sp, #20]
 800087c:	429a      	cmp	r2, r3
 800087e:	d20d      	bcs.n	800089c <oq_write+0x4c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000880:	9b03      	ldr	r3, [sp, #12]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	9a01      	ldr	r2, [sp, #4]
 8000886:	9902      	ldr	r1, [sp, #8]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd3d 	bl	8000308 <memcpy>
    oqp->q_wrptr += n;
 800088e:	9b03      	ldr	r3, [sp, #12]
 8000890:	695a      	ldr	r2, [r3, #20]
 8000892:	9b01      	ldr	r3, [sp, #4]
 8000894:	441a      	add	r2, r3
 8000896:	9b03      	ldr	r3, [sp, #12]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	e02b      	b.n	80008f4 <oq_write+0xa4>
  }
  else if (n > s1) {
 800089c:	9a01      	ldr	r2, [sp, #4]
 800089e:	9b05      	ldr	r3, [sp, #20]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d91c      	bls.n	80008de <oq_write+0x8e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80008a4:	9b03      	ldr	r3, [sp, #12]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	9a05      	ldr	r2, [sp, #20]
 80008aa:	9902      	ldr	r1, [sp, #8]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd2b 	bl	8000308 <memcpy>
    bp += s1;
 80008b2:	9a02      	ldr	r2, [sp, #8]
 80008b4:	9b05      	ldr	r3, [sp, #20]
 80008b6:	4413      	add	r3, r2
 80008b8:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
 80008ba:	9a01      	ldr	r2, [sp, #4]
 80008bc:	9b05      	ldr	r3, [sp, #20]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80008c2:	9b03      	ldr	r3, [sp, #12]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	9a04      	ldr	r2, [sp, #16]
 80008c8:	9902      	ldr	r1, [sp, #8]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fd1c 	bl	8000308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 80008d0:	9b03      	ldr	r3, [sp, #12]
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	9b04      	ldr	r3, [sp, #16]
 80008d6:	441a      	add	r2, r3
 80008d8:	9b03      	ldr	r3, [sp, #12]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	e00a      	b.n	80008f4 <oq_write+0xa4>
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80008de:	9b03      	ldr	r3, [sp, #12]
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	9a01      	ldr	r2, [sp, #4]
 80008e4:	9902      	ldr	r1, [sp, #8]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fd0e 	bl	8000308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80008ec:	9b03      	ldr	r3, [sp, #12]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	9b03      	ldr	r3, [sp, #12]
 80008f2:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
 80008f4:	9b03      	ldr	r3, [sp, #12]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	9b01      	ldr	r3, [sp, #4]
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	9b03      	ldr	r3, [sp, #12]
 80008fe:	609a      	str	r2, [r3, #8]
  return n;
 8000900:	9b01      	ldr	r3, [sp, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	b007      	add	sp, #28
 8000906:	f85d fb04 	ldr.w	pc, [sp], #4
 800090a:	bf00      	nop
 800090c:	0000      	movs	r0, r0
	...

08000910 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
 8000910:	b500      	push	{lr}
 8000912:	b085      	sub	sp, #20
 8000914:	9003      	str	r0, [sp, #12]
 8000916:	9102      	str	r1, [sp, #8]
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
 800091c:	9b03      	ldr	r3, [sp, #12]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff06 	bl	8000730 <osalThreadQueueObjectInit.lto_priv.214>
  iqp->q_counter = 0;
 8000924:	9b03      	ldr	r3, [sp, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
 800092a:	9b03      	ldr	r3, [sp, #12]
 800092c:	9a02      	ldr	r2, [sp, #8]
 800092e:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
 8000930:	9b03      	ldr	r3, [sp, #12]
 8000932:	9a02      	ldr	r2, [sp, #8]
 8000934:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
 8000936:	9b03      	ldr	r3, [sp, #12]
 8000938:	9a02      	ldr	r2, [sp, #8]
 800093a:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
 800093c:	9a02      	ldr	r2, [sp, #8]
 800093e:	9b01      	ldr	r3, [sp, #4]
 8000940:	441a      	add	r2, r3
 8000942:	9b03      	ldr	r3, [sp, #12]
 8000944:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
 8000946:	9b03      	ldr	r3, [sp, #12]
 8000948:	9a00      	ldr	r2, [sp, #0]
 800094a:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
 800094c:	9b03      	ldr	r3, [sp, #12]
 800094e:	9a06      	ldr	r2, [sp, #24]
 8000950:	621a      	str	r2, [r3, #32]
}
 8000952:	b005      	add	sp, #20
 8000954:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000960 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 8000960:	b500      	push	{lr}
 8000962:	b083      	sub	sp, #12
 8000964:	9001      	str	r0, [sp, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 800096c:	9b01      	ldr	r3, [sp, #4]
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	9b01      	ldr	r3, [sp, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	429a      	cmp	r2, r3
 8000976:	d105      	bne.n	8000984 <iqPutI+0x24>
 8000978:	9b01      	ldr	r3, [sp, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <iqPutI+0x24>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <iqPutI+0x26>
 8000984:	2300      	movs	r3, #0
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f083 0301 	eor.w	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d01d      	beq.n	80009d2 <iqPutI+0x72>
    iqp->q_counter++;
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	9b01      	ldr	r3, [sp, #4]
 800099e:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
 80009a0:	9b01      	ldr	r3, [sp, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	1c59      	adds	r1, r3, #1
 80009a6:	9a01      	ldr	r2, [sp, #4]
 80009a8:	6151      	str	r1, [r2, #20]
 80009aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80009ae:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80009b0:	9b01      	ldr	r3, [sp, #4]
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	9b01      	ldr	r3, [sp, #4]
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d303      	bcc.n	80009c4 <iqPutI+0x64>
      iqp->q_wrptr = iqp->q_buffer;
 80009bc:	9b01      	ldr	r3, [sp, #4]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	9b01      	ldr	r3, [sp, #4]
 80009c2:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 80009c4:	9b01      	ldr	r3, [sp, #4]
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fed1 	bl	8000770 <osalThreadDequeueNextI.lto_priv.210>

    return MSG_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e001      	b.n	80009d6 <iqPutI+0x76>
  }

  return MSG_TIMEOUT;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	b003      	add	sp, #12
 80009da:	f85d fb04 	ldr.w	pc, [sp], #4
 80009de:	bf00      	nop

080009e0 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80009e0:	b500      	push	{lr}
 80009e2:	b085      	sub	sp, #20
 80009e4:	9001      	str	r0, [sp, #4]
 80009e6:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
 80009e8:	f7ff fe92 	bl	8000710 <osalSysLock.lto_priv.33>
 80009ec:	e00c      	b.n	8000a08 <iqGetTimeout+0x28>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	9900      	ldr	r1, [sp, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff feac 	bl	8000750 <osalThreadEnqueueTimeoutS.lto_priv.212>
 80009f8:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
 80009fa:	9b02      	ldr	r3, [sp, #8]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	da03      	bge.n	8000a08 <iqGetTimeout+0x28>
      osalSysUnlock();
 8000a00:	f7ff fe8e 	bl	8000720 <osalSysUnlock.lto_priv.27>
      return msg;
 8000a04:	9b02      	ldr	r3, [sp, #8]
 8000a06:	e026      	b.n	8000a56 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
 8000a08:	9b01      	ldr	r3, [sp, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0ee      	beq.n	80009ee <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8000a10:	9b01      	ldr	r3, [sp, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	1e5a      	subs	r2, r3, #1
 8000a16:	9b01      	ldr	r3, [sp, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
 8000a1a:	9b01      	ldr	r3, [sp, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	1c59      	adds	r1, r3, #1
 8000a20:	9a01      	ldr	r2, [sp, #4]
 8000a22:	6191      	str	r1, [r2, #24]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	9b01      	ldr	r3, [sp, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d303      	bcc.n	8000a3e <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
 8000a36:	9b01      	ldr	r3, [sp, #4]
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	9b01      	ldr	r3, [sp, #4]
 8000a3c:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
 8000a46:	9b01      	ldr	r3, [sp, #4]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	9801      	ldr	r0, [sp, #4]
 8000a4c:	4798      	blx	r3
  }

  osalSysUnlock();
 8000a4e:	f7ff fe67 	bl	8000720 <osalSysUnlock.lto_priv.27>

  return (msg_t)b;
 8000a52:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	b005      	add	sp, #20
 8000a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a5e:	bf00      	nop

08000a60 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 8000a60:	b500      	push	{lr}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	9003      	str	r0, [sp, #12]
 8000a66:	9102      	str	r1, [sp, #8]
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
 8000a6c:	9b03      	ldr	r3, [sp, #12]
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000a72:	9b01      	ldr	r3, [sp, #4]
 8000a74:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000a76:	f7ff fe4b 	bl	8000710 <osalSysLock.lto_priv.33>
 8000a7a:	e024      	b.n	8000ac6 <iqReadTimeout+0x66>

  while (n > 0U) {
    size_t done;

    done = iq_read(iqp, bp, n);
 8000a7c:	9a01      	ldr	r2, [sp, #4]
 8000a7e:	9902      	ldr	r1, [sp, #8]
 8000a80:	9803      	ldr	r0, [sp, #12]
 8000a82:	f7ff fe85 	bl	8000790 <iq_read>
 8000a86:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000a88:	9b05      	ldr	r3, [sp, #20]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d109      	bne.n	8000aa2 <iqReadTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8000a8e:	9b03      	ldr	r3, [sp, #12]
 8000a90:	9900      	ldr	r1, [sp, #0]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe5c 	bl	8000750 <osalThreadEnqueueTimeoutS.lto_priv.212>
 8000a98:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000a9a:	9b04      	ldr	r3, [sp, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d115      	bne.n	8000acc <iqReadTimeout+0x6c>
 8000aa0:	e011      	b.n	8000ac6 <iqReadTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 8000aa2:	9b07      	ldr	r3, [sp, #28]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <iqReadTimeout+0x4e>
        nfy(iqp);
 8000aa8:	9b07      	ldr	r3, [sp, #28]
 8000aaa:	9803      	ldr	r0, [sp, #12]
 8000aac:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000aae:	f7ff fe37 	bl	8000720 <osalSysUnlock.lto_priv.27>

      n  -= done;
 8000ab2:	9a01      	ldr	r2, [sp, #4]
 8000ab4:	9b05      	ldr	r3, [sp, #20]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	9301      	str	r3, [sp, #4]
      bp += done;
 8000aba:	9a02      	ldr	r2, [sp, #8]
 8000abc:	9b05      	ldr	r3, [sp, #20]
 8000abe:	4413      	add	r3, r2
 8000ac0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000ac2:	f7ff fe25 	bl	8000710 <osalSysLock.lto_priv.33>
  while (n > 0U) {
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1d7      	bne.n	8000a7c <iqReadTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000acc:	f7ff fe28 	bl	8000720 <osalSysUnlock.lto_priv.27>
  return max - n;
 8000ad0:	9a06      	ldr	r2, [sp, #24]
 8000ad2:	9b01      	ldr	r3, [sp, #4]
 8000ad4:	1ad3      	subs	r3, r2, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	b009      	add	sp, #36	; 0x24
 8000ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ade:	bf00      	nop

08000ae0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
 8000ae0:	b500      	push	{lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	9003      	str	r0, [sp, #12]
 8000ae6:	9102      	str	r1, [sp, #8]
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
 8000aec:	9b03      	ldr	r3, [sp, #12]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fe1e 	bl	8000730 <osalThreadQueueObjectInit.lto_priv.214>
  oqp->q_counter = size;
 8000af4:	9b03      	ldr	r3, [sp, #12]
 8000af6:	9a01      	ldr	r2, [sp, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
 8000afa:	9b03      	ldr	r3, [sp, #12]
 8000afc:	9a02      	ldr	r2, [sp, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
 8000b00:	9b03      	ldr	r3, [sp, #12]
 8000b02:	9a02      	ldr	r2, [sp, #8]
 8000b04:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
 8000b06:	9b03      	ldr	r3, [sp, #12]
 8000b08:	9a02      	ldr	r2, [sp, #8]
 8000b0a:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
 8000b0c:	9a02      	ldr	r2, [sp, #8]
 8000b0e:	9b01      	ldr	r3, [sp, #4]
 8000b10:	441a      	add	r2, r3
 8000b12:	9b03      	ldr	r3, [sp, #12]
 8000b14:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
 8000b16:	9b03      	ldr	r3, [sp, #12]
 8000b18:	9a00      	ldr	r2, [sp, #0]
 8000b1a:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
 8000b1c:	9b03      	ldr	r3, [sp, #12]
 8000b1e:	9a06      	ldr	r2, [sp, #24]
 8000b20:	621a      	str	r2, [r3, #32]
}
 8000b22:	b005      	add	sp, #20
 8000b24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000b30 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000b30:	b500      	push	{lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	9003      	str	r0, [sp, #12]
 8000b36:	460b      	mov	r3, r1
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
 8000b3e:	f7ff fde7 	bl	8000710 <osalSysLock.lto_priv.33>
 8000b42:	e00c      	b.n	8000b5e <oqPutTimeout+0x2e>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000b44:	9b03      	ldr	r3, [sp, #12]
 8000b46:	9901      	ldr	r1, [sp, #4]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fe01 	bl	8000750 <osalThreadEnqueueTimeoutS.lto_priv.212>
 8000b4e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
 8000b50:	9b05      	ldr	r3, [sp, #20]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	da03      	bge.n	8000b5e <oqPutTimeout+0x2e>
      osalSysUnlock();
 8000b56:	f7ff fde3 	bl	8000720 <osalSysUnlock.lto_priv.27>
      return msg;
 8000b5a:	9b05      	ldr	r3, [sp, #20]
 8000b5c:	e025      	b.n	8000baa <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
 8000b5e:	9b03      	ldr	r3, [sp, #12]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0ee      	beq.n	8000b44 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8000b66:	9b03      	ldr	r3, [sp, #12]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	9b03      	ldr	r3, [sp, #12]
 8000b6e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
 8000b70:	9b03      	ldr	r3, [sp, #12]
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	9a03      	ldr	r2, [sp, #12]
 8000b78:	6151      	str	r1, [r2, #20]
 8000b7a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8000b7e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000b80:	9b03      	ldr	r3, [sp, #12]
 8000b82:	695a      	ldr	r2, [r3, #20]
 8000b84:	9b03      	ldr	r3, [sp, #12]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d303      	bcc.n	8000b94 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
 8000b8c:	9b03      	ldr	r3, [sp, #12]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	9b03      	ldr	r3, [sp, #12]
 8000b92:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
 8000b9c:	9b03      	ldr	r3, [sp, #12]
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	9803      	ldr	r0, [sp, #12]
 8000ba2:	4798      	blx	r3
  }

  osalSysUnlock();
 8000ba4:	f7ff fdbc 	bl	8000720 <osalSysUnlock.lto_priv.27>

  return MSG_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	b007      	add	sp, #28
 8000bae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bb2:	bf00      	nop
	...

08000bc0 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
 8000bc0:	b500      	push	{lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000bc6:	9b01      	ldr	r3, [sp, #4]
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	9b01      	ldr	r3, [sp, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d105      	bne.n	8000bde <oqGetI+0x1e>
 8000bd2:	9b01      	ldr	r3, [sp, #4]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <oqGetI+0x1e>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <oqGetI+0x20>
 8000bde:	2300      	movs	r3, #0
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	f083 0301 	eor.w	r3, r3, #1
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d01e      	beq.n	8000c2e <oqGetI+0x6e>
    uint8_t b;

    oqp->q_counter++;
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	9b01      	ldr	r3, [sp, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
 8000bfa:	9b01      	ldr	r3, [sp, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	1c59      	adds	r1, r3, #1
 8000c00:	9a01      	ldr	r2, [sp, #4]
 8000c02:	6191      	str	r1, [r2, #24]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
 8000c0a:	9b01      	ldr	r3, [sp, #4]
 8000c0c:	699a      	ldr	r2, [r3, #24]
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d303      	bcc.n	8000c1e <oqGetI+0x5e>
      oqp->q_rdptr = oqp->q_buffer;
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8000c1e:	9b01      	ldr	r3, [sp, #4]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fda4 	bl	8000770 <osalThreadDequeueNextI.lto_priv.210>

    return (msg_t)b;
 8000c28:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000c2c:	e001      	b.n	8000c32 <oqGetI+0x72>
  }

  return MSG_TIMEOUT;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	b005      	add	sp, #20
 8000c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c3a:	bf00      	nop
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000c40:	b500      	push	{lr}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	9003      	str	r0, [sp, #12]
 8000c46:	9102      	str	r1, [sp, #8]
 8000c48:	9201      	str	r2, [sp, #4]
 8000c4a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
 8000c4c:	9b03      	ldr	r3, [sp, #12]
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	9307      	str	r3, [sp, #28]
  size_t max = n;
 8000c52:	9b01      	ldr	r3, [sp, #4]
 8000c54:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);

  osalSysLock();
 8000c56:	f7ff fd5b 	bl	8000710 <osalSysLock.lto_priv.33>
 8000c5a:	e024      	b.n	8000ca6 <oqWriteTimeout+0x66>

  while (n > 0U) {
    size_t done;

    done = oq_write(oqp, bp, n);
 8000c5c:	9a01      	ldr	r2, [sp, #4]
 8000c5e:	9902      	ldr	r1, [sp, #8]
 8000c60:	9803      	ldr	r0, [sp, #12]
 8000c62:	f7ff fdf5 	bl	8000850 <oq_write>
 8000c66:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
 8000c68:	9b05      	ldr	r3, [sp, #20]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d109      	bne.n	8000c82 <oqWriteTimeout+0x42>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8000c6e:	9b03      	ldr	r3, [sp, #12]
 8000c70:	9900      	ldr	r1, [sp, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd6c 	bl	8000750 <osalThreadEnqueueTimeoutS.lto_priv.212>
 8000c78:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 8000c7a:	9b04      	ldr	r3, [sp, #16]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d115      	bne.n	8000cac <oqWriteTimeout+0x6c>
 8000c80:	e011      	b.n	8000ca6 <oqWriteTimeout+0x66>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000c82:	9b07      	ldr	r3, [sp, #28]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <oqWriteTimeout+0x4e>
        nfy(oqp);
 8000c88:	9b07      	ldr	r3, [sp, #28]
 8000c8a:	9803      	ldr	r0, [sp, #12]
 8000c8c:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
 8000c8e:	f7ff fd47 	bl	8000720 <osalSysUnlock.lto_priv.27>

      n  -= done;
 8000c92:	9a01      	ldr	r2, [sp, #4]
 8000c94:	9b05      	ldr	r3, [sp, #20]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	9301      	str	r3, [sp, #4]
      bp += done;
 8000c9a:	9a02      	ldr	r2, [sp, #8]
 8000c9c:	9b05      	ldr	r3, [sp, #20]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	9302      	str	r3, [sp, #8]

      osalSysLock();
 8000ca2:	f7ff fd35 	bl	8000710 <osalSysLock.lto_priv.33>
  while (n > 0U) {
 8000ca6:	9b01      	ldr	r3, [sp, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1d7      	bne.n	8000c5c <oqWriteTimeout+0x1c>
    }
  }

  osalSysUnlock();
 8000cac:	f7ff fd38 	bl	8000720 <osalSysUnlock.lto_priv.27>
  return max - n;
 8000cb0:	9a06      	ldr	r2, [sp, #24]
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	1ad3      	subs	r3, r2, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	b009      	add	sp, #36	; 0x24
 8000cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cbe:	bf00      	nop

08000cc0 <palSetLineCallbackI>:
 * @param[in] cb        event callback function
 * @param[in] arg       callback argument
 *
 * @iclass
 */
void palSetLineCallbackI(ioline_t line, palcallback_t cb, void *arg) {
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	9003      	str	r0, [sp, #12]
 8000cc4:	9102      	str	r1, [sp, #8]
 8000cc6:	9201      	str	r2, [sp, #4]

  palevent_t *pep = pal_lld_get_line_event(line);
 8000cc8:	9b03      	ldr	r3, [sp, #12]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <palSetLineCallbackI+0x28>)
 8000cd2:	4413      	add	r3, r2
 8000cd4:	9305      	str	r3, [sp, #20]
  pep->cb = cb;
 8000cd6:	9b05      	ldr	r3, [sp, #20]
 8000cd8:	9a02      	ldr	r2, [sp, #8]
 8000cda:	601a      	str	r2, [r3, #0]
  pep->arg = arg;
 8000cdc:	9b05      	ldr	r3, [sp, #20]
 8000cde:	9a01      	ldr	r2, [sp, #4]
 8000ce0:	605a      	str	r2, [r3, #4]
}
 8000ce2:	b006      	add	sp, #24
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200008a4 	.word	0x200008a4
 8000cec:	00000000 	.word	0x00000000

08000cf0 <port_lock.lto_priv.130>:
static inline void port_lock(void) {
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	9b01      	ldr	r3, [sp, #4]
 8000cf8:	f383 8811 	msr	BASEPRI, r3
}
 8000cfc:	b002      	add	sp, #8
 8000cfe:	4770      	bx	lr

08000d00 <port_unlock.lto_priv.106>:
static inline void port_unlock(void) {
 8000d00:	b082      	sub	sp, #8
 8000d02:	2300      	movs	r3, #0
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	9b01      	ldr	r3, [sp, #4]
 8000d08:	f383 8811 	msr	BASEPRI, r3
}
 8000d0c:	b002      	add	sp, #8
 8000d0e:	4770      	bx	lr

08000d10 <chSysLock.lto_priv.73>:
static inline void chSysLock(void) {
 8000d10:	b508      	push	{r3, lr}
  port_lock();
 8000d12:	f7ff ffed 	bl	8000cf0 <port_lock.lto_priv.130>
}
 8000d16:	bd08      	pop	{r3, pc}
	...

08000d20 <chSysUnlock.lto_priv.54>:
static inline void chSysUnlock(void) {
 8000d20:	b508      	push	{r3, lr}
  port_unlock();
 8000d22:	f7ff ffed 	bl	8000d00 <port_unlock.lto_priv.106>
}
 8000d26:	bd08      	pop	{r3, pc}
	...

08000d30 <chEvtObjectInit.lto_priv.38>:
 *
 * @param[in] esp       pointer to the @p event_source_t structure
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {
 8000d30:	b082      	sub	sp, #8
 8000d32:	9001      	str	r0, [sp, #4]

  esp->next = (event_listener_t *)esp;
 8000d34:	9b01      	ldr	r3, [sp, #4]
 8000d36:	9a01      	ldr	r2, [sp, #4]
 8000d38:	601a      	str	r2, [r3, #0]
}
 8000d3a:	b002      	add	sp, #8
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <osalSysLock.lto_priv.34>:
static inline void osalSysLock(void) {
 8000d40:	b508      	push	{r3, lr}
  chSysLock();
 8000d42:	f7ff ffe5 	bl	8000d10 <chSysLock.lto_priv.73>
}
 8000d46:	bd08      	pop	{r3, pc}
	...

08000d50 <osalSysUnlock.lto_priv.28>:
static inline void osalSysUnlock(void) {
 8000d50:	b508      	push	{r3, lr}
  chSysUnlock();
 8000d52:	f7ff ffe5 	bl	8000d20 <chSysUnlock.lto_priv.54>
}
 8000d56:	bd08      	pop	{r3, pc}
	...

08000d60 <osalEventObjectInit.lto_priv.16>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
 8000d60:	b500      	push	{lr}
 8000d62:	b083      	sub	sp, #12
 8000d64:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
 8000d66:	9801      	ldr	r0, [sp, #4]
 8000d68:	f7ff ffe2 	bl	8000d30 <chEvtObjectInit.lto_priv.38>
}
 8000d6c:	b003      	add	sp, #12
 8000d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d72:	bf00      	nop
	...

08000d80 <osalEventBroadcastFlagsI.lto_priv.13>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
 8000d80:	b500      	push	{lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	9001      	str	r0, [sp, #4]
 8000d86:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
 8000d88:	9900      	ldr	r1, [sp, #0]
 8000d8a:	9801      	ldr	r0, [sp, #4]
 8000d8c:	f002 ff80 	bl	8003c90 <chEvtBroadcastFlagsI>
}
 8000d90:	b003      	add	sp, #12
 8000d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d96:	bf00      	nop
	...

08000da0 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8000da0:	b500      	push	{lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	9003      	str	r0, [sp, #12]
 8000da6:	9102      	str	r1, [sp, #8]
 8000da8:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000daa:	9b03      	ldr	r3, [sp, #12]
 8000dac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	9a01      	ldr	r2, [sp, #4]
 8000db6:	9902      	ldr	r1, [sp, #8]
 8000db8:	f7ff ff42 	bl	8000c40 <oqWriteTimeout>
 8000dbc:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	b005      	add	sp, #20
 8000dc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dc6:	bf00      	nop
	...

08000dd0 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
 8000dd0:	b500      	push	{lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	9003      	str	r0, [sp, #12]
 8000dd6:	9102      	str	r1, [sp, #8]
 8000dd8:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000dda:	9b03      	ldr	r3, [sp, #12]
 8000ddc:	f103 000c 	add.w	r0, r3, #12
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	9a01      	ldr	r2, [sp, #4]
 8000de6:	9902      	ldr	r1, [sp, #8]
 8000de8:	f7ff fe3a 	bl	8000a60 <iqReadTimeout>
 8000dec:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	b005      	add	sp, #20
 8000df2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000df6:	bf00      	nop
	...

08000e00 <_put.lto_priv.5>:

static msg_t _put(void *ip, uint8_t b) {
 8000e00:	b500      	push	{lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	9001      	str	r0, [sp, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	3330      	adds	r3, #48	; 0x30
 8000e10:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe89 	bl	8000b30 <oqPutTimeout>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	b003      	add	sp, #12
 8000e24:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e30 <_get.lto_priv.3>:

static msg_t _get(void *ip) {
 8000e30:	b500      	push	{lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	330c      	adds	r3, #12
 8000e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fdce 	bl	80009e0 <iqGetTimeout>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	b003      	add	sp, #12
 8000e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e4e:	bf00      	nop

08000e50 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8000e50:	b500      	push	{lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	9003      	str	r0, [sp, #12]
 8000e56:	460b      	mov	r3, r1
 8000e58:	9201      	str	r2, [sp, #4]
 8000e5a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000e5e:	9b03      	ldr	r3, [sp, #12]
 8000e60:	3330      	adds	r3, #48	; 0x30
 8000e62:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8000e66:	9a01      	ldr	r2, [sp, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe61 	bl	8000b30 <oqPutTimeout>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	b005      	add	sp, #20
 8000e74:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e80 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
 8000e80:	b500      	push	{lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	9001      	str	r0, [sp, #4]
 8000e86:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000e88:	9b01      	ldr	r3, [sp, #4]
 8000e8a:	330c      	adds	r3, #12
 8000e8c:	9900      	ldr	r1, [sp, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fda6 	bl	80009e0 <iqGetTimeout>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	b003      	add	sp, #12
 8000e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e9e:	bf00      	nop

08000ea0 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
 8000ea0:	b500      	push	{lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	9003      	str	r0, [sp, #12]
 8000ea6:	9102      	str	r1, [sp, #8]
 8000ea8:	9201      	str	r2, [sp, #4]
 8000eaa:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000eac:	9b03      	ldr	r3, [sp, #12]
 8000eae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	9a01      	ldr	r2, [sp, #4]
 8000eb6:	9902      	ldr	r1, [sp, #8]
 8000eb8:	f7ff fec2 	bl	8000c40 <oqWriteTimeout>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	b005      	add	sp, #20
 8000ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ec6:	bf00      	nop
	...

08000ed0 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
 8000ed0:	b500      	push	{lr}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	9003      	str	r0, [sp, #12]
 8000ed6:	9102      	str	r1, [sp, #8]
 8000ed8:	9201      	str	r2, [sp, #4]
 8000eda:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000edc:	9b03      	ldr	r3, [sp, #12]
 8000ede:	f103 000c 	add.w	r0, r3, #12
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	9a01      	ldr	r2, [sp, #4]
 8000ee6:	9902      	ldr	r1, [sp, #8]
 8000ee8:	f7ff fdba 	bl	8000a60 <iqReadTimeout>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	b005      	add	sp, #20
 8000ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ef6:	bf00      	nop
	...

08000f00 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000f00:	b086      	sub	sp, #24
 8000f02:	9003      	str	r0, [sp, #12]
 8000f04:	9102      	str	r1, [sp, #8]
 8000f06:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
 8000f08:	9b03      	ldr	r3, [sp, #12]
 8000f0a:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);

  switch (operation) {
 8000f0c:	9b02      	ldr	r3, [sp, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <_ctl+0x16>
 8000f12:	2b01      	cmp	r3, #1
  case CHN_CTL_NOP:
 8000f14:	e000      	b.n	8000f18 <_ctl+0x18>
    osalDbgCheck(arg == NULL);
    break;
  case CHN_CTL_INVALID:
 8000f16:	bf00      	nop
    return sd_lld_control(sdp, operation, arg);
#else
    break;
#endif
  }
  return MSG_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	b006      	add	sp, #24
 8000f1e:	4770      	bx	lr

08000f20 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
 8000f20:	b508      	push	{r3, lr}

  sd_lld_init();
 8000f22:	f001 fd65 	bl	80029f0 <sd_lld_init>
}
 8000f26:	bd08      	pop	{r3, pc}
	...

08000f30 <sdObjectInit>:
 * @init
 */
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 8000f30:	b500      	push	{lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	9005      	str	r0, [sp, #20]
 8000f36:	9104      	str	r1, [sp, #16]
 8000f38:	9203      	str	r2, [sp, #12]

  sdp->vmt = &vmt;
 8000f3a:	9b05      	ldr	r3, [sp, #20]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <sdObjectInit+0x58>)
 8000f3e:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
 8000f40:	9b05      	ldr	r3, [sp, #20]
 8000f42:	3304      	adds	r3, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff0b 	bl	8000d60 <osalEventObjectInit.lto_priv.16>
  sdp->state = SD_STOP;
 8000f4a:	9b05      	ldr	r3, [sp, #20]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	721a      	strb	r2, [r3, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 8000f50:	9b05      	ldr	r3, [sp, #20]
 8000f52:	f103 000c 	add.w	r0, r3, #12
 8000f56:	9b05      	ldr	r3, [sp, #20]
 8000f58:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8000f5c:	9b05      	ldr	r3, [sp, #20]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	9b04      	ldr	r3, [sp, #16]
 8000f62:	2210      	movs	r2, #16
 8000f64:	f7ff fcd4 	bl	8000910 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 8000f68:	9b05      	ldr	r3, [sp, #20]
 8000f6a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000f6e:	9b05      	ldr	r3, [sp, #20]
 8000f70:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8000f74:	9b05      	ldr	r3, [sp, #20]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	9b03      	ldr	r3, [sp, #12]
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	f7ff fdb0 	bl	8000ae0 <oqObjectInit>
}
 8000f80:	b007      	add	sp, #28
 8000f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f86:	bf00      	nop
 8000f88:	08004c4c 	.word	0x08004c4c
 8000f8c:	00000000 	.word	0x00000000

08000f90 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8000f90:	b500      	push	{lr}
 8000f92:	b083      	sub	sp, #12
 8000f94:	9001      	str	r0, [sp, #4]
 8000f96:	9100      	str	r1, [sp, #0]

  osalDbgCheck(sdp != NULL);

  osalSysLock();
 8000f98:	f7ff fed2 	bl	8000d40 <osalSysLock.lto_priv.34>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 8000f9c:	9900      	ldr	r1, [sp, #0]
 8000f9e:	9801      	ldr	r0, [sp, #4]
 8000fa0:	f001 fd36 	bl	8002a10 <sd_lld_start>
  sdp->state = SD_READY;
 8000fa4:	9b01      	ldr	r3, [sp, #4]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	721a      	strb	r2, [r3, #8]
  osalSysUnlock();
 8000faa:	f7ff fed1 	bl	8000d50 <osalSysUnlock.lto_priv.28>
}
 8000fae:	b003      	add	sp, #12
 8000fb0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000fc0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 8000fc0:	b500      	push	{lr}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	9001      	str	r0, [sp, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000fcc:	9b01      	ldr	r3, [sp, #4]
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <sdIncomingDataI+0x20>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8000fd4:	9b01      	ldr	r3, [sp, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fed0 	bl	8000d80 <osalEventBroadcastFlagsI.lto_priv.13>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 8000fe0:	9b01      	ldr	r3, [sp, #4]
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fcb8 	bl	8000960 <iqPutI>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da06      	bge.n	8001004 <sdIncomingDataI+0x44>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff febe 	bl	8000d80 <osalEventBroadcastFlagsI.lto_priv.13>
}
 8001004:	b003      	add	sp, #12
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
 800100a:	bf00      	nop
 800100c:	0000      	movs	r0, r0
	...

08001010 <port_lock.lto_priv.131>:
static inline void port_lock(void) {
 8001010:	b082      	sub	sp, #8
 8001012:	2320      	movs	r3, #32
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	f383 8811 	msr	BASEPRI, r3
}
 800101c:	b002      	add	sp, #8
 800101e:	4770      	bx	lr

08001020 <port_unlock.lto_priv.107>:
static inline void port_unlock(void) {
 8001020:	b082      	sub	sp, #8
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	9b01      	ldr	r3, [sp, #4]
 8001028:	f383 8811 	msr	BASEPRI, r3
}
 800102c:	b002      	add	sp, #8
 800102e:	4770      	bx	lr

08001030 <chSysLock.lto_priv.74>:
static inline void chSysLock(void) {
 8001030:	b508      	push	{r3, lr}
  port_lock();
 8001032:	f7ff ffed 	bl	8001010 <port_lock.lto_priv.131>
}
 8001036:	bd08      	pop	{r3, pc}
	...

08001040 <chSysUnlock.lto_priv.55>:
static inline void chSysUnlock(void) {
 8001040:	b508      	push	{r3, lr}
  port_unlock();
 8001042:	f7ff ffed 	bl	8001020 <port_unlock.lto_priv.107>
}
 8001046:	bd08      	pop	{r3, pc}
	...

08001050 <osalSysLock.lto_priv.35>:
static inline void osalSysLock(void) {
 8001050:	b508      	push	{r3, lr}
  chSysLock();
 8001052:	f7ff ffed 	bl	8001030 <chSysLock.lto_priv.74>
}
 8001056:	bd08      	pop	{r3, pc}
	...

08001060 <osalSysUnlock.lto_priv.29>:
static inline void osalSysUnlock(void) {
 8001060:	b508      	push	{r3, lr}
  chSysUnlock();
 8001062:	f7ff ffed 	bl	8001040 <chSysUnlock.lto_priv.55>
}
 8001066:	bd08      	pop	{r3, pc}
	...

08001070 <osalThreadSuspendS>:
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 8001070:	b500      	push	{lr}
 8001072:	b083      	sub	sp, #12
 8001074:	9001      	str	r0, [sp, #4]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	9801      	ldr	r0, [sp, #4]
 800107c:	f002 fc80 	bl	8003980 <chThdSuspendTimeoutS>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	b003      	add	sp, #12
 8001086:	f85d fb04 	ldr.w	pc, [sp], #4
 800108a:	bf00      	nop
 800108c:	0000      	movs	r0, r0
	...

08001090 <osalMutexObjectInit.lto_priv.11>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
 8001090:	b500      	push	{lr}
 8001092:	b083      	sub	sp, #12
 8001094:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001096:	9801      	ldr	r0, [sp, #4]
 8001098:	f002 fda2 	bl	8003be0 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
 800109c:	b003      	add	sp, #12
 800109e:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a2:	bf00      	nop
	...

080010b0 <spiInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void spiInit(void) {
 80010b0:	b508      	push	{r3, lr}

  spi_lld_init();
 80010b2:	f001 f8dd 	bl	8002270 <spi_lld_init>
}
 80010b6:	bd08      	pop	{r3, pc}
	...

080010c0 <spiObjectInit>:
 *
 * @param[out] spip     pointer to the @p SPIDriver object
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {
 80010c0:	b500      	push	{lr}
 80010c2:	b083      	sub	sp, #12
 80010c4:	9001      	str	r0, [sp, #4]

  spip->state = SPI_STOP;
 80010c6:	9b01      	ldr	r3, [sp, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
  spip->config = NULL;
 80010cc:	9b01      	ldr	r3, [sp, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
#endif
#if SPI_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&spip->mutex);
 80010d8:	9b01      	ldr	r3, [sp, #4]
 80010da:	330c      	adds	r3, #12
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffd7 	bl	8001090 <osalMutexObjectInit.lto_priv.11>
#endif
#if defined(SPI_DRIVER_EXT_INIT_HOOK)
  SPI_DRIVER_EXT_INIT_HOOK(spip);
#endif
}
 80010e2:	b003      	add	sp, #12
 80010e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080010f0 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 80010f0:	b500      	push	{lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	9001      	str	r0, [sp, #4]
 80010f6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
 80010f8:	f7ff ffaa 	bl	8001050 <osalSysLock.lto_priv.35>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 80010fc:	9b01      	ldr	r3, [sp, #4]
 80010fe:	9a00      	ldr	r2, [sp, #0]
 8001100:	605a      	str	r2, [r3, #4]
  spi_lld_start(spip);
 8001102:	9801      	ldr	r0, [sp, #4]
 8001104:	f001 f8d4 	bl	80022b0 <spi_lld_start>
  spip->state = SPI_READY;
 8001108:	9b01      	ldr	r3, [sp, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	701a      	strb	r2, [r3, #0]
  osalSysUnlock();
 800110e:	f7ff ffa7 	bl	8001060 <osalSysUnlock.lto_priv.29>
}
 8001112:	b003      	add	sp, #12
 8001114:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001120 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8001120:	b500      	push	{lr}
 8001122:	b083      	sub	sp, #12
 8001124:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8001126:	f7ff ff93 	bl	8001050 <osalSysLock.lto_priv.35>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 800112a:	9b01      	ldr	r3, [sp, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	2201      	movs	r2, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 030f 	bic.w	r3, r3, #15
 8001142:	b292      	uxth	r2, r2
 8001144:	835a      	strh	r2, [r3, #26]
  osalSysUnlock();
 8001146:	f7ff ff8b 	bl	8001060 <osalSysUnlock.lto_priv.29>
}
 800114a:	b003      	add	sp, #12
 800114c:	f85d fb04 	ldr.w	pc, [sp], #4

08001150 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8001150:	b500      	push	{lr}
 8001152:	b083      	sub	sp, #12
 8001154:	9001      	str	r0, [sp, #4]

  osalDbgCheck(spip != NULL);

  osalSysLock();
 8001156:	f7ff ff7b 	bl	8001050 <osalSysLock.lto_priv.35>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 800115a:	9b01      	ldr	r3, [sp, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	2201      	movs	r2, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 030f 	bic.w	r3, r3, #15
 8001172:	b292      	uxth	r2, r2
 8001174:	831a      	strh	r2, [r3, #24]
  osalSysUnlock();
 8001176:	f7ff ff73 	bl	8001060 <osalSysUnlock.lto_priv.29>
}
 800117a:	b003      	add	sp, #12
 800117c:	f85d fb04 	ldr.w	pc, [sp], #4

08001180 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 8001180:	b500      	push	{lr}
 8001182:	b085      	sub	sp, #20
 8001184:	9003      	str	r0, [sp, #12]
 8001186:	9102      	str	r1, [sp, #8]
 8001188:	9201      	str	r2, [sp, #4]
 800118a:	9300      	str	r3, [sp, #0]
               (rxbuf != NULL) && (txbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 800118c:	f7ff ff60 	bl	8001050 <osalSysLock.lto_priv.35>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8001190:	9b03      	ldr	r3, [sp, #12]
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
 8001196:	9b00      	ldr	r3, [sp, #0]
 8001198:	9a01      	ldr	r2, [sp, #4]
 800119a:	9902      	ldr	r1, [sp, #8]
 800119c:	9803      	ldr	r0, [sp, #12]
 800119e:	f001 f937 	bl	8002410 <spi_lld_exchange>
  (void) osalThreadSuspendS(&spip->thread);
 80011a2:	9b03      	ldr	r3, [sp, #12]
 80011a4:	3308      	adds	r3, #8
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff62 	bl	8001070 <osalThreadSuspendS>
  osalSysUnlock();
 80011ac:	f7ff ff58 	bl	8001060 <osalSysUnlock.lto_priv.29>
}
 80011b0:	b005      	add	sp, #20
 80011b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b6:	bf00      	nop
	...

080011c0 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 80011c0:	b500      	push	{lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	9003      	str	r0, [sp, #12]
 80011c6:	9102      	str	r1, [sp, #8]
 80011c8:	9201      	str	r2, [sp, #4]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
 80011ca:	f7ff ff41 	bl	8001050 <osalSysLock.lto_priv.35>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartReceiveI(spip, n, rxbuf);
 80011ce:	9b03      	ldr	r3, [sp, #12]
 80011d0:	2203      	movs	r2, #3
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	9a01      	ldr	r2, [sp, #4]
 80011d6:	9902      	ldr	r1, [sp, #8]
 80011d8:	9803      	ldr	r0, [sp, #12]
 80011da:	f001 f959 	bl	8002490 <spi_lld_receive>
  (void) osalThreadSuspendS(&spip->thread);
 80011de:	9b03      	ldr	r3, [sp, #12]
 80011e0:	3308      	adds	r3, #8
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff44 	bl	8001070 <osalThreadSuspendS>
  osalSysUnlock();
 80011e8:	f7ff ff3a 	bl	8001060 <osalSysUnlock.lto_priv.29>
}
 80011ec:	b005      	add	sp, #20
 80011ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80011f2:	bf00      	nop
	...

08001200 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8001200:	b082      	sub	sp, #8
 8001202:	9001      	str	r0, [sp, #4]
 8001204:	9100      	str	r1, [sp, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001206:	9b00      	ldr	r3, [sp, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <nvicEnableVector+0x50>)
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	b2d9      	uxtb	r1, r3
 8001210:	9b01      	ldr	r3, [sp, #4]
 8001212:	4413      	add	r3, r2
 8001214:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001218:	460a      	mov	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800121c:	9b01      	ldr	r3, [sp, #4]
 800121e:	f003 021f 	and.w	r2, r3, #31
 8001222:	490b      	ldr	r1, [pc, #44]	; (8001250 <nvicEnableVector+0x50>)
 8001224:	9b01      	ldr	r3, [sp, #4]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	3360      	adds	r3, #96	; 0x60
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001234:	9b01      	ldr	r3, [sp, #4]
 8001236:	f003 021f 	and.w	r2, r3, #31
 800123a:	4905      	ldr	r1, [pc, #20]	; (8001250 <nvicEnableVector+0x50>)
 800123c:	9b01      	ldr	r3, [sp, #4]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124a:	b002      	add	sp, #8
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100
	...

08001260 <Vector58>:
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 8001260:	b500      	push	{lr}
 8001262:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <Vector58+0x48>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 0);
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <Vector58+0x48>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	9a01      	ldr	r2, [sp, #4]
 8001274:	4013      	ands	r3, r2
 8001276:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <Vector58+0x48>)
 800127a:	9b01      	ldr	r3, [sp, #4]
 800127c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 0);
 800127e:	9b01      	ldr	r3, [sp, #4]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d009      	beq.n	800129c <Vector58+0x3c>
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <Vector58+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <Vector58+0x3c>
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Vector58+0x4c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <Vector58+0x4c>)
 8001296:	6852      	ldr	r2, [r2, #4]
 8001298:	4610      	mov	r0, r2
 800129a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800129c:	f002 fee0 	bl	8004060 <_port_irq_epilogue>
}
 80012a0:	b003      	add	sp, #12
 80012a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012a6:	bf00      	nop
 80012a8:	40013c00 	.word	0x40013c00
 80012ac:	200008a4 	.word	0x200008a4

080012b0 <Vector5C>:
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 80012b0:	b500      	push	{lr}
 80012b2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <Vector5C+0x48>)
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 1);
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <Vector5C+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	9a01      	ldr	r2, [sp, #4]
 80012c4:	4013      	ands	r3, r2
 80012c6:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <Vector5C+0x48>)
 80012ca:	9b01      	ldr	r3, [sp, #4]
 80012cc:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 1);
 80012ce:	9b01      	ldr	r3, [sp, #4]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d009      	beq.n	80012ec <Vector5C+0x3c>
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Vector5C+0x4c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <Vector5C+0x3c>
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <Vector5C+0x4c>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <Vector5C+0x4c>)
 80012e6:	68d2      	ldr	r2, [r2, #12]
 80012e8:	4610      	mov	r0, r2
 80012ea:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80012ec:	f002 feb8 	bl	8004060 <_port_irq_epilogue>
}
 80012f0:	b003      	add	sp, #12
 80012f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f6:	bf00      	nop
 80012f8:	40013c00 	.word	0x40013c00
 80012fc:	200008a4 	.word	0x200008a4

08001300 <Vector60>:
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8001300:	b500      	push	{lr}
 8001302:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <Vector60+0x48>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 2);
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <Vector60+0x48>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	9a01      	ldr	r2, [sp, #4]
 8001314:	4013      	ands	r3, r2
 8001316:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <Vector60+0x48>)
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 2);
 800131e:	9b01      	ldr	r3, [sp, #4]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <Vector60+0x3c>
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <Vector60+0x4c>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <Vector60+0x3c>
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <Vector60+0x4c>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <Vector60+0x4c>)
 8001336:	6952      	ldr	r2, [r2, #20]
 8001338:	4610      	mov	r0, r2
 800133a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800133c:	f002 fe90 	bl	8004060 <_port_irq_epilogue>
}
 8001340:	b003      	add	sp, #12
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4
 8001346:	bf00      	nop
 8001348:	40013c00 	.word	0x40013c00
 800134c:	200008a4 	.word	0x200008a4

08001350 <Vector64>:
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8001350:	b500      	push	{lr}
 8001352:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <Vector64+0x48>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 3);
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <Vector64+0x48>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	9a01      	ldr	r2, [sp, #4]
 8001364:	4013      	ands	r3, r2
 8001366:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <Vector64+0x48>)
 800136a:	9b01      	ldr	r3, [sp, #4]
 800136c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 3);
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <Vector64+0x3c>
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <Vector64+0x4c>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <Vector64+0x3c>
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <Vector64+0x4c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <Vector64+0x4c>)
 8001386:	69d2      	ldr	r2, [r2, #28]
 8001388:	4610      	mov	r0, r2
 800138a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800138c:	f002 fe68 	bl	8004060 <_port_irq_epilogue>
}
 8001390:	b003      	add	sp, #12
 8001392:	f85d fb04 	ldr.w	pc, [sp], #4
 8001396:	bf00      	nop
 8001398:	40013c00 	.word	0x40013c00
 800139c:	200008a4 	.word	0x200008a4

080013a0 <Vector68>:
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 80013a0:	b500      	push	{lr}
 80013a2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <Vector68+0x48>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & (1U << 4);
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <Vector68+0x48>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	9a01      	ldr	r2, [sp, #4]
 80013b4:	4013      	ands	r3, r2
 80013b6:	9301      	str	r3, [sp, #4]
  EXTI->PR = pr;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <Vector68+0x48>)
 80013ba:	9b01      	ldr	r3, [sp, #4]
 80013bc:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 4);
 80013be:	9b01      	ldr	r3, [sp, #4]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d009      	beq.n	80013dc <Vector68+0x3c>
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <Vector68+0x4c>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <Vector68+0x3c>
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <Vector68+0x4c>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <Vector68+0x4c>)
 80013d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013d8:	4610      	mov	r0, r2
 80013da:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80013dc:	f002 fe40 	bl	8004060 <_port_irq_epilogue>
}
 80013e0:	b003      	add	sp, #12
 80013e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013e6:	bf00      	nop
 80013e8:	40013c00 	.word	0x40013c00
 80013ec:	200008a4 	.word	0x200008a4

080013f0 <Vector9C>:
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 80013f0:	b500      	push	{lr}
 80013f2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <Vector9C+0xc0>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <Vector9C+0xc0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
 8001402:	9a01      	ldr	r2, [sp, #4]
 8001404:	4013      	ands	r3, r2
 8001406:	9301      	str	r3, [sp, #4]
                     (1U << 9));
  EXTI->PR = pr;
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <Vector9C+0xc0>)
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 5);
 800140e:	9b01      	ldr	r3, [sp, #4]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <Vector9C+0x3c>
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <Vector9C+0xc4>)
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <Vector9C+0x3c>
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <Vector9C+0xc4>)
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <Vector9C+0xc4>)
 8001426:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001428:	4610      	mov	r0, r2
 800142a:	4798      	blx	r3
  exti_serve_irq(pr, 6);
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <Vector9C+0x5a>
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <Vector9C+0xc4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <Vector9C+0x5a>
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <Vector9C+0xc4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <Vector9C+0xc4>)
 8001444:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001446:	4610      	mov	r0, r2
 8001448:	4798      	blx	r3
  exti_serve_irq(pr, 7);
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <Vector9C+0x78>
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <Vector9C+0xc4>)
 8001456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <Vector9C+0x78>
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <Vector9C+0xc4>)
 800145e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <Vector9C+0xc4>)
 8001462:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001464:	4610      	mov	r0, r2
 8001466:	4798      	blx	r3
  exti_serve_irq(pr, 8);
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <Vector9C+0x96>
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <Vector9C+0xc4>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <Vector9C+0x96>
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <Vector9C+0xc4>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <Vector9C+0xc4>)
 8001480:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001482:	4610      	mov	r0, r2
 8001484:	4798      	blx	r3
  exti_serve_irq(pr, 9);
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <Vector9C+0xb4>
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <Vector9C+0xc4>)
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <Vector9C+0xb4>
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <Vector9C+0xc4>)
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <Vector9C+0xc4>)
 800149e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014a0:	4610      	mov	r0, r2
 80014a2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80014a4:	f002 fddc 	bl	8004060 <_port_irq_epilogue>
}
 80014a8:	b003      	add	sp, #12
 80014aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ae:	bf00      	nop
 80014b0:	40013c00 	.word	0x40013c00
 80014b4:	200008a4 	.word	0x200008a4
	...

080014c0 <VectorE0>:
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 80014c0:	b500      	push	{lr}
 80014c2:	b083      	sub	sp, #12
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <VectorE0+0xdc>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	9301      	str	r3, [sp, #4]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <VectorE0+0xdc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80014d2:	9a01      	ldr	r2, [sp, #4]
 80014d4:	4013      	ands	r3, r2
 80014d6:	9301      	str	r3, [sp, #4]
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 80014d8:	4a30      	ldr	r2, [pc, #192]	; (800159c <VectorE0+0xdc>)
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	6153      	str	r3, [r2, #20]

  exti_serve_irq(pr, 10);
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <VectorE0+0x3c>
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <VectorE0+0xe0>)
 80014ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <VectorE0+0x3c>
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <VectorE0+0xe0>)
 80014f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f4:	4a2a      	ldr	r2, [pc, #168]	; (80015a0 <VectorE0+0xe0>)
 80014f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80014f8:	4610      	mov	r0, r2
 80014fa:	4798      	blx	r3
  exti_serve_irq(pr, 11);
 80014fc:	9b01      	ldr	r3, [sp, #4]
 80014fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <VectorE0+0x5a>
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <VectorE0+0xe0>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <VectorE0+0x5a>
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <VectorE0+0xe0>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <VectorE0+0xe0>)
 8001514:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001516:	4610      	mov	r0, r2
 8001518:	4798      	blx	r3
  exti_serve_irq(pr, 12);
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <VectorE0+0x78>
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <VectorE0+0xe0>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <VectorE0+0x78>
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <VectorE0+0xe0>)
 800152e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <VectorE0+0xe0>)
 8001532:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001534:	4610      	mov	r0, r2
 8001536:	4798      	blx	r3
  exti_serve_irq(pr, 13);
 8001538:	9b01      	ldr	r3, [sp, #4]
 800153a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <VectorE0+0x96>
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <VectorE0+0xe0>)
 8001544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <VectorE0+0x96>
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <VectorE0+0xe0>)
 800154c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <VectorE0+0xe0>)
 8001550:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001552:	4610      	mov	r0, r2
 8001554:	4798      	blx	r3
  exti_serve_irq(pr, 14);
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d009      	beq.n	8001574 <VectorE0+0xb4>
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <VectorE0+0xe0>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <VectorE0+0xb4>
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <VectorE0+0xe0>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <VectorE0+0xe0>)
 800156e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001570:	4610      	mov	r0, r2
 8001572:	4798      	blx	r3
  exti_serve_irq(pr, 15);
 8001574:	9b01      	ldr	r3, [sp, #4]
 8001576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <VectorE0+0xd2>
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <VectorE0+0xe0>)
 8001580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <VectorE0+0xd2>
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <VectorE0+0xe0>)
 8001588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <VectorE0+0xe0>)
 800158c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800158e:	4610      	mov	r0, r2
 8001590:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001592:	f002 fd65 	bl	8004060 <_port_irq_epilogue>
}
 8001596:	b003      	add	sp, #12
 8001598:	f85d fb04 	ldr.w	pc, [sp], #4
 800159c:	40013c00 	.word	0x40013c00
 80015a0:	200008a4 	.word	0x200008a4
	...

080015b0 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
 80015b0:	b508      	push	{r3, lr}

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 80015b2:	2106      	movs	r1, #6
 80015b4:	2006      	movs	r0, #6
 80015b6:	f7ff fe23 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 80015ba:	2106      	movs	r1, #6
 80015bc:	2007      	movs	r0, #7
 80015be:	f7ff fe1f 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 80015c2:	2106      	movs	r1, #6
 80015c4:	2008      	movs	r0, #8
 80015c6:	f7ff fe1b 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 80015ca:	2106      	movs	r1, #6
 80015cc:	2009      	movs	r0, #9
 80015ce:	f7ff fe17 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 80015d2:	2106      	movs	r1, #6
 80015d4:	200a      	movs	r0, #10
 80015d6:	f7ff fe13 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 80015da:	2106      	movs	r1, #6
 80015dc:	2017      	movs	r0, #23
 80015de:	f7ff fe0f 	bl	8001200 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 80015e2:	2106      	movs	r1, #6
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f7ff fe0b 	bl	8001200 <nvicEnableVector>
#endif
}
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	0000      	movs	r0, r0
	...

080015f0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <hal_lld_backup_domain_init+0x38>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0c      	ldr	r2, [pc, #48]	; (8001628 <hal_lld_backup_domain_init+0x38>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <hal_lld_backup_domain_init+0x3c>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001608:	d006      	beq.n	8001618 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <hal_lld_backup_domain_init+0x3c>)
 800160c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001610:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <hal_lld_backup_domain_init+0x3c>)
 8001614:	2200      	movs	r2, #0
 8001616:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <hal_lld_backup_domain_init+0x38>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <hal_lld_backup_domain_init+0x38>)
 800161e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001622:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000
 800162c:	40023800 	.word	0x40023800

08001630 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8001630:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <hal_lld_init+0x98>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <hal_lld_init+0x98>)
 8001638:	f063 031f 	orn	r3, r3, #31
 800163c:	6113      	str	r3, [r2, #16]
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <hal_lld_init+0x98>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <hal_lld_init+0x98>)
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	6113      	str	r3, [r2, #16]
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <hal_lld_init+0x98>)
 800164c:	691b      	ldr	r3, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <hal_lld_init+0x98>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <hal_lld_init+0x98>)
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <hal_lld_init+0x98>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <hal_lld_init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <hal_lld_init+0x98>)
 8001666:	695b      	ldr	r3, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <hal_lld_init+0x98>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <hal_lld_init+0x98>)
 800166e:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <hal_lld_init+0x98>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <hal_lld_init+0x98>)
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <hal_lld_init+0x98>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <hal_lld_init+0x98>)
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <hal_lld_init+0x98>)
 800168a:	f04f 32ff 	mov.w	r2, #4294967295
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <hal_lld_init+0x98>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <hal_lld_init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <hal_lld_init+0x98>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <hal_lld_init+0x98>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <hal_lld_init+0x98>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <hal_lld_init+0x98>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <hal_lld_init+0x98>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6613      	str	r3, [r2, #96]	; 0x60
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <hal_lld_init+0x98>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
 80016ba:	f7ff ff99 	bl	80015f0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 80016be:	f000 faa7 	bl	8001c10 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
 80016c2:	f7ff ff75 	bl	80015b0 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 80016c6:	bd08      	pop	{r3, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00000000 	.word	0x00000000

080016d0 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
 80016d0:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enable.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCAPBEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <stm32_clock_init+0x10c>)
 80016d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <stm32_clock_init+0x110>)
 80016dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016e0:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80016e2:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <stm32_clock_init+0x10c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3d      	ldr	r2, [pc, #244]	; (80017dc <stm32_clock_init+0x10c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80016ee:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <stm32_clock_init+0x10c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f9      	beq.n	80016ee <stm32_clock_init+0x1e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80016fa:	4b38      	ldr	r3, [pc, #224]	; (80017dc <stm32_clock_init+0x10c>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	4a37      	ldr	r2, [pc, #220]	; (80017dc <stm32_clock_init+0x10c>)
 8001700:	f023 0303 	bic.w	r3, r3, #3
 8001704:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <stm32_clock_init+0x10c>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <stm32_clock_init+0x36>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <stm32_clock_init+0x10c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a31      	ldr	r2, [pc, #196]	; (80017dc <stm32_clock_init+0x10c>)
 8001718:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800171c:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800171e:	4b2f      	ldr	r3, [pc, #188]	; (80017dc <stm32_clock_init+0x10c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <stm32_clock_init+0x10c>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001728:	4a2c      	ldr	r2, [pc, #176]	; (80017dc <stm32_clock_init+0x10c>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6753      	str	r3, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <stm32_clock_init+0x10c>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f9      	beq.n	8001730 <stm32_clock_init+0x60>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <stm32_clock_init+0x10c>)
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <stm32_clock_init+0x114>)
 8001740:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <stm32_clock_init+0x10c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a25      	ldr	r2, [pc, #148]	; (80017dc <stm32_clock_init+0x10c>)
 8001748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174c:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <stm32_clock_init+0x110>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f9      	beq.n	800174e <stm32_clock_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <stm32_clock_init+0x10c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f9      	beq.n	800175a <stm32_clock_init+0x8a>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <stm32_clock_init+0x10c>)
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <stm32_clock_init+0x118>)
 800176a:	609a      	str	r2, [r3, #8]

#if STM32_HAS_RCC_DCKCFGR
  /* DCKCFGR register initialization, note, must take care of the _OFF
   pseudo settings.*/
  {
    uint32_t dckcfgr = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	9301      	str	r3, [sp, #4]
  /* Special case, in those devices STM32_CK48MSEL is located in the
     DCKCFGR register.*/
    dckcfgr |= STM32_CK48MSEL;
#endif
#if !defined(STM32F413xx)
    RCC->DCKCFGR = dckcfgr |
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <stm32_clock_init+0x10c>)
                   STM32_TIMPRE | STM32_PLLSAIDIVQ | STM32_PLLI2SDIVQ;
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	f043 0303 	orr.w	r3, r3, #3
    RCC->DCKCFGR = dckcfgr |
 8001778:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <stm32_clock_init+0x11c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <stm32_clock_init+0x120>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d109      	bne.n	800179a <stm32_clock_init+0xca>
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <stm32_clock_init+0x124>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <stm32_clock_init+0x128>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d104      	bne.n	800179a <stm32_clock_init+0xca>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <stm32_clock_init+0x12c>)
 8001792:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e003      	b.n	80017a2 <stm32_clock_init+0xd2>
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <stm32_clock_init+0x12c>)
 800179c:	f240 7202 	movw	r2, #1794	; 0x702
 80017a0:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <stm32_clock_init+0x10c>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <stm32_clock_init+0x10c>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <stm32_clock_init+0x10c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d1f9      	bne.n	80017ae <stm32_clock_init+0xde>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <stm32_clock_init+0x10c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <stm32_clock_init+0x10c>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <stm32_clock_init+0x10c>)
 80017c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <stm32_clock_init+0x10c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6653      	str	r3, [r2, #100]	; 0x64
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <stm32_clock_init+0x10c>)
 80017d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80017d6:	b002      	add	sp, #8
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000
 80017e4:	07015410 	.word	0x07015410
 80017e8:	38881000 	.word	0x38881000
 80017ec:	e0042000 	.word	0xe0042000
 80017f0:	20006411 	.word	0x20006411
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	410fc241 	.word	0x410fc241
 80017fc:	40023c00 	.word	0x40023c00

08001800 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8001800:	b500      	push	{lr}
 8001802:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <Vector6C+0x34>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800180c:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <Vector6C+0x34>)
 8001810:	9b01      	ldr	r3, [sp, #4]
 8001812:	6093      	str	r3, [r2, #8]
  if (dma.streams[0].func)
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <Vector6C+0x38>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <Vector6C+0x2a>
    dma.streams[0].func(dma.streams[0].param, flags);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <Vector6C+0x38>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <Vector6C+0x38>)
 8001822:	6892      	ldr	r2, [r2, #8]
 8001824:	9901      	ldr	r1, [sp, #4]
 8001826:	4610      	mov	r0, r2
 8001828:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800182a:	f002 fc19 	bl	8004060 <_port_irq_epilogue>
}
 800182e:	b003      	add	sp, #12
 8001830:	f85d fb04 	ldr.w	pc, [sp], #4
 8001834:	40026000 	.word	0x40026000
 8001838:	20000820 	.word	0x20000820
 800183c:	00000000 	.word	0x00000000

08001840 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8001840:	b500      	push	{lr}
 8001842:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <Vector70+0x38>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800184e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <Vector70+0x38>)
 8001852:	9b01      	ldr	r3, [sp, #4]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	6093      	str	r3, [r2, #8]
  if (dma.streams[1].func)
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <Vector70+0x3c>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <Vector70+0x2e>
    dma.streams[1].func(dma.streams[1].param, flags);
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <Vector70+0x3c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <Vector70+0x3c>)
 8001866:	6912      	ldr	r2, [r2, #16]
 8001868:	9901      	ldr	r1, [sp, #4]
 800186a:	4610      	mov	r0, r2
 800186c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800186e:	f002 fbf7 	bl	8004060 <_port_irq_epilogue>
}
 8001872:	b003      	add	sp, #12
 8001874:	f85d fb04 	ldr.w	pc, [sp], #4
 8001878:	40026000 	.word	0x40026000
 800187c:	20000820 	.word	0x20000820

08001880 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8001880:	b500      	push	{lr}
 8001882:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <Vector74+0x38>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800188e:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
 8001890:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <Vector74+0x38>)
 8001892:	9b01      	ldr	r3, [sp, #4]
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	6093      	str	r3, [r2, #8]
  if (dma.streams[2].func)
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <Vector74+0x3c>)
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <Vector74+0x2e>
    dma.streams[2].func(dma.streams[2].param, flags);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <Vector74+0x3c>)
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <Vector74+0x3c>)
 80018a6:	6992      	ldr	r2, [r2, #24]
 80018a8:	9901      	ldr	r1, [sp, #4]
 80018aa:	4610      	mov	r0, r2
 80018ac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80018ae:	f002 fbd7 	bl	8004060 <_port_irq_epilogue>
}
 80018b2:	b003      	add	sp, #12
 80018b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b8:	40026000 	.word	0x40026000
 80018bc:	20000820 	.word	0x20000820

080018c0 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80018c0:	b500      	push	{lr}
 80018c2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <Vector78+0x38>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0d9b      	lsrs	r3, r3, #22
 80018ca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80018ce:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
 80018d0:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <Vector78+0x38>)
 80018d2:	9b01      	ldr	r3, [sp, #4]
 80018d4:	059b      	lsls	r3, r3, #22
 80018d6:	6093      	str	r3, [r2, #8]
  if (dma.streams[3].func)
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <Vector78+0x3c>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <Vector78+0x2e>
    dma.streams[3].func(dma.streams[3].param, flags);
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <Vector78+0x3c>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a05      	ldr	r2, [pc, #20]	; (80018fc <Vector78+0x3c>)
 80018e6:	6a12      	ldr	r2, [r2, #32]
 80018e8:	9901      	ldr	r1, [sp, #4]
 80018ea:	4610      	mov	r0, r2
 80018ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80018ee:	f002 fbb7 	bl	8004060 <_port_irq_epilogue>
}
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018f8:	40026000 	.word	0x40026000
 80018fc:	20000820 	.word	0x20000820

08001900 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8001900:	b500      	push	{lr}
 8001902:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <Vector7C+0x34>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800190c:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <Vector7C+0x34>)
 8001910:	9b01      	ldr	r3, [sp, #4]
 8001912:	60d3      	str	r3, [r2, #12]
  if (dma.streams[4].func)
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <Vector7C+0x38>)
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <Vector7C+0x2a>
    dma.streams[4].func(dma.streams[4].param, flags);
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <Vector7C+0x38>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <Vector7C+0x38>)
 8001922:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001924:	9901      	ldr	r1, [sp, #4]
 8001926:	4610      	mov	r0, r2
 8001928:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800192a:	f002 fb99 	bl	8004060 <_port_irq_epilogue>
}
 800192e:	b003      	add	sp, #12
 8001930:	f85d fb04 	ldr.w	pc, [sp], #4
 8001934:	40026000 	.word	0x40026000
 8001938:	20000820 	.word	0x20000820
 800193c:	00000000 	.word	0x00000000

08001940 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8001940:	b500      	push	{lr}
 8001942:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <Vector80+0x38>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800194e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
 8001950:	4a09      	ldr	r2, [pc, #36]	; (8001978 <Vector80+0x38>)
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	019b      	lsls	r3, r3, #6
 8001956:	60d3      	str	r3, [r2, #12]
  if (dma.streams[5].func)
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <Vector80+0x3c>)
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <Vector80+0x2e>
    dma.streams[5].func(dma.streams[5].param, flags);
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <Vector80+0x3c>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	4a05      	ldr	r2, [pc, #20]	; (800197c <Vector80+0x3c>)
 8001966:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001968:	9901      	ldr	r1, [sp, #4]
 800196a:	4610      	mov	r0, r2
 800196c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 800196e:	f002 fb77 	bl	8004060 <_port_irq_epilogue>
}
 8001972:	b003      	add	sp, #12
 8001974:	f85d fb04 	ldr.w	pc, [sp], #4
 8001978:	40026000 	.word	0x40026000
 800197c:	20000820 	.word	0x20000820

08001980 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8001980:	b500      	push	{lr}
 8001982:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <Vector84+0x38>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800198e:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
 8001990:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <Vector84+0x38>)
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	60d3      	str	r3, [r2, #12]
  if (dma.streams[6].func)
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <Vector84+0x3c>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <Vector84+0x2e>
    dma.streams[6].func(dma.streams[6].param, flags);
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <Vector84+0x3c>)
 80019a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <Vector84+0x3c>)
 80019a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a8:	9901      	ldr	r1, [sp, #4]
 80019aa:	4610      	mov	r0, r2
 80019ac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80019ae:	f002 fb57 	bl	8004060 <_port_irq_epilogue>
}
 80019b2:	b003      	add	sp, #12
 80019b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b8:	40026000 	.word	0x40026000
 80019bc:	20000820 	.word	0x20000820

080019c0 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80019c0:	b500      	push	{lr}
 80019c2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <VectorFC+0x38>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0d9b      	lsrs	r3, r3, #22
 80019ca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 80019ce:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <VectorFC+0x38>)
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	059b      	lsls	r3, r3, #22
 80019d6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[7].func)
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <VectorFC+0x3c>)
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <VectorFC+0x2e>
    dma.streams[7].func(dma.streams[7].param, flags);
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <VectorFC+0x3c>)
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	4a05      	ldr	r2, [pc, #20]	; (80019fc <VectorFC+0x3c>)
 80019e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	4610      	mov	r0, r2
 80019ec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80019ee:	f002 fb37 	bl	8004060 <_port_irq_epilogue>
}
 80019f2:	b003      	add	sp, #12
 80019f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f8:	40026000 	.word	0x40026000
 80019fc:	20000820 	.word	0x20000820

08001a00 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8001a00:	b500      	push	{lr}
 8001a02:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <Vector120+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001a0c:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <Vector120+0x34>)
 8001a10:	9b01      	ldr	r3, [sp, #4]
 8001a12:	6093      	str	r3, [r2, #8]
  if (dma.streams[8].func)
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <Vector120+0x38>)
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <Vector120+0x2a>
    dma.streams[8].func(dma.streams[8].param, flags);
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <Vector120+0x38>)
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <Vector120+0x38>)
 8001a22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	4610      	mov	r0, r2
 8001a28:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001a2a:	f002 fb19 	bl	8004060 <_port_irq_epilogue>
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a34:	40026400 	.word	0x40026400
 8001a38:	20000820 	.word	0x20000820
 8001a3c:	00000000 	.word	0x00000000

08001a40 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8001a40:	b500      	push	{lr}
 8001a42:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <Vector124+0x38>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001a4e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <Vector124+0x38>)
 8001a52:	9b01      	ldr	r3, [sp, #4]
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	6093      	str	r3, [r2, #8]
  if (dma.streams[9].func)
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <Vector124+0x3c>)
 8001a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <Vector124+0x2e>
    dma.streams[9].func(dma.streams[9].param, flags);
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <Vector124+0x3c>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <Vector124+0x3c>)
 8001a66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a68:	9901      	ldr	r1, [sp, #4]
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001a6e:	f002 faf7 	bl	8004060 <_port_irq_epilogue>
}
 8001a72:	b003      	add	sp, #12
 8001a74:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a78:	40026400 	.word	0x40026400
 8001a7c:	20000820 	.word	0x20000820

08001a80 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8001a80:	b500      	push	{lr}
 8001a82:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <Vector128+0x38>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001a8e:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
 8001a90:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <Vector128+0x38>)
 8001a92:	9b01      	ldr	r3, [sp, #4]
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	6093      	str	r3, [r2, #8]
  if (dma.streams[10].func)
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <Vector128+0x3c>)
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <Vector128+0x2e>
    dma.streams[10].func(dma.streams[10].param, flags);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <Vector128+0x3c>)
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <Vector128+0x3c>)
 8001aa6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001aa8:	9901      	ldr	r1, [sp, #4]
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001aae:	f002 fad7 	bl	8004060 <_port_irq_epilogue>
}
 8001ab2:	b003      	add	sp, #12
 8001ab4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab8:	40026400 	.word	0x40026400
 8001abc:	20000820 	.word	0x20000820

08001ac0 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8001ac0:	b500      	push	{lr}
 8001ac2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <Vector12C+0x38>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0d9b      	lsrs	r3, r3, #22
 8001aca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001ace:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <Vector12C+0x38>)
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	059b      	lsls	r3, r3, #22
 8001ad6:	6093      	str	r3, [r2, #8]
  if (dma.streams[11].func)
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <Vector12C+0x3c>)
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d006      	beq.n	8001aee <Vector12C+0x2e>
    dma.streams[11].func(dma.streams[11].param, flags);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <Vector12C+0x3c>)
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <Vector12C+0x3c>)
 8001ae6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001ae8:	9901      	ldr	r1, [sp, #4]
 8001aea:	4610      	mov	r0, r2
 8001aec:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001aee:	f002 fab7 	bl	8004060 <_port_irq_epilogue>
}
 8001af2:	b003      	add	sp, #12
 8001af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af8:	40026400 	.word	0x40026400
 8001afc:	20000820 	.word	0x20000820

08001b00 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8001b00:	b500      	push	{lr}
 8001b02:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <Vector130+0x34>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001b0c:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <Vector130+0x34>)
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	60d3      	str	r3, [r2, #12]
  if (dma.streams[12].func)
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <Vector130+0x38>)
 8001b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <Vector130+0x2a>
    dma.streams[12].func(dma.streams[12].param, flags);
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <Vector130+0x38>)
 8001b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <Vector130+0x38>)
 8001b22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b24:	9901      	ldr	r1, [sp, #4]
 8001b26:	4610      	mov	r0, r2
 8001b28:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001b2a:	f002 fa99 	bl	8004060 <_port_irq_epilogue>
}
 8001b2e:	b003      	add	sp, #12
 8001b30:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b34:	40026400 	.word	0x40026400
 8001b38:	20000820 	.word	0x20000820
 8001b3c:	00000000 	.word	0x00000000

08001b40 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8001b40:	b500      	push	{lr}
 8001b42:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <Vector150+0x38>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001b4e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
 8001b50:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <Vector150+0x38>)
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	60d3      	str	r3, [r2, #12]
  if (dma.streams[13].func)
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <Vector150+0x3c>)
 8001b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <Vector150+0x2e>
    dma.streams[13].func(dma.streams[13].param, flags);
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <Vector150+0x3c>)
 8001b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b64:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <Vector150+0x3c>)
 8001b66:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8001b68:	9901      	ldr	r1, [sp, #4]
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001b6e:	f002 fa77 	bl	8004060 <_port_irq_epilogue>
}
 8001b72:	b003      	add	sp, #12
 8001b74:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b78:	40026400 	.word	0x40026400
 8001b7c:	20000820 	.word	0x20000820

08001b80 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 8001b80:	b500      	push	{lr}
 8001b82:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <Vector154+0x38>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001b8e:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <Vector154+0x38>)
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	60d3      	str	r3, [r2, #12]
  if (dma.streams[14].func)
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <Vector154+0x3c>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <Vector154+0x2e>
    dma.streams[14].func(dma.streams[14].param, flags);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <Vector154+0x3c>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <Vector154+0x3c>)
 8001ba6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8001ba8:	9901      	ldr	r1, [sp, #4]
 8001baa:	4610      	mov	r0, r2
 8001bac:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001bae:	f002 fa57 	bl	8004060 <_port_irq_epilogue>
}
 8001bb2:	b003      	add	sp, #12
 8001bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb8:	40026400 	.word	0x40026400
 8001bbc:	20000820 	.word	0x20000820

08001bc0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8001bc0:	b500      	push	{lr}
 8001bc2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <Vector158+0x3c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0d9b      	lsrs	r3, r3, #22
 8001bca:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 8001bce:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <Vector158+0x3c>)
 8001bd2:	9b01      	ldr	r3, [sp, #4]
 8001bd4:	059b      	lsls	r3, r3, #22
 8001bd6:	60d3      	str	r3, [r2, #12]
  if (dma.streams[15].func)
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <Vector158+0x40>)
 8001bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <Vector158+0x30>
    dma.streams[15].func(dma.streams[15].param, flags);
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <Vector158+0x40>)
 8001be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <Vector158+0x40>)
 8001be6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8001bea:	9901      	ldr	r1, [sp, #4]
 8001bec:	4610      	mov	r0, r2
 8001bee:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8001bf0:	f002 fa36 	bl	8004060 <_port_irq_epilogue>
}
 8001bf4:	b003      	add	sp, #12
 8001bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfa:	bf00      	nop
 8001bfc:	40026400 	.word	0x40026400
 8001c00:	20000820 	.word	0x20000820
	...

08001c10 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8001c10:	b082      	sub	sp, #8
  unsigned i;

  dma.allocated_mask = 0U;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <dmaInit+0x60>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	e012      	b.n	8001c44 <dmaInit+0x34>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001c1e:	4915      	ldr	r1, [pc, #84]	; (8001c74 <dmaInit+0x64>)
 8001c20:	9a01      	ldr	r2, [sp, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <dmaInit+0x60>)
 8001c34:	9b01      	ldr	r3, [sp, #4]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8001c3e:	9b01      	ldr	r3, [sp, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	9b01      	ldr	r3, [sp, #4]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	d9e9      	bls.n	8001c1e <dmaInit+0xe>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <dmaInit+0x68>)
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <dmaInit+0x68>)
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295
 8001c58:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <dmaInit+0x6c>)
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <dmaInit+0x6c>)
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	60da      	str	r2, [r3, #12]
}
 8001c6a:	b002      	add	sp, #8
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000820 	.word	0x20000820
 8001c74:	08004c74 	.word	0x08004c74
 8001c78:	40026000 	.word	0x40026000
 8001c7c:	40026400 	.word	0x40026400

08001c80 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
 8001c80:	b500      	push	{lr}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	9003      	str	r0, [sp, #12]
 8001c86:	9102      	str	r1, [sp, #8]
 8001c88:	9201      	str	r2, [sp, #4]
 8001c8a:	9300      	str	r3, [sp, #0]
  uint32_t i, startid, endid;

  osalDbgCheckClassI();

  if (id < STM32_DMA_STREAMS) {
 8001c8c:	9b03      	ldr	r3, [sp, #12]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	d806      	bhi.n	8001ca0 <dmaStreamAllocI+0x20>
    startid = id;
 8001c92:	9b03      	ldr	r3, [sp, #12]
 8001c94:	9308      	str	r3, [sp, #32]
    endid   = id;
 8001c96:	9b03      	ldr	r3, [sp, #12]
 8001c98:	9307      	str	r3, [sp, #28]
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
 8001c9a:	9b08      	ldr	r3, [sp, #32]
 8001c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c9e:	e078      	b.n	8001d92 <dmaStreamAllocI+0x112>
    return NULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e07b      	b.n	8001d9c <dmaStreamAllocI+0x11c>
    uint32_t mask = (1U << i);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	9306      	str	r3, [sp, #24]
    if ((dma.allocated_mask & mask) == 0U) {
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <dmaStreamAllocI+0x124>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	9b06      	ldr	r3, [sp, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d168      	bne.n	8001d8c <dmaStreamAllocI+0x10c>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8001cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <dmaStreamAllocI+0x128>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	9305      	str	r3, [sp, #20]

      /* Installs the DMA handler.*/
      dma.streams[i].func  = func;
 8001cca:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <dmaStreamAllocI+0x124>)
 8001ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	9a01      	ldr	r2, [sp, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
      dma.streams[i].param = param;
 8001cd6:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <dmaStreamAllocI+0x124>)
 8001cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	9a00      	ldr	r2, [sp, #0]
 8001ce0:	609a      	str	r2, [r3, #8]
      dma.allocated_mask  |= mask;
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <dmaStreamAllocI+0x124>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	9b06      	ldr	r3, [sp, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	4a2e      	ldr	r2, [pc, #184]	; (8001da4 <dmaStreamAllocI+0x124>)
 8001cec:	6013      	str	r3, [r2, #0]

      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
 8001cee:	9b06      	ldr	r3, [sp, #24]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <dmaStreamAllocI+0x92>
        rccEnableDMA1(true);
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0c:	6513      	str	r3, [r2, #80]	; 0x50
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
 8001d12:	9b06      	ldr	r3, [sp, #24]
 8001d14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00d      	beq.n	8001d38 <dmaStreamAllocI+0xb8>
        rccEnableDMA2(true);
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d32:	6513      	str	r3, [r2, #80]	; 0x50
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <dmaStreamAllocI+0x12c>)
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
 8001d38:	9b05      	ldr	r3, [sp, #20]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	9b05      	ldr	r3, [sp, #20]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 021f 	bic.w	r2, r2, #31
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	9b05      	ldr	r3, [sp, #20]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f8      	bne.n	8001d48 <dmaStreamAllocI+0xc8>
 8001d56:	9b05      	ldr	r3, [sp, #20]
 8001d58:	7a5b      	ldrb	r3, [r3, #9]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	9b05      	ldr	r3, [sp, #20]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	223d      	movs	r2, #61	; 0x3d
 8001d62:	408a      	lsls	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001d66:	9b05      	ldr	r3, [sp, #20]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001d6e:	9b05      	ldr	r3, [sp, #20]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2221      	movs	r2, #33	; 0x21
 8001d74:	615a      	str	r2, [r3, #20]

      /* Enables the associated IRQ vector if a callback is defined.*/
      if (func != NULL) {
 8001d76:	9b01      	ldr	r3, [sp, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <dmaStreamAllocI+0x108>
        nvicEnableVector(dmastp->vector, priority);
 8001d7c:	9b05      	ldr	r3, [sp, #20]
 8001d7e:	7adb      	ldrb	r3, [r3, #11]
 8001d80:	9902      	ldr	r1, [sp, #8]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa3c 	bl	8001200 <nvicEnableVector>
      }

      return dmastp;
 8001d88:	9b05      	ldr	r3, [sp, #20]
 8001d8a:	e007      	b.n	8001d9c <dmaStreamAllocI+0x11c>
  for (i = startid; i <= endid; i++) {
 8001d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d8e:	3301      	adds	r3, #1
 8001d90:	9309      	str	r3, [sp, #36]	; 0x24
 8001d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d94:	9b07      	ldr	r3, [sp, #28]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d984      	bls.n	8001ca4 <dmaStreamAllocI+0x24>
    }
  }

  return NULL;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	b00b      	add	sp, #44	; 0x2c
 8001da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da4:	20000820 	.word	0x20000820
 8001da8:	08004c74 	.word	0x08004c74
 8001dac:	40023800 	.word	0x40023800

08001db0 <_pal_lld_init>:
/**
 * @brief   PAL driver initialization.
 *
 * @notapi
 */
void _pal_lld_init(void) {
 8001db0:	b082      	sub	sp, #8

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	e00d      	b.n	8001dd4 <_pal_lld_init+0x24>
    _pal_init_event(i);
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <_pal_lld_init+0x30>)
 8001dba:	9b01      	ldr	r3, [sp, #4]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <_pal_lld_init+0x30>)
 8001dc4:	9b01      	ldr	r3, [sp, #4]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 16; i++) {
 8001dce:	9b01      	ldr	r3, [sp, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	9b01      	ldr	r3, [sp, #4]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d9ee      	bls.n	8001db8 <_pal_lld_init+0x8>
  }
#endif
}
 8001dda:	b002      	add	sp, #8
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	200008a4 	.word	0x200008a4
	...

08001df0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8001df0:	b08e      	sub	sp, #56	; 0x38
 8001df2:	9003      	str	r0, [sp, #12]
 8001df4:	9102      	str	r1, [sp, #8]
 8001df6:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8001df8:	9b01      	ldr	r3, [sp, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8001e00:	9b01      	ldr	r3, [sp, #4]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8001e0a:	9b01      	ldr	r3, [sp, #4]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8001e14:	9b01      	ldr	r3, [sp, #4]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	09db      	lsrs	r3, r3, #7
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
 8001e2c:	9b02      	ldr	r3, [sp, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d079      	beq.n	8001f2a <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8001e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	9a08      	ldr	r2, [sp, #32]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
 8001e46:	2201      	movs	r2, #1
 8001e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
 8001e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
 8001e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8001e6c:	9b03      	ldr	r3, [sp, #12]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	9b06      	ldr	r3, [sp, #24]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	9b03      	ldr	r3, [sp, #12]
 8001e7c:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8001e7e:	9b03      	ldr	r3, [sp, #12]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	9b05      	ldr	r3, [sp, #20]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	9b03      	ldr	r3, [sp, #12]
 8001e8e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8001e90:	9b03      	ldr	r3, [sp, #12]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	9b03      	ldr	r3, [sp, #12]
 8001ea0:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8001ea2:	9b01      	ldr	r3, [sp, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d11f      	bne.n	8001eec <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8001eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eae:	2b07      	cmp	r3, #7
 8001eb0:	d809      	bhi.n	8001ec6 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001eb2:	9b03      	ldr	r3, [sp, #12]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	9b04      	ldr	r3, [sp, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	9b07      	ldr	r3, [sp, #28]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	9b03      	ldr	r3, [sp, #12]
 8001ec2:	621a      	str	r2, [r3, #32]
 8001ec4:	e008      	b.n	8001ed8 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001ec6:	9b03      	ldr	r3, [sp, #12]
 8001ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eca:	9b04      	ldr	r3, [sp, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	9b07      	ldr	r3, [sp, #28]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	9b03      	ldr	r3, [sp, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
 8001ed8:	9b03      	ldr	r3, [sp, #12]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	9b05      	ldr	r3, [sp, #20]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	9b03      	ldr	r3, [sp, #12]
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	e01e      	b.n	8001f2a <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	9b05      	ldr	r3, [sp, #20]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	9b03      	ldr	r3, [sp, #12]
 8001efc:	601a      	str	r2, [r3, #0]
        if (bit < 8)
 8001efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f00:	2b07      	cmp	r3, #7
 8001f02:	d809      	bhi.n	8001f18 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8001f04:	9b03      	ldr	r3, [sp, #12]
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	9b04      	ldr	r3, [sp, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	9b07      	ldr	r3, [sp, #28]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	9b03      	ldr	r3, [sp, #12]
 8001f14:	621a      	str	r2, [r3, #32]
 8001f16:	e008      	b.n	8001f2a <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8001f18:	9b03      	ldr	r3, [sp, #12]
 8001f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1c:	9b04      	ldr	r3, [sp, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	401a      	ands	r2, r3
 8001f22:	9b07      	ldr	r3, [sp, #28]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	9b03      	ldr	r3, [sp, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
 8001f2a:	9b02      	ldr	r3, [sp, #8]
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	9302      	str	r3, [sp, #8]
    if (!mask)
 8001f30:	9b02      	ldr	r3, [sp, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00f      	beq.n	8001f56 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
 8001f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
 8001f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
 8001f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
 8001f48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
 8001f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f50:	3301      	adds	r3, #1
 8001f52:	9309      	str	r3, [sp, #36]	; 0x24
 8001f54:	e76a      	b.n	8001e2c <_pal_lld_setgroupmode+0x3c>
  }
}
 8001f56:	b00e      	add	sp, #56	; 0x38
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	0000      	movs	r0, r0
	...

08001f60 <_pal_lld_enablepadevent>:
 *
 * @notapi
 */
void _pal_lld_enablepadevent(ioportid_t port,
                             iopadid_t pad,
                             ioeventmode_t mode) {
 8001f60:	b08a      	sub	sp, #40	; 0x28
 8001f62:	9003      	str	r0, [sp, #12]
 8001f64:	9102      	str	r1, [sp, #8]
 8001f66:	9201      	str	r2, [sp, #4]

  uint32_t padmask, cridx, croff, crmask, portidx;

  /* Mask of the pad.*/
  padmask = 1U << (uint32_t)pad;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	9b02      	ldr	r3, [sp, #8]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	9309      	str	r3, [sp, #36]	; 0x24
  osalDbgAssert(((EXTI->RTSR & padmask) == 0U) &&
                ((EXTI->FTSR & padmask) == 0U), "channel already in use");
#endif

  /* Index and mask of the SYSCFG CR register to be used.*/
  cridx  = (uint32_t)pad >> 2U;
 8001f72:	9b02      	ldr	r3, [sp, #8]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	9308      	str	r3, [sp, #32]
  croff = ((uint32_t)pad & 3U) * 4U;
 8001f78:	9b02      	ldr	r3, [sp, #8]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	9307      	str	r3, [sp, #28]
  crmask = ~(0xFU << croff);
 8001f82:	220f      	movs	r2, #15
 8001f84:	9b07      	ldr	r3, [sp, #28]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	9306      	str	r3, [sp, #24]

  /* Port index is obtained assuming that GPIO ports are placed at regular
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8001f94:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8001f98:	0a9b      	lsrs	r3, r3, #10
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	9305      	str	r3, [sp, #20]

  /* Port selection in SYSCFG.*/
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 8001fa0:	4a22      	ldr	r2, [pc, #136]	; (800202c <_pal_lld_enablepadevent+0xcc>)
 8001fa2:	9b08      	ldr	r3, [sp, #32]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001faa:	9b06      	ldr	r3, [sp, #24]
 8001fac:	401a      	ands	r2, r3
 8001fae:	9905      	ldr	r1, [sp, #20]
 8001fb0:	9b07      	ldr	r3, [sp, #28]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	491d      	ldr	r1, [pc, #116]	; (800202c <_pal_lld_enablepadevent+0xcc>)
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	9b08      	ldr	r3, [sp, #32]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* Programming interrupt and event registers.*/
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <_pal_lld_enablepadevent+0x7a>
    EXTI->RTSR |= padmask;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4917      	ldr	r1, [pc, #92]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]
 8001fd8:	e006      	b.n	8001fe8 <_pal_lld_enablepadevent+0x88>
  else
    EXTI->RTSR &= ~padmask;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	4913      	ldr	r1, [pc, #76]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <_pal_lld_enablepadevent+0xa0>
    EXTI->FTSR |= padmask;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	490e      	ldr	r1, [pc, #56]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8001ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]
 8001ffe:	e006      	b.n	800200e <_pal_lld_enablepadevent+0xae>
  else
    EXTI->FTSR &= ~padmask;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002006:	43db      	mvns	r3, r3
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 800200a:	4013      	ands	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]

  /* Programming interrupt and event registers.*/
  EXTI->IMR |= padmask;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4907      	ldr	r1, [pc, #28]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8002014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]
  EXTI->EMR &= ~padmask;
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002020:	43db      	mvns	r3, r3
 8002022:	4903      	ldr	r1, [pc, #12]	; (8002030 <_pal_lld_enablepadevent+0xd0>)
 8002024:	4013      	ands	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
#endif
}
 8002028:	b00a      	add	sp, #40	; 0x28
 800202a:	4770      	bx	lr
 800202c:	40013800 	.word	0x40013800
 8002030:	40013c00 	.word	0x40013c00
	...

08002040 <port_lock.lto_priv.133>:
static inline void port_lock(void) {
 8002040:	b082      	sub	sp, #8
 8002042:	2320      	movs	r3, #32
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	9b01      	ldr	r3, [sp, #4]
 8002048:	f383 8811 	msr	BASEPRI, r3
}
 800204c:	b002      	add	sp, #8
 800204e:	4770      	bx	lr

08002050 <port_unlock.lto_priv.109>:
static inline void port_unlock(void) {
 8002050:	b082      	sub	sp, #8
 8002052:	2300      	movs	r3, #0
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	f383 8811 	msr	BASEPRI, r3
}
 800205c:	b002      	add	sp, #8
 800205e:	4770      	bx	lr

08002060 <port_lock_from_isr.lto_priv.97>:
 * @brief   Kernel-lock action from an interrupt handler.
 * @details In this port this function raises the base priority to kernel
 *          level.
 * @note    Same as @p port_lock() in this port.
 */
static inline void port_lock_from_isr(void) {
 8002060:	b508      	push	{r3, lr}

  port_lock();
 8002062:	f7ff ffed 	bl	8002040 <port_lock.lto_priv.133>
}
 8002066:	bd08      	pop	{r3, pc}
	...

08002070 <port_unlock_from_isr.lto_priv.90>:
 * @brief   Kernel-unlock action from an interrupt handler.
 * @details In this port this function lowers the base priority to user
 *          level.
 * @note    Same as @p port_unlock() in this port.
 */
static inline void port_unlock_from_isr(void) {
 8002070:	b508      	push	{r3, lr}

  port_unlock();
 8002072:	f7ff ffed 	bl	8002050 <port_unlock.lto_priv.109>
}
 8002076:	bd08      	pop	{r3, pc}
	...

08002080 <chSysLockFromISR.lto_priv.46>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
 8002080:	b508      	push	{r3, lr}

  port_lock_from_isr();
 8002082:	f7ff ffed 	bl	8002060 <port_lock_from_isr.lto_priv.97>
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
}
 8002086:	bd08      	pop	{r3, pc}
	...

08002090 <chSysUnlockFromISR.lto_priv.40>:
 *          syscall from an interrupt handler.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
 8002090:	b508      	push	{r3, lr}

  _dbg_check_unlock_from_isr();
  _stats_stop_measure_crit_isr();
  port_unlock_from_isr();
 8002092:	f7ff ffed 	bl	8002070 <port_unlock_from_isr.lto_priv.90>
}
 8002096:	bd08      	pop	{r3, pc}
	...

080020a0 <osalSysHalt>:
static inline void osalSysHalt(const char *reason) {
 80020a0:	b500      	push	{lr}
 80020a2:	b083      	sub	sp, #12
 80020a4:	9001      	str	r0, [sp, #4]
  chSysHalt(reason);
 80020a6:	9801      	ldr	r0, [sp, #4]
 80020a8:	f000 ff32 	bl	8002f10 <chSysHalt>
}
 80020ac:	b003      	add	sp, #12
 80020ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b2:	bf00      	nop
	...

080020c0 <osalSysLockFromISR.lto_priv.22>:
static inline void osalSysLockFromISR(void) {
 80020c0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80020c2:	f7ff ffdd 	bl	8002080 <chSysLockFromISR.lto_priv.46>
}
 80020c6:	bd08      	pop	{r3, pc}
	...

080020d0 <osalSysUnlockFromISR.lto_priv.18>:
static inline void osalSysUnlockFromISR(void) {
 80020d0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80020d2:	f7ff ffdd 	bl	8002090 <chSysUnlockFromISR.lto_priv.40>
}
 80020d6:	bd08      	pop	{r3, pc}
	...

080020e0 <osalThreadResumeI.lto_priv.204>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 80020e0:	b500      	push	{lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	9001      	str	r0, [sp, #4]
 80020e6:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
 80020e8:	9900      	ldr	r1, [sp, #0]
 80020ea:	9801      	ldr	r0, [sp, #4]
 80020ec:	f001 fc68 	bl	80039c0 <chThdResumeI>
}
 80020f0:	b003      	add	sp, #12
 80020f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f6:	bf00      	nop
	...

08002100 <spi_lld_serve_rx_interrupt>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8002100:	b500      	push	{lr}
 8002102:	b083      	sub	sp, #12
 8002104:	9001      	str	r0, [sp, #4]
 8002106:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002108:	9b00      	ldr	r3, [sp, #0]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <spi_lld_serve_rx_interrupt+0x18>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8002112:	4848      	ldr	r0, [pc, #288]	; (8002234 <spi_lld_serve_rx_interrupt+0x134>)
 8002114:	f7ff ffc4 	bl	80020a0 <osalSysHalt>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8002118:	9b01      	ldr	r3, [sp, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d028      	beq.n	8002174 <spi_lld_serve_rx_interrupt+0x74>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 8002122:	9b00      	ldr	r3, [sp, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <spi_lld_serve_rx_interrupt+0x40>
      /* Half buffer interrupt.*/
      _spi_isr_half_code(spip);
 800212c:	9b01      	ldr	r3, [sp, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <spi_lld_serve_rx_interrupt+0x40>
 8002136:	9b01      	ldr	r3, [sp, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	9801      	ldr	r0, [sp, #4]
 800213e:	4798      	blx	r3
    }
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8002140:	9b00      	ldr	r3, [sp, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d06f      	beq.n	800222a <spi_lld_serve_rx_interrupt+0x12a>
      /* End buffer interrupt.*/
      _spi_isr_full_code(spip);
 800214a:	9b01      	ldr	r3, [sp, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d06a      	beq.n	800222a <spi_lld_serve_rx_interrupt+0x12a>
 8002154:	9b01      	ldr	r3, [sp, #4]
 8002156:	2204      	movs	r2, #4
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	9801      	ldr	r0, [sp, #4]
 8002162:	4798      	blx	r3
 8002164:	9b01      	ldr	r3, [sp, #4]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d15e      	bne.n	800222a <spi_lld_serve_rx_interrupt+0x12a>
 800216c:	9b01      	ldr	r3, [sp, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e05b      	b.n	800222c <spi_lld_serve_rx_interrupt+0x12c>
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 8002174:	9b01      	ldr	r3, [sp, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 021f 	bic.w	r2, r2, #31
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	9b01      	ldr	r3, [sp, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f7      	bne.n	8002188 <spi_lld_serve_rx_interrupt+0x88>
 8002198:	9b01      	ldr	r3, [sp, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	7a5b      	ldrb	r3, [r3, #9]
 800219e:	4619      	mov	r1, r3
 80021a0:	9b01      	ldr	r3, [sp, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	223d      	movs	r2, #61	; 0x3d
 80021a8:	408a      	lsls	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
    dmaStreamDisable(spip->dmarx);
 80021ac:	9b01      	ldr	r3, [sp, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 021f 	bic.w	r2, r2, #31
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	9b01      	ldr	r3, [sp, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f7      	bne.n	80021c0 <spi_lld_serve_rx_interrupt+0xc0>
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	7a5b      	ldrb	r3, [r3, #9]
 80021d6:	4619      	mov	r1, r3
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	223d      	movs	r2, #61	; 0x3d
 80021e0:	408a      	lsls	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 80021e4:	9b01      	ldr	r3, [sp, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00f      	beq.n	800220e <spi_lld_serve_rx_interrupt+0x10e>
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
 80021f4:	9b01      	ldr	r3, [sp, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	9801      	ldr	r0, [sp, #4]
 80021fc:	4798      	blx	r3
 80021fe:	9b01      	ldr	r3, [sp, #4]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b04      	cmp	r3, #4
 8002204:	d106      	bne.n	8002214 <spi_lld_serve_rx_interrupt+0x114>
 8002206:	9b01      	ldr	r3, [sp, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e002      	b.n	8002214 <spi_lld_serve_rx_interrupt+0x114>
 800220e:	9b01      	ldr	r3, [sp, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	f7ff ff54 	bl	80020c0 <osalSysLockFromISR.lto_priv.22>
 8002218:	9b01      	ldr	r3, [sp, #4]
 800221a:	3308      	adds	r3, #8
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff5e 	bl	80020e0 <osalThreadResumeI.lto_priv.204>
 8002224:	f7ff ff54 	bl	80020d0 <osalSysUnlockFromISR.lto_priv.18>
 8002228:	e000      	b.n	800222c <spi_lld_serve_rx_interrupt+0x12c>
      _spi_isr_full_code(spip);
 800222a:	bf00      	nop
  }
}
 800222c:	b003      	add	sp, #12
 800222e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002232:	bf00      	nop
 8002234:	08004d38 	.word	0x08004d38
	...

08002240 <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8002240:	b500      	push	{lr}
 8002242:	b083      	sub	sp, #12
 8002244:	9001      	str	r0, [sp, #4]
 8002246:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8002248:	9b00      	ldr	r3, [sp, #0]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <spi_lld_serve_tx_interrupt+0x18>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <spi_lld_serve_tx_interrupt+0x20>)
 8002254:	f7ff ff24 	bl	80020a0 <osalSysHalt>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8002258:	b003      	add	sp, #12
 800225a:	f85d fb04 	ldr.w	pc, [sp], #4
 800225e:	bf00      	nop
 8002260:	08004d38 	.word	0x08004d38
	...

08002270 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8002270:	b508      	push	{r3, lr}

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8002272:	4809      	ldr	r0, [pc, #36]	; (8002298 <spi_lld_init+0x28>)
 8002274:	f7fe ff24 	bl	80010c0 <spiObjectInit>
  SPID1.spi       = SPI1;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <spi_lld_init+0x28>)
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <spi_lld_init+0x2c>)
 800227c:	61da      	str	r2, [r3, #28]
  SPID1.dmarx     = NULL;
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <spi_lld_init+0x28>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  SPID1.dmatx     = NULL;
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <spi_lld_init+0x28>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800228a:	4b03      	ldr	r3, [pc, #12]	; (8002298 <spi_lld_init+0x28>)
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <spi_lld_init+0x30>)
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8002290:	4b01      	ldr	r3, [pc, #4]	; (8002298 <spi_lld_init+0x28>)
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <spi_lld_init+0x34>)
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 8002296:	bd08      	pop	{r3, pc}
 8002298:	20000924 	.word	0x20000924
 800229c:	40013000 	.word	0x40013000
 80022a0:	06010016 	.word	0x06010016
 80022a4:	06010046 	.word	0x06010046
	...

080022b0 <spi_lld_start>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 80022b0:	b500      	push	{lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	9001      	str	r0, [sp, #4]

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d133      	bne.n	8002326 <spi_lld_start+0x76>
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <spi_lld_start+0x144>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d11f      	bne.n	8002306 <spi_lld_start+0x56>
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI1_RX_DMA_STREAM,
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <spi_lld_start+0x148>)
 80022ca:	210a      	movs	r1, #10
 80022cc:	2008      	movs	r0, #8
 80022ce:	f7ff fcd7 	bl	8001c80 <dmaStreamAllocI>
 80022d2:	4602      	mov	r2, r0
 80022d4:	9b01      	ldr	r3, [sp, #4]
 80022d6:	621a      	str	r2, [r3, #32]
                                    STM32_SPI_SPI1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                                    (void *)spip);
      osalDbgAssert(spip->dmarx != NULL, "unable to allocate stream");
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI1_TX_DMA_STREAM,
 80022d8:	9b01      	ldr	r3, [sp, #4]
 80022da:	4a48      	ldr	r2, [pc, #288]	; (80023fc <spi_lld_start+0x14c>)
 80022dc:	210a      	movs	r1, #10
 80022de:	200b      	movs	r0, #11
 80022e0:	f7ff fcce 	bl	8001c80 <dmaStreamAllocI>
 80022e4:	4602      	mov	r2, r0
 80022e6:	9b01      	ldr	r3, [sp, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
                                    STM32_SPI_SPI1_IRQ_PRIORITY,
                                    (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                                    (void *)spip);
      osalDbgAssert(spip->dmatx != NULL, "unable to allocate stream");
      rccEnableSPI1(true);
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <spi_lld_start+0x150>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a44      	ldr	r2, [pc, #272]	; (8002400 <spi_lld_start+0x150>)
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b42      	ldr	r3, [pc, #264]	; (8002400 <spi_lld_start+0x150>)
 80022f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <spi_lld_start+0x150>)
 80022fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002300:	6653      	str	r3, [r2, #100]	; 0x64
 8002302:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <spi_lld_start+0x150>)
 8002304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002306:	9b01      	ldr	r3, [sp, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f103 020c 	add.w	r2, r3, #12
 800230e:	9b01      	ldr	r3, [sp, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	609a      	str	r2, [r3, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f103 020c 	add.w	r2, r3, #12
 800231e:	9b01      	ldr	r3, [sp, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	609a      	str	r2, [r3, #8]
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	899b      	ldrh	r3, [r3, #12]
 800232c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10c      	bne.n	800234e <spi_lld_start+0x9e>
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002334:	9b01      	ldr	r3, [sp, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002338:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800233c:	9b01      	ldr	r3, [sp, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002340:	9b01      	ldr	r3, [sp, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002344:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002348:	9b01      	ldr	r3, [sp, #4]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
 800234c:	e00f      	b.n	800236e <spi_lld_start+0xbe>
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800234e:	9b01      	ldr	r3, [sp, #4]
 8002350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002352:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002356:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800235a:	9b01      	ldr	r3, [sp, #4]
 800235c:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002366:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  if (spip->config->circular) {
 800236e:	9b01      	ldr	r3, [sp, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00c      	beq.n	8002392 <spi_lld_start+0xe2>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002378:	9b01      	ldr	r3, [sp, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 8002380:	9b01      	ldr	r3, [sp, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002384:	9b01      	ldr	r3, [sp, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f443 7284 	orr.w	r2, r3, #264	; 0x108
 800238c:	9b01      	ldr	r3, [sp, #4]
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002390:	e00b      	b.n	80023aa <spi_lld_start+0xfa>
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 800239a:	9b01      	ldr	r3, [sp, #4]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800239e:	9b01      	ldr	r3, [sp, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	f423 7284 	bic.w	r2, r3, #264	; 0x108
 80023a6:	9b01      	ldr	r3, [sp, #4]
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	9b01      	ldr	r3, [sp, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023b8:	601a      	str	r2, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80023ba:	9b01      	ldr	r3, [sp, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	899b      	ldrh	r3, [r3, #12]
 80023c0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	9b01      	ldr	r3, [sp, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80023cc:	9b01      	ldr	r3, [sp, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	89db      	ldrh	r3, [r3, #14]
 80023d2:	f043 0307 	orr.w	r3, r3, #7
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	605a      	str	r2, [r3, #4]
                    SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	9b01      	ldr	r3, [sp, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	b003      	add	sp, #12
 80023f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f4:	20000924 	.word	0x20000924
 80023f8:	08002101 	.word	0x08002101
 80023fc:	08002241 	.word	0x08002241
 8002400:	40023800 	.word	0x40023800
	...

08002410 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8002410:	b084      	sub	sp, #16
 8002412:	9003      	str	r0, [sp, #12]
 8002414:	9102      	str	r1, [sp, #8]
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	9300      	str	r3, [sp, #0]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	9a00      	ldr	r2, [sp, #0]
 8002422:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002424:	9b03      	ldr	r3, [sp, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	9a02      	ldr	r2, [sp, #8]
 800242c:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 800242e:	9b03      	ldr	r3, [sp, #12]
 8002430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800243c:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	9a01      	ldr	r2, [sp, #4]
 8002446:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002448:	9b03      	ldr	r3, [sp, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	9a02      	ldr	r2, [sp, #8]
 8002450:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002452:	9b03      	ldr	r3, [sp, #12]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002462:	9b03      	ldr	r3, [sp, #12]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	9b03      	ldr	r3, [sp, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 8002476:	9b03      	ldr	r3, [sp, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	9b03      	ldr	r3, [sp, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	b004      	add	sp, #16
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8002490:	b084      	sub	sp, #16
 8002492:	9003      	str	r0, [sp, #12]
 8002494:	9102      	str	r1, [sp, #8]
 8002496:	9201      	str	r2, [sp, #4]

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002498:	9b03      	ldr	r3, [sp, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	9a01      	ldr	r2, [sp, #4]
 80024a0:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	9a02      	ldr	r2, [sp, #8]
 80024aa:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80024ac:	9b03      	ldr	r3, [sp, #12]
 80024ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b0:	9b03      	ldr	r3, [sp, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ba:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <spi_lld_receive+0x78>)
 80024c4:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	9a02      	ldr	r2, [sp, #8]
 80024ce:	605a      	str	r2, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	9a03      	ldr	r2, [sp, #12]
 80024d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024da:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 80024dc:	9b03      	ldr	r3, [sp, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(spip->dmatx);
 80024f0:	9b03      	ldr	r3, [sp, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	9b03      	ldr	r3, [sp, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	b004      	add	sp, #16
 8002506:	4770      	bx	lr
 8002508:	08004d34 	.word	0x08004d34
 800250c:	00000000 	.word	0x00000000

08002510 <port_lock.lto_priv.134>:
static inline void port_lock(void) {
 8002510:	b082      	sub	sp, #8
 8002512:	2320      	movs	r3, #32
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	f383 8811 	msr	BASEPRI, r3
}
 800251c:	b002      	add	sp, #8
 800251e:	4770      	bx	lr

08002520 <port_unlock.lto_priv.110>:
static inline void port_unlock(void) {
 8002520:	b082      	sub	sp, #8
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	9b01      	ldr	r3, [sp, #4]
 8002528:	f383 8811 	msr	BASEPRI, r3
}
 800252c:	b002      	add	sp, #8
 800252e:	4770      	bx	lr

08002530 <port_lock_from_isr.lto_priv.98>:
static inline void port_lock_from_isr(void) {
 8002530:	b508      	push	{r3, lr}
  port_lock();
 8002532:	f7ff ffed 	bl	8002510 <port_lock.lto_priv.134>
}
 8002536:	bd08      	pop	{r3, pc}
	...

08002540 <port_unlock_from_isr.lto_priv.91>:
static inline void port_unlock_from_isr(void) {
 8002540:	b508      	push	{r3, lr}
  port_unlock();
 8002542:	f7ff ffed 	bl	8002520 <port_unlock.lto_priv.110>
}
 8002546:	bd08      	pop	{r3, pc}
	...

08002550 <chSysLockFromISR.lto_priv.47>:
static inline void chSysLockFromISR(void) {
 8002550:	b508      	push	{r3, lr}
  port_lock_from_isr();
 8002552:	f7ff ffed 	bl	8002530 <port_lock_from_isr.lto_priv.98>
}
 8002556:	bd08      	pop	{r3, pc}
	...

08002560 <chSysUnlockFromISR.lto_priv.41>:
static inline void chSysUnlockFromISR(void) {
 8002560:	b508      	push	{r3, lr}
  port_unlock_from_isr();
 8002562:	f7ff ffed 	bl	8002540 <port_unlock_from_isr.lto_priv.91>
}
 8002566:	bd08      	pop	{r3, pc}
	...

08002570 <osalSysLockFromISR.lto_priv.23>:
static inline void osalSysLockFromISR(void) {
 8002570:	b508      	push	{r3, lr}
  chSysLockFromISR();
 8002572:	f7ff ffed 	bl	8002550 <chSysLockFromISR.lto_priv.47>
}
 8002576:	bd08      	pop	{r3, pc}
	...

08002580 <osalSysUnlockFromISR.lto_priv.19>:
static inline void osalSysUnlockFromISR(void) {
 8002580:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 8002582:	f7ff ffed 	bl	8002560 <chSysUnlockFromISR.lto_priv.41>
}
 8002586:	bd08      	pop	{r3, pc}
	...

08002590 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
 8002590:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
 8002592:	f000 fccd 	bl	8002f30 <chSysTimerHandlerI>
}
 8002596:	bd08      	pop	{r3, pc}
	...

080025a0 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80025a0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 80025a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d009      	beq.n	80025c4 <VectorB0+0x24>
    STM32_ST_TIM->SR = 0U;
 80025b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]

    osalSysLockFromISR();
 80025b8:	f7ff ffda 	bl	8002570 <osalSysLockFromISR.lto_priv.23>
    osalOsTimerHandlerI();
 80025bc:	f7ff ffe8 	bl	8002590 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
 80025c0:	f7ff ffde 	bl	8002580 <osalSysUnlockFromISR.lto_priv.19>
  }

  OSAL_IRQ_EPILOGUE();
 80025c4:	f001 fd4c 	bl	8004060 <_port_irq_epilogue>
}
 80025c8:	bd08      	pop	{r3, pc}
 80025ca:	bf00      	nop
 80025cc:	0000      	movs	r0, r0
	...

080025d0 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
 80025d0:	b508      	push	{r3, lr}

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <st_lld_init+0x78>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <st_lld_init+0x78>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <st_lld_init+0x78>)
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <st_lld_init+0x78>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <st_lld_init+0x78>)
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80025ee:	4b17      	ldr	r3, [pc, #92]	; (800264c <st_lld_init+0x7c>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <st_lld_init+0x7c>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80025fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025fe:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8002604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800260e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8002616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261a:	2200      	movs	r2, #0
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800261e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8002626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800262a:	2200      	movs	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800262e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 800263e:	2108      	movs	r1, #8
 8002640:	201c      	movs	r0, #28
 8002642:	f7fe fddd 	bl	8001200 <nvicEnableVector>
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
 8002646:	bd08      	pop	{r3, pc}
 8002648:	40023800 	.word	0x40023800
 800264c:	e0042000 	.word	0xe0042000

08002650 <port_lock.lto_priv.135>:
static inline void port_lock(void) {
 8002650:	b082      	sub	sp, #8
 8002652:	2320      	movs	r3, #32
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	9b01      	ldr	r3, [sp, #4]
 8002658:	f383 8811 	msr	BASEPRI, r3
}
 800265c:	b002      	add	sp, #8
 800265e:	4770      	bx	lr

08002660 <port_unlock.lto_priv.111>:
static inline void port_unlock(void) {
 8002660:	b082      	sub	sp, #8
 8002662:	2300      	movs	r3, #0
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	f383 8811 	msr	BASEPRI, r3
}
 800266c:	b002      	add	sp, #8
 800266e:	4770      	bx	lr

08002670 <port_lock_from_isr.lto_priv.99>:
static inline void port_lock_from_isr(void) {
 8002670:	b508      	push	{r3, lr}
  port_lock();
 8002672:	f7ff ffed 	bl	8002650 <port_lock.lto_priv.135>
}
 8002676:	bd08      	pop	{r3, pc}
	...

08002680 <port_unlock_from_isr.lto_priv.92>:
static inline void port_unlock_from_isr(void) {
 8002680:	b508      	push	{r3, lr}
  port_unlock();
 8002682:	f7ff ffed 	bl	8002660 <port_unlock.lto_priv.111>
}
 8002686:	bd08      	pop	{r3, pc}
	...

08002690 <chSysLockFromISR.lto_priv.48>:
static inline void chSysLockFromISR(void) {
 8002690:	b508      	push	{r3, lr}
  port_lock_from_isr();
 8002692:	f7ff ffed 	bl	8002670 <port_lock_from_isr.lto_priv.99>
}
 8002696:	bd08      	pop	{r3, pc}
	...

080026a0 <chSysUnlockFromISR.lto_priv.42>:
static inline void chSysUnlockFromISR(void) {
 80026a0:	b508      	push	{r3, lr}
  port_unlock_from_isr();
 80026a2:	f7ff ffed 	bl	8002680 <port_unlock_from_isr.lto_priv.92>
}
 80026a6:	bd08      	pop	{r3, pc}
	...

080026b0 <osalSysLockFromISR.lto_priv.24>:
static inline void osalSysLockFromISR(void) {
 80026b0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80026b2:	f7ff ffed 	bl	8002690 <chSysLockFromISR.lto_priv.48>
}
 80026b6:	bd08      	pop	{r3, pc}
	...

080026c0 <osalSysUnlockFromISR.lto_priv.20>:
static inline void osalSysUnlockFromISR(void) {
 80026c0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80026c2:	f7ff ffed 	bl	80026a0 <chSysUnlockFromISR.lto_priv.42>
}
 80026c6:	bd08      	pop	{r3, pc}
	...

080026d0 <osalEventBroadcastFlagsI.lto_priv.14>:
                                            eventflags_t flags) {
 80026d0:	b500      	push	{lr}
 80026d2:	b083      	sub	sp, #12
 80026d4:	9001      	str	r0, [sp, #4]
 80026d6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 80026d8:	9900      	ldr	r1, [sp, #0]
 80026da:	9801      	ldr	r0, [sp, #4]
 80026dc:	f001 fad8 	bl	8003c90 <chEvtBroadcastFlagsI>
}
 80026e0:	b003      	add	sp, #12
 80026e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80026e6:	bf00      	nop
	...

080026f0 <usart_init>:
 * @details This function must be invoked with interrupts disabled.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 80026f0:	b084      	sub	sp, #16
 80026f2:	9001      	str	r0, [sp, #4]
 80026f4:	9100      	str	r1, [sp, #0]
  uint32_t fck;
  USART_TypeDef *u = sdp->usart;
 80026f6:	9b01      	ldr	r3, [sp, #4]
 80026f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fa:	9302      	str	r3, [sp, #8]

  /* Baud rate setting.*/
#if STM32_HAS_USART6
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80026fc:	9b01      	ldr	r3, [sp, #4]
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <usart_init+0xc4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <usart_init+0x20>
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <usart_init+0xc8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d106      	bne.n	800271e <usart_init+0x2e>
#else
  if (sdp->usart == USART1)
#endif
    fck = STM32_PCLK2 / config->speed;
 8002710:	9b00      	ldr	r3, [sp, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a29      	ldr	r2, [pc, #164]	; (80027bc <usart_init+0xcc>)
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	9303      	str	r3, [sp, #12]
 800271c:	e005      	b.n	800272a <usart_init+0x3a>
  else
    fck = STM32_PCLK1 / config->speed;
 800271e:	9b00      	ldr	r3, [sp, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <usart_init+0xd0>)
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	9303      	str	r3, [sp, #12]

  /* Correcting USARTDIV when oversampling by 8 instead of 16.
     Fraction is still 4 bits wide, but only lower 3 bits used.
     Mantissa is doubled, but Fraction is left the same.*/
#if defined(USART_CR1_OVER8)
  if (config->cr1 & USART_CR1_OVER8)
 800272a:	9b00      	ldr	r3, [sp, #0]
 800272c:	889b      	ldrh	r3, [r3, #4]
 800272e:	b21b      	sxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	da08      	bge.n	8002746 <usart_init+0x56>
    fck = ((fck & ~7) * 2) | (fck & 7);
 8002734:	9b03      	ldr	r3, [sp, #12]
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	005a      	lsls	r2, r3, #1
 800273c:	9b03      	ldr	r3, [sp, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	4313      	orrs	r3, r2
 8002744:	9303      	str	r3, [sp, #12]
#endif
  u->BRR = fck;
 8002746:	9b02      	ldr	r3, [sp, #8]
 8002748:	9a03      	ldr	r2, [sp, #12]
 800274a:	609a      	str	r2, [r3, #8]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800274c:	9b00      	ldr	r3, [sp, #0]
 800274e:	88db      	ldrh	r3, [r3, #6]
 8002750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	9b02      	ldr	r3, [sp, #8]
 800275a:	611a      	str	r2, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800275c:	9b00      	ldr	r3, [sp, #0]
 800275e:	891b      	ldrh	r3, [r3, #8]
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	9b02      	ldr	r3, [sp, #8]
 800276a:	615a      	str	r2, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800276c:	9b00      	ldr	r3, [sp, #0]
 800276e:	889b      	ldrh	r3, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8002770:	f443 5304 	orr.w	r3, r3, #8448	; 0x2100
 8002774:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800277c:	9b02      	ldr	r3, [sp, #8]
 800277e:	60da      	str	r2, [r3, #12]
                         USART_CR1_RE;
  u->SR = 0;
 8002780:	9b02      	ldr	r3, [sp, #8]
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002786:	9b02      	ldr	r3, [sp, #8]
 8002788:	681b      	ldr	r3, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800278a:	9b02      	ldr	r3, [sp, #8]
 800278c:	685b      	ldr	r3, [r3, #4]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & (USART_CR1_M | USART_CR1_PCE)) == USART_CR1_PCE) {
 800278e:	9b00      	ldr	r3, [sp, #0]
 8002790:	889b      	ldrh	r3, [r3, #4]
 8002792:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d104      	bne.n	80027a6 <usart_init+0xb6>
    sdp->rxmask = 0x7F;
 800279c:	9b01      	ldr	r3, [sp, #4]
 800279e:	227f      	movs	r2, #127	; 0x7f
 80027a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80027a4:	e003      	b.n	80027ae <usart_init+0xbe>
  }
  else {
    sdp->rxmask = 0xFF;
 80027a6:	9b01      	ldr	r3, [sp, #4]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }
}
 80027ae:	b004      	add	sp, #16
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40011400 	.word	0x40011400
 80027bc:	0501bd00 	.word	0x0501bd00
 80027c0:	0280de80 	.word	0x0280de80
	...

080027d0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] sr        USART SR register value
 */
static void set_error(SerialDriver *sdp, uint16_t sr) {
 80027d0:	b500      	push	{lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	9001      	str	r0, [sp, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	f8ad 3002 	strh.w	r3, [sp, #2]
  eventflags_t sts = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	9303      	str	r3, [sp, #12]

  if (sr & USART_SR_ORE)
 80027e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <set_error+0x24>
    sts |= SD_OVERRUN_ERROR;
 80027ec:	9b03      	ldr	r3, [sp, #12]
 80027ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f2:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_PE)
 80027f4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <set_error+0x38>
    sts |= SD_PARITY_ERROR;
 8002800:	9b03      	ldr	r3, [sp, #12]
 8002802:	f043 0320 	orr.w	r3, r3, #32
 8002806:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_FE)
 8002808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <set_error+0x4c>
    sts |= SD_FRAMING_ERROR;
 8002814:	9b03      	ldr	r3, [sp, #12]
 8002816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800281a:	9303      	str	r3, [sp, #12]
  if (sr & USART_SR_NE)
 800281c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <set_error+0x60>
    sts |= SD_NOISE_ERROR;
 8002828:	9b03      	ldr	r3, [sp, #12]
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	9303      	str	r3, [sp, #12]
  chnAddFlagsI(sdp, sts);
 8002830:	9b01      	ldr	r3, [sp, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	9903      	ldr	r1, [sp, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff4a 	bl	80026d0 <osalEventBroadcastFlagsI.lto_priv.14>
}
 800283c:	b005      	add	sp, #20
 800283e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002842:	bf00      	nop
	...

08002850 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8002850:	b500      	push	{lr}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	9306      	str	r3, [sp, #24]
  uint16_t cr1 = u->CR1;
 800285c:	9b06      	ldr	r3, [sp, #24]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f8ad 3016 	strh.w	r3, [sp, #22]
  uint16_t sr = u->SR;
 8002864:	9b06      	ldr	r3, [sp, #24]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8ad 301e 	strh.w	r3, [sp, #30]

  /* Special case, LIN break detection.*/
  if (sr & USART_SR_LBD) {
 800286c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00e      	beq.n	8002896 <serve_interrupt+0x46>
    osalSysLockFromISR();
 8002878:	f7ff ff1a 	bl	80026b0 <osalSysLockFromISR.lto_priv.24>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff23 	bl	80026d0 <osalEventBroadcastFlagsI.lto_priv.14>
    u->SR = ~USART_SR_LBD;
 800288a:	9b06      	ldr	r3, [sp, #24]
 800288c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002890:	601a      	str	r2, [r3, #0]
    osalSysUnlockFromISR();
 8002892:	f7ff ff15 	bl	80026c0 <osalSysUnlockFromISR.lto_priv.20>
  }

  /* Data available.*/
  osalSysLockFromISR();
 8002896:	f7ff ff0b 	bl	80026b0 <osalSysLockFromISR.lto_priv.24>
 800289a:	e024      	b.n	80028e6 <serve_interrupt+0x96>
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
               USART_SR_PE)) {
    uint8_t b;

    /* Error condition detection.*/
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800289c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <serve_interrupt+0x64>
      set_error(sdp, sr);
 80028a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80028ac:	4619      	mov	r1, r3
 80028ae:	9801      	ldr	r0, [sp, #4]
 80028b0:	f7ff ff8e 	bl	80027d0 <set_error>
    b = (uint8_t)u->DR & sdp->rxmask;
 80028b4:	9b06      	ldr	r3, [sp, #24]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	9b01      	ldr	r3, [sp, #4]
 80028bc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80028c0:	4013      	ands	r3, r2
 80028c2:	f88d 300f 	strb.w	r3, [sp, #15]
    if (sr & USART_SR_RXNE)
 80028c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <serve_interrupt+0x8e>
      sdIncomingDataI(sdp, b);
 80028d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80028d6:	4619      	mov	r1, r3
 80028d8:	9801      	ldr	r0, [sp, #4]
 80028da:	f7fe fb71 	bl	8000fc0 <sdIncomingDataI>
    sr = u->SR;
 80028de:	9b06      	ldr	r3, [sp, #24]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8ad 301e 	strh.w	r3, [sp, #30]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80028e6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80028ea:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1d4      	bne.n	800289c <serve_interrupt+0x4c>
  }
  osalSysUnlockFromISR();
 80028f2:	f7ff fee5 	bl	80026c0 <osalSysUnlockFromISR.lto_priv.20>

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80028f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80028fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d022      	beq.n	8002948 <serve_interrupt+0xf8>
 8002902:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01c      	beq.n	8002948 <serve_interrupt+0xf8>
    msg_t b;
    osalSysLockFromISR();
 800290e:	f7ff fecf 	bl	80026b0 <osalSysLockFromISR.lto_priv.24>
    b = oqGetI(&sdp->oqueue);
 8002912:	9b01      	ldr	r3, [sp, #4]
 8002914:	3330      	adds	r3, #48	; 0x30
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f952 	bl	8000bc0 <oqGetI>
 800291c:	9004      	str	r0, [sp, #16]
    if (b < MSG_OK) {
 800291e:	9b04      	ldr	r3, [sp, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da0c      	bge.n	800293e <serve_interrupt+0xee>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8002924:	9b01      	ldr	r3, [sp, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	2108      	movs	r1, #8
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fed0 	bl	80026d0 <osalEventBroadcastFlagsI.lto_priv.14>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8002930:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8002934:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002938:	9b06      	ldr	r3, [sp, #24]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e002      	b.n	8002944 <serve_interrupt+0xf4>
    }
    else
      u->DR = b;
 800293e:	9a04      	ldr	r2, [sp, #16]
 8002940:	9b06      	ldr	r3, [sp, #24]
 8002942:	605a      	str	r2, [r3, #4]
    osalSysUnlockFromISR();
 8002944:	f7ff febc 	bl	80026c0 <osalSysUnlockFromISR.lto_priv.20>
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8002948:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b00      	cmp	r3, #0
 8002952:	d027      	beq.n	80029a4 <serve_interrupt+0x154>
 8002954:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8002958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295c:	2b00      	cmp	r3, #0
 800295e:	d021      	beq.n	80029a4 <serve_interrupt+0x154>
    osalSysLockFromISR();
 8002960:	f7ff fea6 	bl	80026b0 <osalSysLockFromISR.lto_priv.24>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002968:	9b01      	ldr	r3, [sp, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	429a      	cmp	r2, r3
 800296e:	d105      	bne.n	800297c <serve_interrupt+0x12c>
 8002970:	9b01      	ldr	r3, [sp, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <serve_interrupt+0x12c>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <serve_interrupt+0x12e>
 800297c:	2300      	movs	r3, #0
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <serve_interrupt+0x150>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8002988:	9b01      	ldr	r3, [sp, #4]
 800298a:	3304      	adds	r3, #4
 800298c:	2110      	movs	r1, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fe9e 	bl	80026d0 <osalEventBroadcastFlagsI.lto_priv.14>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 8002994:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8002998:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800299c:	9b06      	ldr	r3, [sp, #24]
 800299e:	60da      	str	r2, [r3, #12]
    }
    osalSysUnlockFromISR();
 80029a0:	f7ff fe8e 	bl	80026c0 <osalSysUnlockFromISR.lto_priv.20>
  }
}
 80029a4:	b009      	add	sp, #36	; 0x24
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80029aa:	bf00      	nop
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <notify2>:
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
}
#endif

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {
 80029b0:	b082      	sub	sp, #8
 80029b2:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <notify2+0x14>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4a02      	ldr	r2, [pc, #8]	; (80029c4 <notify2+0x14>)
 80029ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	b002      	add	sp, #8
 80029c2:	4770      	bx	lr
 80029c4:	40004400 	.word	0x40004400
	...

080029d0 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80029d0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);
 80029d2:	4803      	ldr	r0, [pc, #12]	; (80029e0 <VectorD8+0x10>)
 80029d4:	f7ff ff3c 	bl	8002850 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 80029d8:	f001 fb42 	bl	8004060 <_port_irq_epilogue>
}
 80029dc:	bd08      	pop	{r3, pc}
 80029de:	bf00      	nop
 80029e0:	20000954 	.word	0x20000954
	...

080029f0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 80029f0:	b508      	push	{r3, lr}
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <sd_lld_init+0x14>)
 80029f4:	2100      	movs	r1, #0
 80029f6:	4804      	ldr	r0, [pc, #16]	; (8002a08 <sd_lld_init+0x18>)
 80029f8:	f7fe fa9a 	bl	8000f30 <sdObjectInit>
  SD2.usart = USART2;
 80029fc:	4b02      	ldr	r3, [pc, #8]	; (8002a08 <sd_lld_init+0x18>)
 80029fe:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <sd_lld_init+0x1c>)
 8002a00:	675a      	str	r2, [r3, #116]	; 0x74

#if STM32_SERIAL_USE_UART8
  sdObjectInit(&SD8, NULL, notify8);
  SD8.usart = UART8;
#endif
}
 8002a02:	bd08      	pop	{r3, pc}
 8002a04:	080029b1 	.word	0x080029b1
 8002a08:	20000954 	.word	0x20000954
 8002a0c:	40004400 	.word	0x40004400

08002a10 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 8002a10:	b500      	push	{lr}
 8002a12:	b083      	sub	sp, #12
 8002a14:	9001      	str	r0, [sp, #4]
 8002a16:	9100      	str	r1, [sp, #0]

  if (config == NULL)
 8002a18:	9b00      	ldr	r3, [sp, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <sd_lld_start+0x12>
    config = &default_config;
 8002a1e:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <sd_lld_start+0x54>)
 8002a20:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
 8002a22:	9b01      	ldr	r3, [sp, #4]
 8002a24:	7a1b      	ldrb	r3, [r3, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d115      	bne.n	8002a56 <sd_lld_start+0x46>
      rccEnableUSART1(true);
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <sd_lld_start+0x58>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d111      	bne.n	8002a56 <sd_lld_start+0x46>
      rccEnableUSART2(true);
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <sd_lld_start+0x5c>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <sd_lld_start+0x5c>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <sd_lld_start+0x5c>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <sd_lld_start+0x5c>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6613      	str	r3, [r2, #96]	; 0x60
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <sd_lld_start+0x5c>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8002a4e:	210c      	movs	r1, #12
 8002a50:	2026      	movs	r0, #38	; 0x26
 8002a52:	f7fe fbd5 	bl	8001200 <nvicEnableVector>
      rccEnableUART8(true);
      nvicEnableVector(STM32_UART8_NUMBER, STM32_SERIAL_UART8_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
 8002a56:	9900      	ldr	r1, [sp, #0]
 8002a58:	9801      	ldr	r0, [sp, #4]
 8002a5a:	f7ff fe49 	bl	80026f0 <usart_init>
}
 8002a5e:	b003      	add	sp, #12
 8002a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a64:	08004d44 	.word	0x08004d44
 8002a68:	20000954 	.word	0x20000954
 8002a6c:	40023800 	.word	0x40023800

08002a70 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
 8002a70:	b082      	sub	sp, #8
 8002a72:	9001      	str	r0, [sp, #4]
 8002a74:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
 8002a76:	9b00      	ldr	r3, [sp, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	9b01      	ldr	r3, [sp, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002a7e:	9b00      	ldr	r3, [sp, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	9b01      	ldr	r3, [sp, #4]
 8002a84:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8002a86:	9b00      	ldr	r3, [sp, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	9b01      	ldr	r3, [sp, #4]
 8002a8c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 8002a8e:	9b00      	ldr	r3, [sp, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	9b01      	ldr	r3, [sp, #4]
 8002a94:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8002a96:	9b00      	ldr	r3, [sp, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	9b01      	ldr	r3, [sp, #4]
 8002a9c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8002a9e:	9b00      	ldr	r3, [sp, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	9b01      	ldr	r3, [sp, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002aa6:	9b00      	ldr	r3, [sp, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	9b01      	ldr	r3, [sp, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	b002      	add	sp, #8
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
	...

08002ac0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
 8002ac0:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ac8:	f043 031f 	orr.w	r3, r3, #31
 8002acc:	6113      	str	r3, [r2, #16]
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ad4:	f023 031f 	bic.w	r3, r3, #31
 8002ad8:	6113      	str	r3, [r2, #16]
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002adc:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002ae4:	f043 031f 	orr.w	r3, r3, #31
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002af0:	f043 031f 	orr.w	r3, r3, #31
 8002af4:	6513      	str	r3, [r2, #80]	; 0x50
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <stm32_gpio_init+0x6c>)
 8002af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
 8002afa:	490d      	ldr	r1, [pc, #52]	; (8002b30 <stm32_gpio_init+0x70>)
 8002afc:	480d      	ldr	r0, [pc, #52]	; (8002b34 <stm32_gpio_init+0x74>)
 8002afe:	f7ff ffb7 	bl	8002a70 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
 8002b02:	490d      	ldr	r1, [pc, #52]	; (8002b38 <stm32_gpio_init+0x78>)
 8002b04:	480d      	ldr	r0, [pc, #52]	; (8002b3c <stm32_gpio_init+0x7c>)
 8002b06:	f7ff ffb3 	bl	8002a70 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
 8002b0a:	490d      	ldr	r1, [pc, #52]	; (8002b40 <stm32_gpio_init+0x80>)
 8002b0c:	480d      	ldr	r0, [pc, #52]	; (8002b44 <stm32_gpio_init+0x84>)
 8002b0e:	f7ff ffaf 	bl	8002a70 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
 8002b12:	490d      	ldr	r1, [pc, #52]	; (8002b48 <stm32_gpio_init+0x88>)
 8002b14:	480d      	ldr	r0, [pc, #52]	; (8002b4c <stm32_gpio_init+0x8c>)
 8002b16:	f7ff ffab 	bl	8002a70 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <stm32_gpio_init+0x90>)
 8002b1c:	480d      	ldr	r0, [pc, #52]	; (8002b54 <stm32_gpio_init+0x94>)
 8002b1e:	f7ff ffa7 	bl	8002a70 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
 8002b22:	490d      	ldr	r1, [pc, #52]	; (8002b58 <stm32_gpio_init+0x98>)
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <stm32_gpio_init+0x9c>)
 8002b26:	f7ff ffa3 	bl	8002a70 <gpio_init>
  gpio_init(GPIOJ, &gpio_default_config.PJData);
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
#endif
}
 8002b2a:	bd08      	pop	{r3, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08004d50 	.word	0x08004d50
 8002b34:	40020000 	.word	0x40020000
 8002b38:	08004d6c 	.word	0x08004d6c
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	08004d88 	.word	0x08004d88
 8002b44:	40020800 	.word	0x40020800
 8002b48:	08004da4 	.word	0x08004da4
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	08004dc0 	.word	0x08004dc0
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08004ddc 	.word	0x08004ddc
 8002b5c:	40021c00 	.word	0x40021c00

08002b60 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002b60:	b508      	push	{r3, lr}

  stm32_gpio_init();
 8002b62:	f7ff ffad 	bl	8002ac0 <stm32_gpio_init>
  stm32_clock_init();
 8002b66:	f7fe fdb3 	bl	80016d0 <stm32_clock_init>
}
 8002b6a:	bd08      	pop	{r3, pc}
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <boardInit>:
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {

}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
	...

08002b80 <chTimeAddX.lto_priv.201>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
 8002b80:	b082      	sub	sp, #8
 8002b82:	9001      	str	r0, [sp, #4]
 8002b84:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8002b86:	9a01      	ldr	r2, [sp, #4]
 8002b88:	9b00      	ldr	r3, [sp, #0]
 8002b8a:	4413      	add	r3, r2
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	b002      	add	sp, #8
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
	...

08002ba0 <chTimeDiffX.lto_priv.194>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	9001      	str	r0, [sp, #4]
 8002ba4:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8002ba6:	9a00      	ldr	r2, [sp, #0]
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	b002      	add	sp, #8
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
	...

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	9b01      	ldr	r3, [sp, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0a      	ldr	r3, [pc, #40]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x38>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	9a02      	ldr	r2, [sp, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	9b02      	ldr	r3, [sp, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a02      	ldr	r2, [pc, #8]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x38>)
 8002bf0:	9b02      	ldr	r3, [sp, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	b004      	add	sp, #16
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00
 8002bfc:	00000000 	.word	0x00000000

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b082      	sub	sp, #8
 8002c02:	4603      	mov	r3, r0
 8002c04:	9100      	str	r1, [sp, #0]
 8002c06:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0a      	blt.n	8002c28 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c12:	9b00      	ldr	r3, [sp, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	490b      	ldr	r1, [pc, #44]	; (8002c44 <__NVIC_SetPriority+0x44>)
 8002c18:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002c26:	e00b      	b.n	8002c40 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	9b00      	ldr	r3, [sp, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <__NVIC_SetPriority+0x48>)
 8002c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
  }
}
 8002c40:	b002      	add	sp, #8
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00
 8002c4c:	00000000 	.word	0x00000000

08002c50 <port_init>:
static inline void port_init(void) {
 8002c50:	b508      	push	{r3, lr}
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
 8002c52:	2003      	movs	r0, #3
 8002c54:	f7ff ffb4 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <port_init+0x38>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <port_init+0x38>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <port_init+0x3c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <port_init+0x3c>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
 8002c70:	2101      	movs	r1, #1
 8002c72:	f06f 0004 	mvn.w	r0, #4
 8002c76:	f7ff ffc3 	bl	8002c00 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	f06f 0001 	mvn.w	r0, #1
 8002c80:	f7ff ffbe 	bl	8002c00 <__NVIC_SetPriority>
}
 8002c84:	bd08      	pop	{r3, pc}
 8002c86:	bf00      	nop
 8002c88:	e000edf0 	.word	0xe000edf0
 8002c8c:	e0001000 	.word	0xe0001000

08002c90 <port_lock.lto_priv.136>:
static inline void port_lock(void) {
 8002c90:	b082      	sub	sp, #8
 8002c92:	2320      	movs	r3, #32
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	9b01      	ldr	r3, [sp, #4]
 8002c98:	f383 8811 	msr	BASEPRI, r3
}
 8002c9c:	b002      	add	sp, #8
 8002c9e:	4770      	bx	lr

08002ca0 <port_unlock.lto_priv.112>:
static inline void port_unlock(void) {
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	9b01      	ldr	r3, [sp, #4]
 8002ca8:	f383 8811 	msr	BASEPRI, r3
}
 8002cac:	b002      	add	sp, #8
 8002cae:	4770      	bx	lr

08002cb0 <port_lock_from_isr.lto_priv.100>:
static inline void port_lock_from_isr(void) {
 8002cb0:	b508      	push	{r3, lr}
  port_lock();
 8002cb2:	f7ff ffed 	bl	8002c90 <port_lock.lto_priv.136>
}
 8002cb6:	bd08      	pop	{r3, pc}
	...

08002cc0 <port_unlock_from_isr.lto_priv.93>:
static inline void port_unlock_from_isr(void) {
 8002cc0:	b508      	push	{r3, lr}
  port_unlock();
 8002cc2:	f7ff ffed 	bl	8002ca0 <port_unlock.lto_priv.112>
}
 8002cc6:	bd08      	pop	{r3, pc}
	...

08002cd0 <port_disable>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002cd0:	b672      	cpsid	i
 *          the priority mask to level 0.
 */
static inline void port_disable(void) {

  __disable_irq();
}
 8002cd2:	4770      	bx	lr
	...

08002ce0 <port_enable>:

/**
 * @brief   Enables all the interrupt sources.
 * @note    In this port it lowers the base priority to user level.
 */
static inline void port_enable(void) {
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002ce6:	9b01      	ldr	r3, [sp, #4]
 8002ce8:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8002cec:	b662      	cpsie	i

#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#endif
  __enable_irq();
}
 8002cee:	b002      	add	sp, #8
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
	...

08002d00 <port_wait_for_interrupt>:
static inline void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
	...

08002d10 <st_lld_get_counter.lto_priv.191>:
  return (systime_t)STM32_ST_TIM->CNT;
 8002d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	0000      	movs	r0, r0
	...

08002d20 <port_timer_stop_alarm.lto_priv.199>:
/**
 * @brief   Stops the alarm interrupt.
 *
 * @notapi
 */
static inline void port_timer_stop_alarm(void) {
 8002d20:	b508      	push	{r3, lr}

  stStopAlarm();
 8002d22:	f7fd fc9d 	bl	8000660 <stStopAlarm>
}
 8002d26:	bd08      	pop	{r3, pc}
	...

08002d30 <port_timer_set_alarm.lto_priv.197>:
 *
 * @param[in] time      the time to be set for the next alarm
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {
 8002d30:	b500      	push	{lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	9001      	str	r0, [sp, #4]

  stSetAlarm(time);
 8002d36:	9801      	ldr	r0, [sp, #4]
 8002d38:	f7fd fc9a 	bl	8000670 <stSetAlarm>
}
 8002d3c:	b003      	add	sp, #12
 8002d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d42:	bf00      	nop
	...

08002d50 <port_timer_get_time.lto_priv.188>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
 8002d50:	b508      	push	{r3, lr}

  return stGetCounter();
 8002d52:	f7ff ffdd 	bl	8002d10 <st_lld_get_counter.lto_priv.191>
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd08      	pop	{r3, pc}
 8002d5c:	0000      	movs	r0, r0
	...

08002d60 <chSysEnable>:
static inline void chSysEnable(void) {
 8002d60:	b508      	push	{r3, lr}
  port_enable();
 8002d62:	f7ff ffbd 	bl	8002ce0 <port_enable>
}
 8002d66:	bd08      	pop	{r3, pc}
	...

08002d70 <chSysLockFromISR.lto_priv.49>:
static inline void chSysLockFromISR(void) {
 8002d70:	b508      	push	{r3, lr}
  port_lock_from_isr();
 8002d72:	f7ff ff9d 	bl	8002cb0 <port_lock_from_isr.lto_priv.100>
}
 8002d76:	bd08      	pop	{r3, pc}
	...

08002d80 <chSysUnlockFromISR.lto_priv.43>:
static inline void chSysUnlockFromISR(void) {
 8002d80:	b508      	push	{r3, lr}
  port_unlock_from_isr();
 8002d82:	f7ff ff9d 	bl	8002cc0 <port_unlock_from_isr.lto_priv.93>
}
 8002d86:	bd08      	pop	{r3, pc}
	...

08002d90 <chVTGetSystemTimeX.lto_priv.185>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
 8002d90:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
 8002d92:	f7ff ffdd 	bl	8002d50 <port_timer_get_time.lto_priv.188>
 8002d96:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd08      	pop	{r3, pc}
 8002d9c:	0000      	movs	r0, r0
	...

08002da0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {
 8002da0:	b500      	push	{lr}
 8002da2:	b087      	sub	sp, #28
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <chVTDoTickI+0xf0>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	9305      	str	r3, [sp, #20]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
 8002daa:	f7ff fff1 	bl	8002d90 <chVTGetSystemTimeX.lto_priv.185>
 8002dae:	9002      	str	r0, [sp, #8]
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8002db0:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <chVTDoTickI+0xf0>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	9902      	ldr	r1, [sp, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fef2 	bl	8002ba0 <chTimeDiffX.lto_priv.194>
 8002dbc:	9003      	str	r0, [sp, #12]

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8002dbe:	9b05      	ldr	r3, [sp, #20]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	9a03      	ldr	r2, [sp, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d332      	bcc.n	8002e2e <chVTDoTickI+0x8e>
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <chVTDoTickI+0xf0>)
 8002dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dcc:	9b05      	ldr	r3, [sp, #20]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	4a2f      	ldr	r2, [pc, #188]	; (8002e90 <chVTDoTickI+0xf0>)
 8002dd4:	6293      	str	r3, [r2, #40]	; 0x28
      nowdelta -= vtp->delta;
 8002dd6:	9b05      	ldr	r3, [sp, #20]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	9a03      	ldr	r2, [sp, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	9303      	str	r3, [sp, #12]

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8002de0:	9b05      	ldr	r3, [sp, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <chVTDoTickI+0xf4>)
 8002de6:	605a      	str	r2, [r3, #4]
      ch.vtlist.next = vtp->next;
 8002de8:	9b05      	ldr	r3, [sp, #20]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <chVTDoTickI+0xf0>)
 8002dee:	61d3      	str	r3, [r2, #28]
      fn = vtp->func;
 8002df0:	9b05      	ldr	r3, [sp, #20]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	9301      	str	r3, [sp, #4]
      vtp->func = NULL;
 8002df6:	9b05      	ldr	r3, [sp, #20]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <chVTDoTickI+0xf0>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <chVTDoTickI+0xf4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <chVTDoTickI+0x6a>
        port_timer_stop_alarm();
 8002e06:	f7ff ff8b 	bl	8002d20 <port_timer_stop_alarm.lto_priv.199>
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
 8002e0a:	f7ff ffb9 	bl	8002d80 <chSysUnlockFromISR.lto_priv.43>
      fn(vtp->par);
 8002e0e:	9b05      	ldr	r3, [sp, #20]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	9b01      	ldr	r3, [sp, #4]
 8002e14:	4610      	mov	r0, r2
 8002e16:	4798      	blx	r3
      chSysLockFromISR();
 8002e18:	f7ff ffaa 	bl	8002d70 <chSysLockFromISR.lto_priv.49>

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	9305      	str	r3, [sp, #20]
    }
    while (vtp->delta <= nowdelta);
 8002e22:	9b05      	ldr	r3, [sp, #20]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	9a03      	ldr	r2, [sp, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d2cd      	bcs.n	8002dc8 <chVTDoTickI+0x28>
 8002e2c:	e7bd      	b.n	8002daa <chVTDoTickI+0xa>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <chVTDoTickI+0xf4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d028      	beq.n	8002e8a <chVTDoTickI+0xea>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e42:	6293      	str	r3, [r2, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	9a03      	ldr	r2, [sp, #12]
 8002e50:	1a8a      	subs	r2, r1, r2
 8002e52:	609a      	str	r2, [r3, #8]

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <chVTDoTickI+0xf0>)
 8002e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e58:	9b05      	ldr	r3, [sp, #20]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f7ff fe8e 	bl	8002b80 <chTimeAddX.lto_priv.201>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4619      	mov	r1, r3
 8002e68:	9802      	ldr	r0, [sp, #8]
 8002e6a:	f7ff fe99 	bl	8002ba0 <chTimeDiffX.lto_priv.194>
 8002e6e:	9004      	str	r0, [sp, #16]
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8002e70:	9b04      	ldr	r3, [sp, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d801      	bhi.n	8002e7a <chVTDoTickI+0xda>
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002e76:	2302      	movs	r3, #2
 8002e78:	9304      	str	r3, [sp, #16]
  /* The delta could be too large for the physical timer to handle.*/
  else if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));
 8002e7a:	9904      	ldr	r1, [sp, #16]
 8002e7c:	9802      	ldr	r0, [sp, #8]
 8002e7e:	f7ff fe7f 	bl	8002b80 <chTimeAddX.lto_priv.201>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff53 	bl	8002d30 <port_timer_set_alarm.lto_priv.197>

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
              chTimeDiffX(ch.vtlist.lasttime, chTimeAddX(now, delta)),
              "exceeding delta");
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8002e8a:	b007      	add	sp, #28
 8002e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e90:	20000aa8 	.word	0x20000aa8
 8002e94:	20000ac4 	.word	0x20000ac4
	...

08002ea0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002ea0:	b500      	push	{lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	9001      	str	r0, [sp, #4]
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
 8002ea6:	f7ff ff2b 	bl	8002d00 <port_wait_for_interrupt>
 8002eaa:	e7fc      	b.n	8002ea6 <_idle_thread+0x6>
 8002eac:	0000      	movs	r0, r0
	...

08002eb0 <chSysInit>:
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8002eb0:	b508      	push	{r3, lr}

  _scheduler_init();
 8002eb2:	f000 fa55 	bl	8003360 <_scheduler_init>
  _vt_init();
 8002eb6:	f000 f8a3 	bl	8003000 <_vt_init>
#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
  ch.dbg.lock_cnt = (cnt_t)0;
#endif
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8002eba:	f000 fe19 	bl	8003af0 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8002ebe:	f000 ffa7 	bl	8003e10 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8002ec2:	f001 f805 	bl	8003ed0 <_heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  _factory_init();
 8002ec6:	f001 f85b 	bl	8003f80 <_factory_init>
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	490b      	ldr	r1, [pc, #44]	; (8002efc <chSysInit+0x4c>)
 8002ece:	480c      	ldr	r0, [pc, #48]	; (8002f00 <chSysInit+0x50>)
 8002ed0:	f000 fc6e 	bl	80037b0 <_thread_init>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <chSysInit+0x54>)
 8002ed8:	619a      	str	r2, [r3, #24]
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <chSysInit+0x54>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <chSysInit+0x54>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Port layer initialization last because it depend on some of the
     initializations performed before.*/
  port_init();
 8002eec:	f7ff feb0 	bl	8002c50 <port_init>

  /* Initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* It is alive now.*/
  chSysEnable();
 8002ef0:	f7ff ff36 	bl	8002d60 <chSysEnable>
    };

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreate(&idle_descriptor);
 8002ef4:	4804      	ldr	r0, [pc, #16]	; (8002f08 <chSysInit+0x58>)
 8002ef6:	f000 fccb 	bl	8003890 <chThdCreate>
  }
#endif
}
 8002efa:	bd08      	pop	{r3, pc}
 8002efc:	08004e18 	.word	0x08004e18
 8002f00:	20000ad8 	.word	0x20000ad8
 8002f04:	20000aa8 	.word	0x20000aa8
 8002f08:	08004e00 	.word	0x08004e00
 8002f0c:	00000000 	.word	0x00000000

08002f10 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8002f10:	b500      	push	{lr}
 8002f12:	b083      	sub	sp, #12
 8002f14:	9001      	str	r0, [sp, #4]

  port_disable();
 8002f16:	f7ff fedb 	bl	8002cd0 <port_disable>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8002f1a:	4a02      	ldr	r2, [pc, #8]	; (8002f24 <chSysHalt+0x14>)
 8002f1c:	9b01      	ldr	r3, [sp, #4]
 8002f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f20:	e7fe      	b.n	8002f20 <chSysHalt+0x10>
 8002f22:	bf00      	nop
 8002f24:	20000aa8 	.word	0x20000aa8
	...

08002f30 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8002f30:	b508      	push	{r3, lr}
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->time++;
#endif
  chVTDoTickI();
 8002f32:	f7ff ff35 	bl	8002da0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
 8002f36:	bd08      	pop	{r3, pc}
	...

08002f40 <chTimeAddX.lto_priv.202>:
                                   sysinterval_t interval) {
 8002f40:	b082      	sub	sp, #8
 8002f42:	9001      	str	r0, [sp, #4]
 8002f44:	9100      	str	r1, [sp, #0]
  return systime + (systime_t)interval;
 8002f46:	9a01      	ldr	r2, [sp, #4]
 8002f48:	9b00      	ldr	r3, [sp, #0]
 8002f4a:	4413      	add	r3, r2
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	b002      	add	sp, #8
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
	...

08002f60 <chTimeDiffX.lto_priv.195>:
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 8002f60:	b082      	sub	sp, #8
 8002f62:	9001      	str	r0, [sp, #4]
 8002f64:	9100      	str	r1, [sp, #0]
  return (sysinterval_t)((systime_t)(end - start));
 8002f66:	9a00      	ldr	r2, [sp, #0]
 8002f68:	9b01      	ldr	r3, [sp, #4]
 8002f6a:	1ad3      	subs	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	b002      	add	sp, #8
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
	...

08002f80 <st_lld_get_counter.lto_priv.192>:
  return (systime_t)STM32_ST_TIM->CNT;
 8002f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	0000      	movs	r0, r0
	...

08002f90 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
 8002f90:	b500      	push	{lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
 8002f96:	9801      	ldr	r0, [sp, #4]
 8002f98:	f7fd fb52 	bl	8000640 <stStartAlarm>
}
 8002f9c:	b003      	add	sp, #12
 8002f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fa2:	bf00      	nop
	...

08002fb0 <port_timer_stop_alarm.lto_priv.200>:
static inline void port_timer_stop_alarm(void) {
 8002fb0:	b508      	push	{r3, lr}
  stStopAlarm();
 8002fb2:	f7fd fb55 	bl	8000660 <stStopAlarm>
}
 8002fb6:	bd08      	pop	{r3, pc}
	...

08002fc0 <port_timer_set_alarm.lto_priv.198>:
static inline void port_timer_set_alarm(systime_t time) {
 8002fc0:	b500      	push	{lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
 8002fc6:	9801      	ldr	r0, [sp, #4]
 8002fc8:	f7fd fb52 	bl	8000670 <stSetAlarm>
}
 8002fcc:	b003      	add	sp, #12
 8002fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fd2:	bf00      	nop
	...

08002fe0 <port_timer_get_time.lto_priv.189>:
static inline systime_t port_timer_get_time(void) {
 8002fe0:	b508      	push	{r3, lr}
  return stGetCounter();
 8002fe2:	f7ff ffcd 	bl	8002f80 <st_lld_get_counter.lto_priv.192>
 8002fe6:	4603      	mov	r3, r0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd08      	pop	{r3, pc}
 8002fec:	0000      	movs	r0, r0
	...

08002ff0 <chVTGetSystemTimeX.lto_priv.186>:
static inline systime_t chVTGetSystemTimeX(void) {
 8002ff0:	b508      	push	{r3, lr}
  return port_timer_get_time();
 8002ff2:	f7ff fff5 	bl	8002fe0 <port_timer_get_time.lto_priv.189>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd08      	pop	{r3, pc}
 8002ffc:	0000      	movs	r0, r0
	...

08003000 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <_vt_init+0x1c>)
 8003002:	4a07      	ldr	r2, [pc, #28]	; (8003020 <_vt_init+0x20>)
 8003004:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <_vt_init+0x1c>)
 8003008:	4a05      	ldr	r2, [pc, #20]	; (8003020 <_vt_init+0x20>)
 800300a:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <_vt_init+0x1c>)
 800300e:	f04f 32ff 	mov.w	r2, #4294967295
 8003012:	625a      	str	r2, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <_vt_init+0x1c>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800301a:	4770      	bx	lr
 800301c:	20000aa8 	.word	0x20000aa8
 8003020:	20000ac4 	.word	0x20000ac4
	...

08003030 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
 8003030:	b500      	push	{lr}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	9003      	str	r0, [sp, #12]
 8003036:	9102      	str	r1, [sp, #8]
 8003038:	9201      	str	r2, [sp, #4]
 800303a:	9300      	str	r3, [sp, #0]
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 800303c:	9b03      	ldr	r3, [sp, #12]
 800303e:	9a00      	ldr	r2, [sp, #0]
 8003040:	611a      	str	r2, [r3, #16]
  vtp->func = vtfunc;
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	9a01      	ldr	r2, [sp, #4]
 8003046:	60da      	str	r2, [r3, #12]

#if CH_CFG_ST_TIMEDELTA > 0
  {
    systime_t now = chVTGetSystemTimeX();
 8003048:	f7ff ffd2 	bl	8002ff0 <chVTGetSystemTimeX.lto_priv.186>
 800304c:	9005      	str	r0, [sp, #20]

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800304e:	9b02      	ldr	r3, [sp, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d801      	bhi.n	8003058 <chVTDoSetI+0x28>
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003054:	2302      	movs	r3, #2
 8003056:	9302      	str	r3, [sp, #8]
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <chVTDoSetI+0x128>)
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4a3f      	ldr	r2, [pc, #252]	; (800315c <chVTDoSetI+0x12c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d11c      	bne.n	800309c <chVTDoSetI+0x6c>

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 8003062:	4a3d      	ldr	r2, [pc, #244]	; (8003158 <chVTDoSetI+0x128>)
 8003064:	9b05      	ldr	r3, [sp, #20]
 8003066:	6293      	str	r3, [r2, #40]	; 0x28
      ch.vtlist.next = vtp;
 8003068:	4a3b      	ldr	r2, [pc, #236]	; (8003158 <chVTDoSetI+0x128>)
 800306a:	9b03      	ldr	r3, [sp, #12]
 800306c:	61d3      	str	r3, [r2, #28]
      ch.vtlist.prev = vtp;
 800306e:	4a3a      	ldr	r2, [pc, #232]	; (8003158 <chVTDoSetI+0x128>)
 8003070:	9b03      	ldr	r3, [sp, #12]
 8003072:	6213      	str	r3, [r2, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	4a39      	ldr	r2, [pc, #228]	; (800315c <chVTDoSetI+0x12c>)
 8003078:	601a      	str	r2, [r3, #0]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800307a:	9b03      	ldr	r3, [sp, #12]
 800307c:	4a37      	ldr	r2, [pc, #220]	; (800315c <chVTDoSetI+0x12c>)
 800307e:	605a      	str	r2, [r3, #4]
      vtp->delta = delay;
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	9a02      	ldr	r2, [sp, #8]
 8003084:	609a      	str	r2, [r3, #8]
        delay = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(chTimeAddX(ch.vtlist.lasttime, delay));
 8003086:	4b34      	ldr	r3, [pc, #208]	; (8003158 <chVTDoSetI+0x128>)
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	9902      	ldr	r1, [sp, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff57 	bl	8002f40 <chTimeAddX.lto_priv.202>
 8003092:	4603      	mov	r3, r0
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff7b 	bl	8002f90 <port_timer_start_alarm>
 800309a:	e05a      	b.n	8003152 <chVTDoSetI+0x122>

      return;
    }

    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <chVTDoSetI+0x128>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	9307      	str	r3, [sp, #28]

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <chVTDoSetI+0x128>)
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	9905      	ldr	r1, [sp, #20]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff59 	bl	8002f60 <chTimeDiffX.lto_priv.195>
 80030ae:	4602      	mov	r2, r0
 80030b0:	9b02      	ldr	r3, [sp, #8]
 80030b2:	4413      	add	r3, r2
 80030b4:	9306      	str	r3, [sp, #24]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80030b6:	4b28      	ldr	r3, [pc, #160]	; (8003158 <chVTDoSetI+0x128>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	9905      	ldr	r1, [sp, #20]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff4f 	bl	8002f60 <chTimeDiffX.lto_priv.195>
 80030c2:	4602      	mov	r2, r0
 80030c4:	9b06      	ldr	r3, [sp, #24]
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d208      	bcs.n	80030dc <chVTDoSetI+0xac>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80030ca:	9b07      	ldr	r3, [sp, #28]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	9a06      	ldr	r2, [sp, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	9306      	str	r3, [sp, #24]
      p = p->next;
 80030d4:	9b07      	ldr	r3, [sp, #28]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	9307      	str	r3, [sp, #28]
 80030da:	e019      	b.n	8003110 <chVTDoSetI+0xe0>
    }
    else if (delta < p->delta) {
 80030dc:	9b07      	ldr	r3, [sp, #28]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	9a06      	ldr	r2, [sp, #24]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d214      	bcs.n	8003110 <chVTDoSetI+0xe0>
      sysinterval_t deadline_delta;

      /* A small delay that will become the first element in the delta list
         and next deadline.*/
      deadline_delta = delta;
 80030e6:	9b06      	ldr	r3, [sp, #24]
 80030e8:	9304      	str	r3, [sp, #16]
      /* The delta could be too large for the physical timer to handle.*/
      if (deadline_delta > (sysinterval_t)TIME_MAX_SYSTIME) {
        deadline_delta = (sysinterval_t)TIME_MAX_SYSTIME;
      }
#endif
      port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, deadline_delta));
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <chVTDoSetI+0x128>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	9904      	ldr	r1, [sp, #16]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff25 	bl	8002f40 <chTimeAddX.lto_priv.202>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff61 	bl	8002fc0 <port_timer_set_alarm.lto_priv.198>
 80030fe:	e007      	b.n	8003110 <chVTDoSetI+0xe0>
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8003100:	9b07      	ldr	r3, [sp, #28]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	9a06      	ldr	r2, [sp, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	9306      	str	r3, [sp, #24]
    p = p->next;
 800310a:	9b07      	ldr	r3, [sp, #28]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	9307      	str	r3, [sp, #28]
  while (p->delta < delta) {
 8003110:	9b07      	ldr	r3, [sp, #28]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	9a06      	ldr	r2, [sp, #24]
 8003116:	429a      	cmp	r2, r3
 8003118:	d8f2      	bhi.n	8003100 <chVTDoSetI+0xd0>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	9a07      	ldr	r2, [sp, #28]
 800311e:	601a      	str	r2, [r3, #0]
  vtp->prev = vtp->next->prev;
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	9b03      	ldr	r3, [sp, #12]
 8003128:	605a      	str	r2, [r3, #4]
  vtp->prev->next = vtp;
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	9a03      	ldr	r2, [sp, #12]
 8003130:	601a      	str	r2, [r3, #0]
  p->prev = vtp;
 8003132:	9b07      	ldr	r3, [sp, #28]
 8003134:	9a03      	ldr	r2, [sp, #12]
 8003136:	605a      	str	r2, [r3, #4]
  vtp->delta = delta;
 8003138:	9b03      	ldr	r3, [sp, #12]
 800313a:	9a06      	ldr	r2, [sp, #24]
 800313c:	609a      	str	r2, [r3, #8]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800313e:	9b07      	ldr	r3, [sp, #28]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	9b06      	ldr	r3, [sp, #24]
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	9b07      	ldr	r3, [sp, #28]
 8003148:	609a      	str	r2, [r3, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800314a:	4b03      	ldr	r3, [pc, #12]	; (8003158 <chVTDoSetI+0x128>)
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003152:	b009      	add	sp, #36	; 0x24
 8003154:	f85d fb04 	ldr.w	pc, [sp], #4
 8003158:	20000aa8 	.word	0x20000aa8
 800315c:	20000ac4 	.word	0x20000ac4

08003160 <chVTDoResetI>:
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8003160:	b510      	push	{r4, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	9001      	str	r0, [sp, #4]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <chVTDoResetI+0xe0>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	9a01      	ldr	r2, [sp, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d01b      	beq.n	80031a8 <chVTDoResetI+0x48>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003170:	9b01      	ldr	r3, [sp, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	9a01      	ldr	r2, [sp, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 800317a:	9b01      	ldr	r3, [sp, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	9a01      	ldr	r2, [sp, #4]
 8003180:	6852      	ldr	r2, [r2, #4]
 8003182:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8003184:	9b01      	ldr	r3, [sp, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	60da      	str	r2, [r3, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800318a:	9b01      	ldr	r3, [sp, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <chVTDoResetI+0xe4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d051      	beq.n	8003238 <chVTDoResetI+0xd8>
      vtp->next->delta += vtp->delta;
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	9b01      	ldr	r3, [sp, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	440a      	add	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	e048      	b.n	800323a <chVTDoResetI+0xda>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80031a8:	9b01      	ldr	r3, [sp, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a24      	ldr	r2, [pc, #144]	; (8003240 <chVTDoResetI+0xe0>)
 80031ae:	61d3      	str	r3, [r2, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80031b0:	4b23      	ldr	r3, [pc, #140]	; (8003240 <chVTDoResetI+0xe0>)
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	4a23      	ldr	r2, [pc, #140]	; (8003244 <chVTDoResetI+0xe4>)
 80031b6:	605a      	str	r2, [r3, #4]
  vtp->func = NULL;
 80031b8:	9b01      	ldr	r3, [sp, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	60da      	str	r2, [r3, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <chVTDoResetI+0xe0>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a20      	ldr	r2, [pc, #128]	; (8003244 <chVTDoResetI+0xe4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d102      	bne.n	80031ce <chVTDoResetI+0x6e>
    port_timer_stop_alarm();
 80031c8:	f7ff fef2 	bl	8002fb0 <port_timer_stop_alarm.lto_priv.200>
 80031cc:	e035      	b.n	800323a <chVTDoResetI+0xda>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80031ce:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <chVTDoResetI+0xe0>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	6899      	ldr	r1, [r3, #8]
 80031d4:	9b01      	ldr	r3, [sp, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <chVTDoResetI+0xe0>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	440a      	add	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80031e0:	4b17      	ldr	r3, [pc, #92]	; (8003240 <chVTDoResetI+0xe0>)
 80031e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80031e4:	f7ff ff04 	bl	8002ff0 <chVTGetSystemTimeX.lto_priv.186>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7ff feb7 	bl	8002f60 <chTimeDiffX.lto_priv.195>
 80031f2:	9002      	str	r0, [sp, #8]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <chVTDoResetI+0xe0>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	9a02      	ldr	r2, [sp, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d21c      	bcs.n	800323a <chVTDoResetI+0xda>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <chVTDoResetI+0xe0>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	9303      	str	r3, [sp, #12]

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800320c:	9b03      	ldr	r3, [sp, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d803      	bhi.n	800321a <chVTDoResetI+0xba>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8003212:	9b02      	ldr	r3, [sp, #8]
 8003214:	3302      	adds	r3, #2
 8003216:	9303      	str	r3, [sp, #12]
 8003218:	e003      	b.n	8003222 <chVTDoResetI+0xc2>
  }
  else {
    delta = nowdelta + delta;
 800321a:	9a03      	ldr	r2, [sp, #12]
 800321c:	9b02      	ldr	r3, [sp, #8]
 800321e:	4413      	add	r3, r2
 8003220:	9303      	str	r3, [sp, #12]
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
      delta = (sysinterval_t)TIME_MAX_SYSTIME;
    }
#endif
  }
  port_timer_set_alarm(chTimeAddX(ch.vtlist.lasttime, delta));
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <chVTDoResetI+0xe0>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	9903      	ldr	r1, [sp, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fe89 	bl	8002f40 <chTimeAddX.lto_priv.202>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fec5 	bl	8002fc0 <port_timer_set_alarm.lto_priv.198>
 8003236:	e000      	b.n	800323a <chVTDoResetI+0xda>
      vtp->next->delta += vtp->delta;
 8003238:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800323a:	b004      	add	sp, #16
 800323c:	bd10      	pop	{r4, pc}
 800323e:	bf00      	nop
 8003240:	20000aa8 	.word	0x20000aa8
 8003244:	20000ac4 	.word	0x20000ac4
	...

08003250 <port_lock.lto_priv.137>:
static inline void port_lock(void) {
 8003250:	b082      	sub	sp, #8
 8003252:	2320      	movs	r3, #32
 8003254:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003256:	9b01      	ldr	r3, [sp, #4]
 8003258:	f383 8811 	msr	BASEPRI, r3
}
 800325c:	b002      	add	sp, #8
 800325e:	4770      	bx	lr

08003260 <port_unlock.lto_priv.113>:
static inline void port_unlock(void) {
 8003260:	b082      	sub	sp, #8
 8003262:	2300      	movs	r3, #0
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	f383 8811 	msr	BASEPRI, r3
}
 800326c:	b002      	add	sp, #8
 800326e:	4770      	bx	lr

08003270 <port_lock_from_isr.lto_priv.101>:
static inline void port_lock_from_isr(void) {
 8003270:	b508      	push	{r3, lr}
  port_lock();
 8003272:	f7ff ffed 	bl	8003250 <port_lock.lto_priv.137>
}
 8003276:	bd08      	pop	{r3, pc}
	...

08003280 <port_unlock_from_isr.lto_priv.94>:
static inline void port_unlock_from_isr(void) {
 8003280:	b508      	push	{r3, lr}
  port_unlock();
 8003282:	f7ff ffed 	bl	8003260 <port_unlock.lto_priv.113>
}
 8003286:	bd08      	pop	{r3, pc}
	...

08003290 <queue_init.lto_priv.157>:
static inline void queue_init(threads_queue_t *tqp) {
 8003290:	b082      	sub	sp, #8
 8003292:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8003294:	9b01      	ldr	r3, [sp, #4]
 8003296:	9a01      	ldr	r2, [sp, #4]
 8003298:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800329a:	9b01      	ldr	r3, [sp, #4]
 800329c:	9a01      	ldr	r2, [sp, #4]
 800329e:	605a      	str	r2, [r3, #4]
}
 80032a0:	b002      	add	sp, #8
 80032a2:	4770      	bx	lr
	...

080032b0 <queue_fifo_remove.lto_priv.163>:
  tp->queue.prev             = tqp->prev;
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 80032b0:	b084      	sub	sp, #16
 80032b2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 80032b4:	9b01      	ldr	r3, [sp, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9303      	str	r3, [sp, #12]

  tqp->next             = tp->queue.next;
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	9b01      	ldr	r3, [sp, #4]
 80032c0:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80032c2:	9b01      	ldr	r3, [sp, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	9a01      	ldr	r2, [sp, #4]
 80032c8:	605a      	str	r2, [r3, #4]

  return tp;
 80032ca:	9b03      	ldr	r3, [sp, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	b004      	add	sp, #16
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
	...

080032e0 <queue_dequeue.lto_priv.179>:
  tqp->prev->queue.next = (thread_t *)tqp;

  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {
 80032e0:	b082      	sub	sp, #8
 80032e2:	9001      	str	r0, [sp, #4]

  tp->queue.prev->queue.next = tp->queue.next;
 80032e4:	9b01      	ldr	r3, [sp, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	9a01      	ldr	r2, [sp, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80032ee:	9b01      	ldr	r3, [sp, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	9a01      	ldr	r2, [sp, #4]
 80032f4:	6852      	ldr	r2, [r2, #4]
 80032f6:	605a      	str	r2, [r3, #4]

  return tp;
 80032f8:	9b01      	ldr	r3, [sp, #4]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	b002      	add	sp, #8
 80032fe:	4770      	bx	lr

08003300 <chSysLockFromISR.lto_priv.50>:
static inline void chSysLockFromISR(void) {
 8003300:	b508      	push	{r3, lr}
  port_lock_from_isr();
 8003302:	f7ff ffb5 	bl	8003270 <port_lock_from_isr.lto_priv.101>
}
 8003306:	bd08      	pop	{r3, pc}
	...

08003310 <chSysUnlockFromISR.lto_priv.44>:
static inline void chSysUnlockFromISR(void) {
 8003310:	b508      	push	{r3, lr}
  port_unlock_from_isr();
 8003312:	f7ff ffb5 	bl	8003280 <port_unlock_from_isr.lto_priv.94>
}
 8003316:	bd08      	pop	{r3, pc}
	...

08003320 <chVTIsArmedI>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
 8003320:	b082      	sub	sp, #8
 8003322:	9001      	str	r0, [sp, #4]
  return (bool)(vtp->func != NULL);
 8003324:	9b01      	ldr	r3, [sp, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
}
 8003332:	4618      	mov	r0, r3
 8003334:	b002      	add	sp, #8
 8003336:	4770      	bx	lr
	...

08003340 <chSemFastSignalI>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
 8003340:	b082      	sub	sp, #8
 8003342:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();

  sp->cnt++;
 8003344:	9b01      	ldr	r3, [sp, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	609a      	str	r2, [r3, #8]
}
 800334e:	b002      	add	sp, #8
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
	...

08003360 <_scheduler_init>:
/**
 * @brief   Scheduler initialization.
 *
 * @notapi
 */
void _scheduler_init(void) {
 8003360:	b508      	push	{r3, lr}

  queue_init(&ch.rlist.queue);
 8003362:	4806      	ldr	r0, [pc, #24]	; (800337c <_scheduler_init+0x1c>)
 8003364:	f7ff ff94 	bl	8003290 <queue_init.lto_priv.157>
  ch.rlist.prio = NOPRIO;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <_scheduler_init+0x1c>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800336e:	4b03      	ldr	r3, [pc, #12]	; (800337c <_scheduler_init+0x1c>)
 8003370:	4a02      	ldr	r2, [pc, #8]	; (800337c <_scheduler_init+0x1c>)
 8003372:	611a      	str	r2, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003374:	4b01      	ldr	r3, [pc, #4]	; (800337c <_scheduler_init+0x1c>)
 8003376:	4a01      	ldr	r2, [pc, #4]	; (800337c <_scheduler_init+0x1c>)
 8003378:	615a      	str	r2, [r3, #20]
#endif
}
 800337a:	bd08      	pop	{r3, pc}
 800337c:	20000aa8 	.word	0x20000aa8

08003380 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003380:	b084      	sub	sp, #16
 8003382:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003384:	9b01      	ldr	r3, [sp, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <chSchReadyI+0x48>)
 800338e:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 8003390:	9b03      	ldr	r3, [sp, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	9303      	str	r3, [sp, #12]
  } while (cp->prio >= tp->prio);
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d2f6      	bcs.n	8003390 <chSchReadyI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80033a2:	9b01      	ldr	r3, [sp, #4]
 80033a4:	9a03      	ldr	r2, [sp, #12]
 80033a6:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80033a8:	9b03      	ldr	r3, [sp, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	9b01      	ldr	r3, [sp, #4]
 80033ae:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	9a01      	ldr	r2, [sp, #4]
 80033b6:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 80033b8:	9b03      	ldr	r3, [sp, #12]
 80033ba:	9a01      	ldr	r2, [sp, #4]
 80033bc:	605a      	str	r2, [r3, #4]

  return tp;
 80033be:	9b01      	ldr	r3, [sp, #4]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	b004      	add	sp, #16
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000aa8 	.word	0x20000aa8
 80033cc:	00000000 	.word	0x00000000

080033d0 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 80033d0:	b084      	sub	sp, #16
 80033d2:	9001      	str	r0, [sp, #4]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80033d4:	9b01      	ldr	r3, [sp, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2020 	strb.w	r2, [r3, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <chSchReadyAheadI+0x48>)
 80033de:	9303      	str	r3, [sp, #12]
  do {
    cp = cp->queue.next;
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	9303      	str	r3, [sp, #12]
  } while (cp->prio > tp->prio);
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	9b01      	ldr	r3, [sp, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d8f6      	bhi.n	80033e0 <chSchReadyAheadI+0x10>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80033f2:	9b01      	ldr	r3, [sp, #4]
 80033f4:	9a03      	ldr	r2, [sp, #12]
 80033f6:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = cp->queue.prev;
 80033f8:	9b03      	ldr	r3, [sp, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	9a01      	ldr	r2, [sp, #4]
 8003406:	601a      	str	r2, [r3, #0]
  cp->queue.prev             = tp;
 8003408:	9b03      	ldr	r3, [sp, #12]
 800340a:	9a01      	ldr	r2, [sp, #4]
 800340c:	605a      	str	r2, [r3, #4]

  return tp;
 800340e:	9b01      	ldr	r3, [sp, #4]
}
 8003410:	4618      	mov	r0, r3
 8003412:	b004      	add	sp, #16
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000aa8 	.word	0x20000aa8
 800341c:	00000000 	.word	0x00000000

08003420 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003420:	b500      	push	{lr}
 8003422:	b085      	sub	sp, #20
 8003424:	4603      	mov	r3, r0
 8003426:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *otp = currp;
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <chSchGoSleepS+0x44>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	9303      	str	r3, [sp, #12]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003436:	f883 2020 	strb.w	r2, [r3, #32]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800343a:	480a      	ldr	r0, [pc, #40]	; (8003464 <chSchGoSleepS+0x44>)
 800343c:	f7ff ff38 	bl	80032b0 <queue_fifo_remove.lto_priv.163>
 8003440:	4602      	mov	r2, r0
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <chSchGoSleepS+0x44>)
 8003444:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <chSchGoSleepS+0x44>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2020 	strb.w	r2, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <chSchGoSleepS+0x44>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	9903      	ldr	r1, [sp, #12]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fc ff42 	bl	80002e0 <_port_switch>
}
 800345c:	b005      	add	sp, #20
 800345e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003462:	bf00      	nop
 8003464:	20000aa8 	.word	0x20000aa8
	...

08003470 <wakeup>:

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8003470:	b500      	push	{lr}
 8003472:	b085      	sub	sp, #20
 8003474:	9001      	str	r0, [sp, #4]
  thread_t *tp = (thread_t *)p;
 8003476:	9b01      	ldr	r3, [sp, #4]
 8003478:	9303      	str	r3, [sp, #12]

  chSysLockFromISR();
 800347a:	f7ff ff41 	bl	8003300 <chSysLockFromISR.lto_priv.50>
  switch (tp->state) {
 800347e:	9b03      	ldr	r3, [sp, #12]
 8003480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003484:	2b07      	cmp	r3, #7
 8003486:	d823      	bhi.n	80034d0 <wakeup+0x60>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <wakeup+0x20>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034b1 	.word	0x080034b1
 8003494:	080034d1 	.word	0x080034d1
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034b7 	.word	0x080034b7
 80034a0:	080034cb 	.word	0x080034cb
 80034a4:	080034c1 	.word	0x080034c1
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034cb 	.word	0x080034cb
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
 80034b0:	f7ff ff2e 	bl	8003310 <chSysUnlockFromISR.lto_priv.44>
 80034b4:	e015      	b.n	80034e2 <wakeup+0x72>
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 80034b6:	9b03      	ldr	r3, [sp, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e007      	b.n	80034d0 <wakeup+0x60>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 80034c0:	9b03      	ldr	r3, [sp, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff3b 	bl	8003340 <chSemFastSignalI>
    /* Falls through.*/
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) queue_dequeue(tp);
 80034ca:	9803      	ldr	r0, [sp, #12]
 80034cc:	f7ff ff08 	bl	80032e0 <queue_dequeue.lto_priv.179>
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	f04f 32ff 	mov.w	r2, #4294967295
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80034d8:	9803      	ldr	r0, [sp, #12]
 80034da:	f7ff ff51 	bl	8003380 <chSchReadyI>
  chSysUnlockFromISR();
 80034de:	f7ff ff17 	bl	8003310 <chSysUnlockFromISR.lto_priv.44>
}
 80034e2:	b005      	add	sp, #20
 80034e4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080034f0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80034f0:	b500      	push	{lr}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	4603      	mov	r3, r0
 80034f6:	9100      	str	r1, [sp, #0]
 80034f8:	f88d 3007 	strb.w	r3, [sp, #7]

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
 80034fc:	9b00      	ldr	r3, [sp, #0]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d017      	beq.n	8003534 <chSchGoSleepTimeoutS+0x44>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <chSchGoSleepTimeoutS+0x5c>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	a803      	add	r0, sp, #12
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <chSchGoSleepTimeoutS+0x60>)
 800350c:	9900      	ldr	r1, [sp, #0]
 800350e:	f7ff fd8f 	bl	8003030 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003512:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff82 	bl	8003420 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800351c:	ab03      	add	r3, sp, #12
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fefe 	bl	8003320 <chVTIsArmedI>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <chSchGoSleepTimeoutS+0x4e>
      chVTDoResetI(&vt);
 800352a:	ab03      	add	r3, sp, #12
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fe17 	bl	8003160 <chVTDoResetI>
 8003532:	e004      	b.n	800353e <chSchGoSleepTimeoutS+0x4e>
    }
  }
  else {
    chSchGoSleepS(newstate);
 8003534:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff71 	bl	8003420 <chSchGoSleepS>
  }

  return currp->u.rdymsg;
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <chSchGoSleepTimeoutS+0x5c>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003544:	4618      	mov	r0, r3
 8003546:	b009      	add	sp, #36	; 0x24
 8003548:	f85d fb04 	ldr.w	pc, [sp], #4
 800354c:	20000aa8 	.word	0x20000aa8
 8003550:	08003471 	.word	0x08003471
	...

08003560 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8003560:	b500      	push	{lr}
 8003562:	b085      	sub	sp, #20
 8003564:	9001      	str	r0, [sp, #4]
 8003566:	9100      	str	r1, [sp, #0]
  thread_t *otp = currp;
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <chSchWakeupS+0x4c>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	9303      	str	r3, [sp, #12]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	9a00      	ldr	r2, [sp, #0]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8003574:	9b01      	ldr	r3, [sp, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	9b03      	ldr	r3, [sp, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d803      	bhi.n	8003588 <chSchWakeupS+0x28>
    (void) chSchReadyI(ntp);
 8003580:	9801      	ldr	r0, [sp, #4]
 8003582:	f7ff fefd 	bl	8003380 <chSchReadyI>
 8003586:	e00e      	b.n	80035a6 <chSchWakeupS+0x46>
  }
  else {
    otp = chSchReadyI(otp);
 8003588:	9803      	ldr	r0, [sp, #12]
 800358a:	f7ff fef9 	bl	8003380 <chSchReadyI>
 800358e:	9003      	str	r0, [sp, #12]
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <chSchWakeupS+0x4c>)
 8003592:	9b01      	ldr	r3, [sp, #4]
 8003594:	6193      	str	r3, [r2, #24]
    ntp->state = CH_STATE_CURRENT;
 8003596:	9b01      	ldr	r3, [sp, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 800359e:	9903      	ldr	r1, [sp, #12]
 80035a0:	9801      	ldr	r0, [sp, #4]
 80035a2:	f7fc fe9d 	bl	80002e0 <_port_switch>
  }
}
 80035a6:	b005      	add	sp, #20
 80035a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ac:	20000aa8 	.word	0x20000aa8

080035b0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
 80035b0:	b082      	sub	sp, #8
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <chSchIsPreemptionRequired+0x28>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	9301      	str	r3, [sp, #4]
  tprio_t p2 = currp->prio;
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <chSchIsPreemptionRequired+0x28>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
 80035c2:	9a01      	ldr	r2, [sp, #4]
 80035c4:	9b00      	ldr	r3, [sp, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	bf8c      	ite	hi
 80035ca:	2301      	movhi	r3, #1
 80035cc:	2300      	movls	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
#endif
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	b002      	add	sp, #8
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000aa8 	.word	0x20000aa8
 80035dc:	00000000 	.word	0x00000000

080035e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80035e0:	b500      	push	{lr}
 80035e2:	b083      	sub	sp, #12
  thread_t *otp = currp;
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <chSchDoReschedule+0x3c>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	9301      	str	r3, [sp, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80035ea:	480c      	ldr	r0, [pc, #48]	; (800361c <chSchDoReschedule+0x3c>)
 80035ec:	f7ff fe60 	bl	80032b0 <queue_fifo_remove.lto_priv.163>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <chSchDoReschedule+0x3c>)
 80035f4:	619a      	str	r2, [r3, #24]
  currp->state = CH_STATE_CURRENT;
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <chSchDoReschedule+0x3c>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8003600:	9801      	ldr	r0, [sp, #4]
 8003602:	f7ff fee5 	bl	80033d0 <chSchReadyAheadI>
 8003606:	9001      	str	r0, [sp, #4]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <chSchDoReschedule+0x3c>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	9901      	ldr	r1, [sp, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc fe66 	bl	80002e0 <_port_switch>
}
 8003614:	b003      	add	sp, #12
 8003616:	f85d fb04 	ldr.w	pc, [sp], #4
 800361a:	bf00      	nop
 800361c:	20000aa8 	.word	0x20000aa8

08003620 <port_lock.lto_priv.138>:
static inline void port_lock(void) {
 8003620:	b082      	sub	sp, #8
 8003622:	2320      	movs	r3, #32
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	9b01      	ldr	r3, [sp, #4]
 8003628:	f383 8811 	msr	BASEPRI, r3
}
 800362c:	b002      	add	sp, #8
 800362e:	4770      	bx	lr

08003630 <port_unlock.lto_priv.114>:
static inline void port_unlock(void) {
 8003630:	b082      	sub	sp, #8
 8003632:	2300      	movs	r3, #0
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	f383 8811 	msr	BASEPRI, r3
}
 800363c:	b002      	add	sp, #8
 800363e:	4770      	bx	lr

08003640 <list_init>:
static inline void list_init(threads_list_t *tlp) {
 8003640:	b082      	sub	sp, #8
 8003642:	9001      	str	r0, [sp, #4]
  tlp->next = (thread_t *)tlp;
 8003644:	9b01      	ldr	r3, [sp, #4]
 8003646:	9a01      	ldr	r2, [sp, #4]
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	b002      	add	sp, #8
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop

08003650 <list_notempty>:
static inline bool list_notempty(threads_list_t *tlp) {
 8003650:	b082      	sub	sp, #8
 8003652:	9001      	str	r0, [sp, #4]
  return (bool)(tlp->next != (thread_t *)tlp);
 8003654:	9b01      	ldr	r3, [sp, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	9a01      	ldr	r2, [sp, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	b002      	add	sp, #8
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	0000      	movs	r0, r0
	...

08003670 <queue_init.lto_priv.158>:
static inline void queue_init(threads_queue_t *tqp) {
 8003670:	b082      	sub	sp, #8
 8003672:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8003674:	9b01      	ldr	r3, [sp, #4]
 8003676:	9a01      	ldr	r2, [sp, #4]
 8003678:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 800367a:	9b01      	ldr	r3, [sp, #4]
 800367c:	9a01      	ldr	r2, [sp, #4]
 800367e:	605a      	str	r2, [r3, #4]
}
 8003680:	b002      	add	sp, #8
 8003682:	4770      	bx	lr
	...

08003690 <queue_notempty.lto_priv.176>:
static inline bool queue_notempty(const threads_queue_t *tqp) {
 8003690:	b082      	sub	sp, #8
 8003692:	9001      	str	r0, [sp, #4]
  return (bool)(tqp->next != (const thread_t *)tqp);
 8003694:	9b01      	ldr	r3, [sp, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9a01      	ldr	r2, [sp, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf14      	ite	ne
 800369e:	2301      	movne	r3, #1
 80036a0:	2300      	moveq	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	b002      	add	sp, #8
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	0000      	movs	r0, r0
	...

080036b0 <list_remove>:
static inline thread_t *list_remove(threads_list_t *tlp) {
 80036b0:	b084      	sub	sp, #16
 80036b2:	9001      	str	r0, [sp, #4]
  thread_t *tp = tlp->next;
 80036b4:	9b01      	ldr	r3, [sp, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	9303      	str	r3, [sp, #12]
  tlp->next = tp->queue.next;
 80036ba:	9b03      	ldr	r3, [sp, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	601a      	str	r2, [r3, #0]
  return tp;
 80036c2:	9b03      	ldr	r3, [sp, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	b004      	add	sp, #16
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	0000      	movs	r0, r0
	...

080036d0 <queue_insert.lto_priv.169>:
static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 80036d0:	b082      	sub	sp, #8
 80036d2:	9001      	str	r0, [sp, #4]
 80036d4:	9100      	str	r1, [sp, #0]
  tp->queue.next             = (thread_t *)tqp;
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	9a00      	ldr	r2, [sp, #0]
 80036da:	601a      	str	r2, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80036dc:	9b00      	ldr	r3, [sp, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	9b01      	ldr	r3, [sp, #4]
 80036e2:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80036e4:	9b01      	ldr	r3, [sp, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	9a01      	ldr	r2, [sp, #4]
 80036ea:	601a      	str	r2, [r3, #0]
  tqp->prev                  = tp;
 80036ec:	9b00      	ldr	r3, [sp, #0]
 80036ee:	9a01      	ldr	r2, [sp, #4]
 80036f0:	605a      	str	r2, [r3, #4]
}
 80036f2:	b002      	add	sp, #8
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
	...

08003700 <queue_fifo_remove.lto_priv.164>:
static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 8003700:	b084      	sub	sp, #16
 8003702:	9001      	str	r0, [sp, #4]
  thread_t *tp = tqp->next;
 8003704:	9b01      	ldr	r3, [sp, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	9303      	str	r3, [sp, #12]
  tqp->next             = tp->queue.next;
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	9b01      	ldr	r3, [sp, #4]
 8003710:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	9a01      	ldr	r2, [sp, #4]
 8003718:	605a      	str	r2, [r3, #4]
  return tp;
 800371a:	9b03      	ldr	r3, [sp, #12]
}
 800371c:	4618      	mov	r0, r3
 800371e:	b004      	add	sp, #16
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
	...

08003730 <chSysLock.lto_priv.77>:
static inline void chSysLock(void) {
 8003730:	b508      	push	{r3, lr}
  port_lock();
 8003732:	f7ff ff75 	bl	8003620 <port_lock.lto_priv.138>
}
 8003736:	bd08      	pop	{r3, pc}
	...

08003740 <chSysUnlock.lto_priv.58>:
static inline void chSysUnlock(void) {
 8003740:	b508      	push	{r3, lr}
  port_unlock();
 8003742:	f7ff ff75 	bl	8003630 <port_unlock.lto_priv.114>
}
 8003746:	bd08      	pop	{r3, pc}
	...

08003750 <chThdGetSelfX.lto_priv.172>:
  return ch.rlist.current;
 8003750:	4b01      	ldr	r3, [pc, #4]	; (8003758 <chThdGetSelfX.lto_priv.172+0x8>)
 8003752:	699b      	ldr	r3, [r3, #24]
}
 8003754:	4618      	mov	r0, r3
 8003756:	4770      	bx	lr
 8003758:	20000aa8 	.word	0x20000aa8
 800375c:	00000000 	.word	0x00000000

08003760 <chThdSleepS>:
static inline void chThdSleepS(sysinterval_t ticks) {
 8003760:	b500      	push	{lr}
 8003762:	b083      	sub	sp, #12
 8003764:	9001      	str	r0, [sp, #4]
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003766:	9901      	ldr	r1, [sp, #4]
 8003768:	2008      	movs	r0, #8
 800376a:	f7ff fec1 	bl	80034f0 <chSchGoSleepTimeoutS>
}
 800376e:	b003      	add	sp, #12
 8003770:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003780 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003780:	b500      	push	{lr}
 8003782:	b085      	sub	sp, #20
 8003784:	9001      	str	r0, [sp, #4]
 8003786:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);
 8003788:	9801      	ldr	r0, [sp, #4]
 800378a:	f7ff ffb9 	bl	8003700 <queue_fifo_remove.lto_priv.164>
 800378e:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	9a00      	ldr	r2, [sp, #0]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003796:	9803      	ldr	r0, [sp, #12]
 8003798:	f7ff fdf2 	bl	8003380 <chSchReadyI>
}
 800379c:	b005      	add	sp, #20
 800379e:	f85d fb04 	ldr.w	pc, [sp], #4
 80037a2:	bf00      	nop
	...

080037b0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
 80037b0:	b500      	push	{lr}
 80037b2:	b085      	sub	sp, #20
 80037b4:	9003      	str	r0, [sp, #12]
 80037b6:	9102      	str	r1, [sp, #8]
 80037b8:	9201      	str	r2, [sp, #4]

  tp->prio      = prio;
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	9a01      	ldr	r2, [sp, #4]
 80037be:	609a      	str	r2, [r3, #8]
  tp->state     = CH_STATE_WTSTART;
 80037c0:	9b03      	ldr	r3, [sp, #12]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2020 	strb.w	r2, [r3, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 80037c8:	9b03      	ldr	r3, [sp, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 80037d0:	9b03      	ldr	r3, [sp, #12]
 80037d2:	9a01      	ldr	r2, [sp, #4]
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c
  tp->mtxlist   = NULL;
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	635a      	str	r2, [r3, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  tp->name      = name;
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	9a02      	ldr	r2, [sp, #8]
 80037ee:	619a      	str	r2, [r3, #24]
  REG_INSERT(tp);
 80037f0:	9b03      	ldr	r3, [sp, #12]
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <_thread_init+0x7c>)
 80037f4:	611a      	str	r2, [r3, #16]
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <_thread_init+0x7c>)
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	615a      	str	r2, [r3, #20]
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	9a03      	ldr	r2, [sp, #12]
 8003804:	611a      	str	r2, [r3, #16]
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <_thread_init+0x7c>)
 8003808:	9b03      	ldr	r3, [sp, #12]
 800380a:	6153      	str	r3, [r2, #20]
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 800380c:	9b03      	ldr	r3, [sp, #12]
 800380e:	3328      	adds	r3, #40	; 0x28
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff15 	bl	8003640 <list_init>
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 8003816:	9b03      	ldr	r3, [sp, #12]
 8003818:	332c      	adds	r3, #44	; 0x2c
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff28 	bl	8003670 <queue_init.lto_priv.158>
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->stats);
#endif
  CH_CFG_THREAD_INIT_HOOK(tp);
  return tp;
 8003820:	9b03      	ldr	r3, [sp, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	b005      	add	sp, #20
 8003826:	f85d fb04 	ldr.w	pc, [sp], #4
 800382a:	bf00      	nop
 800382c:	20000aa8 	.word	0x20000aa8

08003830 <chThdCreateSuspendedI>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8003830:	b500      	push	{lr}
 8003832:	b085      	sub	sp, #20
 8003834:	9001      	str	r0, [sp, #4]
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	3b48      	subs	r3, #72	; 0x48
 800383c:	9303      	str	r3, [sp, #12]
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	9b03      	ldr	r3, [sp, #12]
 8003844:	61da      	str	r2, [r3, #28]
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	9a01      	ldr	r2, [sp, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	9b03      	ldr	r3, [sp, #12]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	9a01      	ldr	r2, [sp, #4]
 8003860:	6952      	ldr	r2, [r2, #20]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <chThdCreateSuspendedI+0x58>)
 800386a:	621a      	str	r2, [r3, #32]

  /* The driver object is initialized but not started.*/
  return _thread_init(tp, tdp->name, tdp->prio);
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	9b01      	ldr	r3, [sp, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	461a      	mov	r2, r3
 8003876:	9803      	ldr	r0, [sp, #12]
 8003878:	f7ff ff9a 	bl	80037b0 <_thread_init>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	b005      	add	sp, #20
 8003882:	f85d fb04 	ldr.w	pc, [sp], #4
 8003886:	bf00      	nop
 8003888:	080002f1 	.word	0x080002f1
 800388c:	00000000 	.word	0x00000000

08003890 <chThdCreate>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 8003890:	b500      	push	{lr}
 8003892:	b085      	sub	sp, #20
 8003894:	9001      	str	r0, [sp, #4]
  _thread_memfill((uint8_t *)tdp->wbase,
                  (uint8_t *)tdp->wend,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
 8003896:	f7ff ff4b 	bl	8003730 <chSysLock.lto_priv.77>
  tp = chThdCreateSuspendedI(tdp);
 800389a:	9801      	ldr	r0, [sp, #4]
 800389c:	f7ff ffc8 	bl	8003830 <chThdCreateSuspendedI>
 80038a0:	9003      	str	r0, [sp, #12]
  chSchWakeupS(tp, MSG_OK);
 80038a2:	2100      	movs	r1, #0
 80038a4:	9803      	ldr	r0, [sp, #12]
 80038a6:	f7ff fe5b 	bl	8003560 <chSchWakeupS>
  chSysUnlock();
 80038aa:	f7ff ff49 	bl	8003740 <chSysUnlock.lto_priv.58>

  return tp;
 80038ae:	9b03      	ldr	r3, [sp, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	b005      	add	sp, #20
 80038b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080038c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80038c0:	b500      	push	{lr}
 80038c2:	b083      	sub	sp, #12
 80038c4:	9001      	str	r0, [sp, #4]

  chSysLock();
 80038c6:	f7ff ff33 	bl	8003730 <chSysLock.lto_priv.77>
  chThdExitS(msg);
 80038ca:	9801      	ldr	r0, [sp, #4]
 80038cc:	f000 f808 	bl	80038e0 <chThdExitS>
  /* The thread never returns here.*/
}
 80038d0:	b003      	add	sp, #12
 80038d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038d6:	bf00      	nop
	...

080038e0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 80038e0:	b500      	push	{lr}
 80038e2:	b085      	sub	sp, #20
 80038e4:	9001      	str	r0, [sp, #4]
  thread_t *tp = currp;
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <chThdExitS+0x70>)
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	9303      	str	r3, [sp, #12]

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 80038ec:	9b03      	ldr	r3, [sp, #12]
 80038ee:	9a01      	ldr	r2, [sp, #4]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
 80038f2:	e008      	b.n	8003906 <chThdExitS+0x26>
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
    (void) chSchReadyI(list_remove(&tp->waiting));
 80038f4:	9b03      	ldr	r3, [sp, #12]
 80038f6:	3328      	adds	r3, #40	; 0x28
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fed9 	bl	80036b0 <list_remove>
 80038fe:	4603      	mov	r3, r0
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fd3d 	bl	8003380 <chSchReadyI>
  while (list_notempty(&tp->waiting)) {
 8003906:	9b03      	ldr	r3, [sp, #12]
 8003908:	3328      	adds	r3, #40	; 0x28
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fea0 	bl	8003650 <list_notempty>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1ee      	bne.n	80038f4 <chThdExitS+0x14>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8003916:	9b03      	ldr	r3, [sp, #12]
 8003918:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800391c:	2b00      	cmp	r3, #0
 800391e:	d110      	bne.n	8003942 <chThdExitS+0x62>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8003920:	9b03      	ldr	r3, [sp, #12]
 8003922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003926:	f003 0303 	and.w	r3, r3, #3
  if ((tp->refs == (trefs_t)0) &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <chThdExitS+0x62>
    REG_REMOVE(tp);
 800392e:	9b03      	ldr	r3, [sp, #12]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	9a03      	ldr	r2, [sp, #12]
 8003934:	6912      	ldr	r2, [r2, #16]
 8003936:	611a      	str	r2, [r3, #16]
 8003938:	9b03      	ldr	r3, [sp, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	9a03      	ldr	r2, [sp, #12]
 800393e:	6952      	ldr	r2, [r2, #20]
 8003940:	615a      	str	r2, [r3, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8003942:	200f      	movs	r0, #15
 8003944:	f7ff fd6c 	bl	8003420 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8003948:	b005      	add	sp, #20
 800394a:	f85d fb04 	ldr.w	pc, [sp], #4
 800394e:	bf00      	nop
 8003950:	20000aa8 	.word	0x20000aa8
	...

08003960 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8003960:	b500      	push	{lr}
 8003962:	b083      	sub	sp, #12
 8003964:	9001      	str	r0, [sp, #4]

  chSysLock();
 8003966:	f7ff fee3 	bl	8003730 <chSysLock.lto_priv.77>
  chThdSleepS(time);
 800396a:	9801      	ldr	r0, [sp, #4]
 800396c:	f7ff fef8 	bl	8003760 <chThdSleepS>
  chSysUnlock();
 8003970:	f7ff fee6 	bl	8003740 <chSysUnlock.lto_priv.58>
}
 8003974:	b003      	add	sp, #12
 8003976:	f85d fb04 	ldr.w	pc, [sp], #4
 800397a:	bf00      	nop
 800397c:	0000      	movs	r0, r0
	...

08003980 <chThdSuspendTimeoutS>:
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8003980:	b500      	push	{lr}
 8003982:	b085      	sub	sp, #20
 8003984:	9001      	str	r0, [sp, #4]
 8003986:	9100      	str	r1, [sp, #0]
  thread_t *tp = chThdGetSelfX();
 8003988:	f7ff fee2 	bl	8003750 <chThdGetSelfX.lto_priv.172>
 800398c:	9003      	str	r0, [sp, #12]

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 800398e:	9b00      	ldr	r3, [sp, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d102      	bne.n	800399a <chThdSuspendTimeoutS+0x1a>
    return MSG_TIMEOUT;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	e00a      	b.n	80039b0 <chThdSuspendTimeoutS+0x30>
  }

  *trp = tp;
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	9a03      	ldr	r2, [sp, #12]
 800399e:	601a      	str	r2, [r3, #0]
  tp->u.wttrp = trp;
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	9a01      	ldr	r2, [sp, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80039a6:	9900      	ldr	r1, [sp, #0]
 80039a8:	2003      	movs	r0, #3
 80039aa:	f7ff fda1 	bl	80034f0 <chSchGoSleepTimeoutS>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	b005      	add	sp, #20
 80039b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080039c0 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 80039c0:	b500      	push	{lr}
 80039c2:	b085      	sub	sp, #20
 80039c4:	9001      	str	r0, [sp, #4]
 80039c6:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
 80039c8:	9b01      	ldr	r3, [sp, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <chThdResumeI+0x28>
    thread_t *tp = *trp;
 80039d0:	9b01      	ldr	r3, [sp, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	9a00      	ldr	r2, [sp, #0]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80039e2:	9803      	ldr	r0, [sp, #12]
 80039e4:	f7ff fccc 	bl	8003380 <chSchReadyI>
  }
}
 80039e8:	b005      	add	sp, #20
 80039ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80039ee:	bf00      	nop

080039f0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80039f0:	b500      	push	{lr}
 80039f2:	b083      	sub	sp, #12
 80039f4:	9001      	str	r0, [sp, #4]
 80039f6:	9100      	str	r1, [sp, #0]

  if (TIME_IMMEDIATE == timeout) {
 80039f8:	9b00      	ldr	r3, [sp, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <chThdEnqueueTimeoutS+0x14>
    return MSG_TIMEOUT;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	e00a      	b.n	8003a1a <chThdEnqueueTimeoutS+0x2a>
  }

  queue_insert(currp, tqp);
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <chThdEnqueueTimeoutS+0x34>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	9901      	ldr	r1, [sp, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fe60 	bl	80036d0 <queue_insert.lto_priv.169>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8003a10:	9900      	ldr	r1, [sp, #0]
 8003a12:	2004      	movs	r0, #4
 8003a14:	f7ff fd6c 	bl	80034f0 <chSchGoSleepTimeoutS>
 8003a18:	4603      	mov	r3, r0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	b003      	add	sp, #12
 8003a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a22:	bf00      	nop
 8003a24:	20000aa8 	.word	0x20000aa8
	...

08003a30 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8003a30:	b500      	push	{lr}
 8003a32:	b083      	sub	sp, #12
 8003a34:	9001      	str	r0, [sp, #4]
 8003a36:	9100      	str	r1, [sp, #0]

  if (queue_notempty(tqp)) {
 8003a38:	9801      	ldr	r0, [sp, #4]
 8003a3a:	f7ff fe29 	bl	8003690 <queue_notempty.lto_priv.176>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <chThdDequeueNextI+0x1c>
    chThdDoDequeueNextI(tqp, msg);
 8003a44:	9900      	ldr	r1, [sp, #0]
 8003a46:	9801      	ldr	r0, [sp, #4]
 8003a48:	f7ff fe9a 	bl	8003780 <chThdDoDequeueNextI>
  }
}
 8003a4c:	b003      	add	sp, #12
 8003a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a52:	bf00      	nop
	...

08003a60 <port_rt_get_counter_value.lto_priv.184>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <port_rt_get_counter_value.lto_priv.184+0x8>)
 8003a62:	685b      	ldr	r3, [r3, #4]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	4770      	bx	lr
 8003a68:	e0001000 	.word	0xe0001000
 8003a6c:	00000000 	.word	0x00000000

08003a70 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
 8003a70:	e92d 0810 	stmdb	sp!, {r4, fp}
 8003a74:	b084      	sub	sp, #16
 8003a76:	9003      	str	r0, [sp, #12]
 8003a78:	9102      	str	r1, [sp, #8]
 8003a7a:	9201      	str	r2, [sp, #4]

  tmp->n++;
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	9b03      	ldr	r3, [sp, #12]
 8003a84:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	9a02      	ldr	r2, [sp, #8]
 8003a8c:	1ad2      	subs	r2, r2, r3
 8003a8e:	9b01      	ldr	r3, [sp, #4]
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8003a9c:	9b03      	ldr	r3, [sp, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	469b      	mov	fp, r3
 8003aa2:	f04f 0c00 	mov.w	ip, #0
 8003aa6:	eb1b 0301 	adds.w	r3, fp, r1
 8003aaa:	eb4c 0402 	adc.w	r4, ip, r2
 8003aae:	9a03      	ldr	r2, [sp, #12]
 8003ab0:	e9c2 3404 	strd	r3, r4, [r2, #16]
  if (tmp->last > tmp->worst) {
 8003ab4:	9b03      	ldr	r3, [sp, #12]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d903      	bls.n	8003ac8 <tm_stop+0x58>
    tmp->worst = tmp->last;
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	9b03      	ldr	r3, [sp, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d203      	bcs.n	8003adc <tm_stop+0x6c>
    tmp->best = tmp->last;
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	601a      	str	r2, [r3, #0]
  }
}
 8003adc:	b004      	add	sp, #16
 8003ade:	e8bd 0810 	ldmia.w	sp!, {r4, fp}
 8003ae2:	4770      	bx	lr
	...

08003af0 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8003af0:	b500      	push	{lr}
 8003af2:	b087      	sub	sp, #28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <_tm_init+0x30>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	675a      	str	r2, [r3, #116]	; 0x74
  chTMObjectInit(&tm);
 8003afa:	466b      	mov	r3, sp
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f817 	bl	8003b30 <chTMObjectInit>
  chTMStartMeasurementX(&tm);
 8003b02:	466b      	mov	r3, sp
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f833 	bl	8003b70 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8003b0a:	466b      	mov	r3, sp
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f83f 	bl	8003b90 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8003b12:	9b02      	ldr	r3, [sp, #8]
 8003b14:	4a02      	ldr	r2, [pc, #8]	; (8003b20 <_tm_init+0x30>)
 8003b16:	6753      	str	r3, [r2, #116]	; 0x74
}
 8003b18:	b007      	add	sp, #28
 8003b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b1e:	bf00      	nop
 8003b20:	20000aa8 	.word	0x20000aa8
	...

08003b30 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p TimeMeasurement structure
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
 8003b30:	b410      	push	{r4}
 8003b32:	b083      	sub	sp, #12
 8003b34:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
 8003b3e:	9b01      	ldr	r3, [sp, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
 8003b44:	9b01      	ldr	r3, [sp, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
 8003b4a:	9b01      	ldr	r3, [sp, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
 8003b50:	9a01      	ldr	r2, [sp, #4]
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f04f 0400 	mov.w	r4, #0
 8003b5a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003b5e:	b003      	add	sp, #12
 8003b60:	bc10      	pop	{r4}
 8003b62:	4770      	bx	lr
	...

08003b70 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p TimeMeasurement structure
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
 8003b70:	b500      	push	{lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	9001      	str	r0, [sp, #4]

  tmp->last = chSysGetRealtimeCounterX();
 8003b76:	f7ff ff73 	bl	8003a60 <port_rt_get_counter_value.lto_priv.184>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	9b01      	ldr	r3, [sp, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	b003      	add	sp, #12
 8003b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b86:	bf00      	nop
	...

08003b90 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8003b90:	b500      	push	{lr}
 8003b92:	b083      	sub	sp, #12
 8003b94:	9001      	str	r0, [sp, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8003b96:	f7ff ff63 	bl	8003a60 <port_rt_get_counter_value.lto_priv.184>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <chTMStopMeasurementX+0x20>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	9801      	ldr	r0, [sp, #4]
 8003ba4:	f7ff ff64 	bl	8003a70 <tm_stop>
}
 8003ba8:	b003      	add	sp, #12
 8003baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bae:	bf00      	nop
 8003bb0:	20000aa8 	.word	0x20000aa8
	...

08003bc0 <queue_init.lto_priv.160>:
static inline void queue_init(threads_queue_t *tqp) {
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	9001      	str	r0, [sp, #4]
  tqp->next = (thread_t *)tqp;
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	9a01      	ldr	r2, [sp, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	9a01      	ldr	r2, [sp, #4]
 8003bce:	605a      	str	r2, [r3, #4]
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	4770      	bx	lr
	...

08003be0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8003be0:	b500      	push	{lr}
 8003be2:	b083      	sub	sp, #12
 8003be4:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
 8003be6:	9b01      	ldr	r3, [sp, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ffe9 	bl	8003bc0 <queue_init.lto_priv.160>
  mp->owner = NULL;
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8003bf4:	b003      	add	sp, #12
 8003bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bfa:	bf00      	nop
 8003bfc:	0000      	movs	r0, r0
	...

08003c00 <port_lock.lto_priv.143>:
static inline void port_lock(void) {
 8003c00:	b082      	sub	sp, #8
 8003c02:	2320      	movs	r3, #32
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	9b01      	ldr	r3, [sp, #4]
 8003c08:	f383 8811 	msr	BASEPRI, r3
}
 8003c0c:	b002      	add	sp, #8
 8003c0e:	4770      	bx	lr

08003c10 <port_unlock.lto_priv.119>:
static inline void port_unlock(void) {
 8003c10:	b082      	sub	sp, #8
 8003c12:	2300      	movs	r3, #0
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	9b01      	ldr	r3, [sp, #4]
 8003c18:	f383 8811 	msr	BASEPRI, r3
}
 8003c1c:	b002      	add	sp, #8
 8003c1e:	4770      	bx	lr

08003c20 <chSysLock.lto_priv.82>:
static inline void chSysLock(void) {
 8003c20:	b508      	push	{r3, lr}
  port_lock();
 8003c22:	f7ff ffed 	bl	8003c00 <port_lock.lto_priv.143>
}
 8003c26:	bd08      	pop	{r3, pc}
	...

08003c30 <chSysUnlock.lto_priv.63>:
static inline void chSysUnlock(void) {
 8003c30:	b508      	push	{r3, lr}
  port_unlock();
 8003c32:	f7ff ffed 	bl	8003c10 <port_unlock.lto_priv.119>
}
 8003c36:	bd08      	pop	{r3, pc}
	...

08003c40 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 8003c40:	b500      	push	{lr}
 8003c42:	b085      	sub	sp, #20
 8003c44:	9003      	str	r0, [sp, #12]
 8003c46:	9102      	str	r1, [sp, #8]
 8003c48:	9201      	str	r2, [sp, #4]
 8003c4a:	9300      	str	r3, [sp, #0]

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
 8003c4c:	f7ff ffe8 	bl	8003c20 <chSysLock.lto_priv.82>
  elp->next     = esp->next;
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	9b02      	ldr	r3, [sp, #8]
 8003c56:	601a      	str	r2, [r3, #0]
  esp->next     = elp;
 8003c58:	9b03      	ldr	r3, [sp, #12]
 8003c5a:	9a02      	ldr	r2, [sp, #8]
 8003c5c:	601a      	str	r2, [r3, #0]
  elp->listener = currp;
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <chEvtRegisterMaskWithFlags+0x44>)
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	9b02      	ldr	r3, [sp, #8]
 8003c64:	605a      	str	r2, [r3, #4]
  elp->events   = events;
 8003c66:	9b02      	ldr	r3, [sp, #8]
 8003c68:	9a01      	ldr	r2, [sp, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
  elp->flags    = (eventflags_t)0;
 8003c6c:	9b02      	ldr	r3, [sp, #8]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
  elp->wflags   = wflags;
 8003c72:	9b02      	ldr	r3, [sp, #8]
 8003c74:	9a00      	ldr	r2, [sp, #0]
 8003c76:	611a      	str	r2, [r3, #16]
  chSysUnlock();
 8003c78:	f7ff ffda 	bl	8003c30 <chSysUnlock.lto_priv.63>
}
 8003c7c:	b005      	add	sp, #20
 8003c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c82:	bf00      	nop
 8003c84:	20000aa8 	.word	0x20000aa8
	...

08003c90 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003c90:	b500      	push	{lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	9001      	str	r0, [sp, #4]
 8003c96:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8003c98:	9b01      	ldr	r3, [sp, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	9303      	str	r3, [sp, #12]
 8003c9e:	e019      	b.n	8003cd4 <chEvtBroadcastFlagsI+0x44>
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	9b00      	ldr	r3, [sp, #0]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	9b03      	ldr	r3, [sp, #12]
 8003caa:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8003cac:	9b00      	ldr	r3, [sp, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <chEvtBroadcastFlagsI+0x2e>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	9b00      	ldr	r3, [sp, #0]
 8003cb8:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <chEvtBroadcastFlagsI+0x3e>
      chEvtSignalI(elp->listener, elp->events);
 8003cbe:	9b03      	ldr	r3, [sp, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 f811 	bl	8003cf0 <chEvtSignalI>
    }
    elp = elp->next;
 8003cce:	9b03      	ldr	r3, [sp, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
 8003cd4:	9a03      	ldr	r2, [sp, #12]
 8003cd6:	9b01      	ldr	r3, [sp, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1e1      	bne.n	8003ca0 <chEvtBroadcastFlagsI+0x10>
  }
}
 8003cdc:	b005      	add	sp, #20
 8003cde:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ce2:	bf00      	nop
	...

08003cf0 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8003cf0:	b500      	push	{lr}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	9001      	str	r0, [sp, #4]
 8003cf6:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8003cf8:	9b01      	ldr	r3, [sp, #4]
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	9b00      	ldr	r3, [sp, #0]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	9b01      	ldr	r3, [sp, #4]
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003d04:	9b01      	ldr	r3, [sp, #4]
 8003d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d106      	bne.n	8003d1c <chEvtSignalI+0x2c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10d      	bne.n	8003d38 <chEvtSignalI+0x48>
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8003d22:	2b0b      	cmp	r3, #11
 8003d24:	d10e      	bne.n	8003d44 <chEvtSignalI+0x54>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8003d26:	9b01      	ldr	r3, [sp, #4]
 8003d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2a:	9b01      	ldr	r3, [sp, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	401a      	ands	r2, r3
 8003d30:	9b01      	ldr	r3, [sp, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d105      	bne.n	8003d44 <chEvtSignalI+0x54>
    tp->u.rdymsg = MSG_OK;
 8003d38:	9b01      	ldr	r3, [sp, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8003d3e:	9801      	ldr	r0, [sp, #4]
 8003d40:	f7ff fb1e 	bl	8003380 <chSchReadyI>
  }
}
 8003d44:	b003      	add	sp, #12
 8003d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d4a:	bf00      	nop
 8003d4c:	0000      	movs	r0, r0
	...

08003d50 <chEvtWaitOneTimeout>:
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 8003d50:	b500      	push	{lr}
 8003d52:	b085      	sub	sp, #20
 8003d54:	9001      	str	r0, [sp, #4]
 8003d56:	9100      	str	r1, [sp, #0]
  thread_t *ctp = currp;
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <chEvtWaitOneTimeout+0x7c>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	9302      	str	r3, [sp, #8]
  eventmask_t m;

  chSysLock();
 8003d5e:	f7ff ff5f 	bl	8003c20 <chSysLock.lto_priv.82>
  m = ctp->epending & events;
 8003d62:	9b02      	ldr	r3, [sp, #8]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	9a01      	ldr	r2, [sp, #4]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	9303      	str	r3, [sp, #12]
  if (m == (eventmask_t)0) {
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d119      	bne.n	8003da6 <chEvtWaitOneTimeout+0x56>
    if (TIME_IMMEDIATE == timeout) {
 8003d72:	9b00      	ldr	r3, [sp, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <chEvtWaitOneTimeout+0x30>
      chSysUnlock();
 8003d78:	f7ff ff5a 	bl	8003c30 <chSysUnlock.lto_priv.63>
      return (eventmask_t)0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e021      	b.n	8003dc4 <chEvtWaitOneTimeout+0x74>
    }
    ctp->u.ewmask = events;
 8003d80:	9b02      	ldr	r3, [sp, #8]
 8003d82:	9a01      	ldr	r2, [sp, #4]
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8003d86:	9900      	ldr	r1, [sp, #0]
 8003d88:	200a      	movs	r0, #10
 8003d8a:	f7ff fbb1 	bl	80034f0 <chSchGoSleepTimeoutS>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da03      	bge.n	8003d9c <chEvtWaitOneTimeout+0x4c>
      chSysUnlock();
 8003d94:	f7ff ff4c 	bl	8003c30 <chSysUnlock.lto_priv.63>
      return (eventmask_t)0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e013      	b.n	8003dc4 <chEvtWaitOneTimeout+0x74>
    }
    m = ctp->epending & events;
 8003d9c:	9b02      	ldr	r3, [sp, #8]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	9a01      	ldr	r2, [sp, #4]
 8003da2:	4013      	ands	r3, r2
 8003da4:	9303      	str	r3, [sp, #12]
  }
  m ^= m & (m - (eventmask_t)1);
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	425b      	negs	r3, r3
 8003daa:	9a03      	ldr	r2, [sp, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	9303      	str	r3, [sp, #12]
  ctp->epending &= ~m;
 8003db0:	9b02      	ldr	r3, [sp, #8]
 8003db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db4:	9b03      	ldr	r3, [sp, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	9b02      	ldr	r3, [sp, #8]
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34
  chSysUnlock();
 8003dbe:	f7ff ff37 	bl	8003c30 <chSysUnlock.lto_priv.63>

  return m;
 8003dc2:	9b03      	ldr	r3, [sp, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	b005      	add	sp, #20
 8003dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dcc:	20000aa8 	.word	0x20000aa8

08003dd0 <port_lock.lto_priv.147>:
static inline void port_lock(void) {
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	9b01      	ldr	r3, [sp, #4]
 8003dd8:	f383 8811 	msr	BASEPRI, r3
}
 8003ddc:	b002      	add	sp, #8
 8003dde:	4770      	bx	lr

08003de0 <port_unlock.lto_priv.123>:
static inline void port_unlock(void) {
 8003de0:	b082      	sub	sp, #8
 8003de2:	2300      	movs	r3, #0
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	9b01      	ldr	r3, [sp, #4]
 8003de8:	f383 8811 	msr	BASEPRI, r3
}
 8003dec:	b002      	add	sp, #8
 8003dee:	4770      	bx	lr

08003df0 <chSysLock.lto_priv.86>:
static inline void chSysLock(void) {
 8003df0:	b508      	push	{r3, lr}
  port_lock();
 8003df2:	f7ff ffed 	bl	8003dd0 <port_lock.lto_priv.147>
}
 8003df6:	bd08      	pop	{r3, pc}
	...

08003e00 <chSysUnlock.lto_priv.67>:
static inline void chSysUnlock(void) {
 8003e00:	b508      	push	{r3, lr}
  port_unlock();
 8003e02:	f7ff ffed 	bl	8003de0 <port_unlock.lto_priv.123>
}
 8003e06:	bd08      	pop	{r3, pc}
	...

08003e10 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <_core_init+0x10>)
 8003e12:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <_core_init+0x14>)
 8003e14:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 8003e16:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <_core_init+0x10>)
 8003e18:	4a03      	ldr	r2, [pc, #12]	; (8003e28 <_core_init+0x18>)
 8003e1a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.nextmem = &static_heap[0];
  ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000b20 	.word	0x20000b20
 8003e24:	20000be8 	.word	0x20000be8
 8003e28:	20018000 	.word	0x20018000
 8003e2c:	00000000 	.word	0x00000000

08003e30 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8003e30:	b086      	sub	sp, #24
 8003e32:	9003      	str	r0, [sp, #12]
 8003e34:	9102      	str	r1, [sp, #8]
 8003e36:	9201      	str	r2, [sp, #4]
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8003e38:	9a02      	ldr	r2, [sp, #8]
 8003e3a:	9b03      	ldr	r3, [sp, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	1e5a      	subs	r2, r3, #1
 8003e40:	9b02      	ldr	r3, [sp, #8]
 8003e42:	425b      	negs	r3, r3
 8003e44:	4013      	ands	r3, r2
 8003e46:	9303      	str	r3, [sp, #12]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <chCoreAllocAlignedWithOffsetI+0x60>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	9b01      	ldr	r3, [sp, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	9b02      	ldr	r3, [sp, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	9b02      	ldr	r3, [sp, #8]
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	9305      	str	r3, [sp, #20]
  next = p + size;
 8003e60:	9a05      	ldr	r2, [sp, #20]
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <chCoreAllocAlignedWithOffsetI+0x60>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	9a04      	ldr	r2, [sp, #16]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d804      	bhi.n	8003e7c <chCoreAllocAlignedWithOffsetI+0x4c>
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <chCoreAllocAlignedWithOffsetI+0x60>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	9a04      	ldr	r2, [sp, #16]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d201      	bcs.n	8003e80 <chCoreAllocAlignedWithOffsetI+0x50>
    return NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e003      	b.n	8003e88 <chCoreAllocAlignedWithOffsetI+0x58>
  }

  ch_memcore.nextmem = next;
 8003e80:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <chCoreAllocAlignedWithOffsetI+0x60>)
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	6013      	str	r3, [r2, #0]

  return p;
 8003e86:	9b05      	ldr	r3, [sp, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	b006      	add	sp, #24
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000b20 	.word	0x20000b20
	...

08003ea0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8003ea0:	b500      	push	{lr}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	9003      	str	r0, [sp, #12]
 8003ea6:	9102      	str	r1, [sp, #8]
 8003ea8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
 8003eaa:	f7ff ffa1 	bl	8003df0 <chSysLock.lto_priv.86>
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8003eae:	9a01      	ldr	r2, [sp, #4]
 8003eb0:	9902      	ldr	r1, [sp, #8]
 8003eb2:	9803      	ldr	r0, [sp, #12]
 8003eb4:	f7ff ffbc 	bl	8003e30 <chCoreAllocAlignedWithOffsetI>
 8003eb8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
 8003eba:	f7ff ffa1 	bl	8003e00 <chSysUnlock.lto_priv.67>

  return p;
 8003ebe:	9b05      	ldr	r3, [sp, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	b007      	add	sp, #28
 8003ec4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003ed0 <_heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void _heap_init(void) {
 8003ed0:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8003ed2:	4b06      	ldr	r3, [pc, #24]	; (8003eec <_heap_init+0x1c>)
 8003ed4:	4a06      	ldr	r2, [pc, #24]	; (8003ef0 <_heap_init+0x20>)
 8003ed6:	601a      	str	r2, [r3, #0]
  H_NEXT(&default_heap.header) = NULL;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <_heap_init+0x1c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 8003ede:	4b03      	ldr	r3, [pc, #12]	; (8003eec <_heap_init+0x1c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	609a      	str	r2, [r3, #8]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
 8003ee4:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <_heap_init+0x24>)
 8003ee6:	f7ff fe7b 	bl	8003be0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
 8003eea:	bd08      	pop	{r3, pc}
 8003eec:	20000b28 	.word	0x20000b28
 8003ef0:	08003ea1 	.word	0x08003ea1
 8003ef4:	20000b34 	.word	0x20000b34
	...

08003f00 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
 8003f00:	b084      	sub	sp, #16
 8003f02:	9003      	str	r0, [sp, #12]
 8003f04:	9102      	str	r1, [sp, #8]
 8003f06:	9201      	str	r2, [sp, #4]
 8003f08:	9300      	str	r3, [sp, #0]
  chDbgCheck((mp != NULL) &&
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	9a02      	ldr	r2, [sp, #8]
 8003f14:	605a      	str	r2, [r3, #4]
  mp->align = align;
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	9a01      	ldr	r2, [sp, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
 8003f1c:	9b03      	ldr	r3, [sp, #12]
 8003f1e:	9a00      	ldr	r2, [sp, #0]
 8003f20:	60da      	str	r2, [r3, #12]
}
 8003f22:	b004      	add	sp, #16
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
	...

08003f30 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8003f30:	b500      	push	{lr}
 8003f32:	b083      	sub	sp, #12
 8003f34:	9001      	str	r0, [sp, #4]
 8003f36:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	9900      	ldr	r1, [sp, #0]
 8003f3c:	9801      	ldr	r0, [sp, #4]
 8003f3e:	f7ff ff77 	bl	8003e30 <chCoreAllocAlignedWithOffsetI>
 8003f42:	4603      	mov	r3, r0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	b003      	add	sp, #12
 8003f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f4c:	0000      	movs	r0, r0
	...

08003f50 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
 8003f50:	b500      	push	{lr}
 8003f52:	b085      	sub	sp, #20
 8003f54:	9003      	str	r0, [sp, #12]
 8003f56:	9102      	str	r1, [sp, #8]
 8003f58:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	9902      	ldr	r1, [sp, #8]
 8003f60:	9803      	ldr	r0, [sp, #12]
 8003f62:	f7ff ffcd 	bl	8003f00 <chPoolObjectInitAligned>
}
 8003f66:	b005      	add	sp, #20
 8003f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f6c:	0000      	movs	r0, r0
	...

08003f70 <dyn_list_init>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {
 8003f70:	b082      	sub	sp, #8
 8003f72:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
 8003f74:	9b01      	ldr	r3, [sp, #4]
 8003f76:	9a01      	ldr	r2, [sp, #4]
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	b002      	add	sp, #8
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop

08003f80 <_factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void _factory_init(void) {
 8003f80:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8003f82:	4810      	ldr	r0, [pc, #64]	; (8003fc4 <_factory_init+0x44>)
 8003f84:	f7ff fe2c 	bl	8003be0 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
 8003f88:	480f      	ldr	r0, [pc, #60]	; (8003fc8 <_factory_init+0x48>)
 8003f8a:	f7ff fff1 	bl	8003f70 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <_factory_init+0x4c>)
 8003f90:	2114      	movs	r1, #20
 8003f92:	480f      	ldr	r0, [pc, #60]	; (8003fd0 <_factory_init+0x50>)
 8003f94:	f7ff ffdc 	bl	8003f50 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
 8003f98:	480e      	ldr	r0, [pc, #56]	; (8003fd4 <_factory_init+0x54>)
 8003f9a:	f7ff ffe9 	bl	8003f70 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
 8003f9e:	480e      	ldr	r0, [pc, #56]	; (8003fd8 <_factory_init+0x58>)
 8003fa0:	f7ff ffe6 	bl	8003f70 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <_factory_init+0x4c>)
 8003fa6:	211c      	movs	r1, #28
 8003fa8:	480c      	ldr	r0, [pc, #48]	; (8003fdc <_factory_init+0x5c>)
 8003faa:	f7ff ffd1 	bl	8003f50 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
 8003fae:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <_factory_init+0x60>)
 8003fb0:	f7ff ffde 	bl	8003f70 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
 8003fb4:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <_factory_init+0x64>)
 8003fb6:	f7ff ffdb 	bl	8003f70 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
 8003fba:	480b      	ldr	r0, [pc, #44]	; (8003fe8 <_factory_init+0x68>)
 8003fbc:	f7ff ffd8 	bl	8003f70 <dyn_list_init>
#endif
}
 8003fc0:	bd08      	pop	{r3, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000b44 	.word	0x20000b44
 8003fc8:	20000b54 	.word	0x20000b54
 8003fcc:	08003f31 	.word	0x08003f31
 8003fd0:	20000b58 	.word	0x20000b58
 8003fd4:	20000b68 	.word	0x20000b68
 8003fd8:	20000b6c 	.word	0x20000b6c
 8003fdc:	20000b70 	.word	0x20000b70
 8003fe0:	20000b80 	.word	0x20000b80
 8003fe4:	20000b84 	.word	0x20000b84
 8003fe8:	20000b88 	.word	0x20000b88
 8003fec:	00000000 	.word	0x00000000

08003ff0 <port_lock.lto_priv.150>:
static inline void port_lock(void) {
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
}
 8003ffc:	b002      	add	sp, #8
 8003ffe:	4770      	bx	lr

08004000 <port_unlock.lto_priv.126>:
static inline void port_unlock(void) {
 8004000:	b082      	sub	sp, #8
 8004002:	2300      	movs	r3, #0
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	9b01      	ldr	r3, [sp, #4]
 8004008:	f383 8811 	msr	BASEPRI, r3
}
 800400c:	b002      	add	sp, #8
 800400e:	4770      	bx	lr

08004010 <port_lock_from_isr.lto_priv.102>:
static inline void port_lock_from_isr(void) {
 8004010:	b508      	push	{r3, lr}
  port_lock();
 8004012:	f7ff ffed 	bl	8003ff0 <port_lock.lto_priv.150>
}
 8004016:	bd08      	pop	{r3, pc}
	...

08004020 <port_unlock_from_isr.lto_priv.95>:
static inline void port_unlock_from_isr(void) {
 8004020:	b508      	push	{r3, lr}
  port_unlock();
 8004022:	f7ff ffed 	bl	8004000 <port_unlock.lto_priv.126>
}
 8004026:	bd08      	pop	{r3, pc}
	...

08004030 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 8004030:	b500      	push	{lr}
 8004032:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004034:	f3ef 8309 	mrs	r3, PSP
 8004038:	9301      	str	r3, [sp, #4]
  return(result);
 800403a:	9b01      	ldr	r3, [sp, #4]
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
#endif

  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();
 800403c:	9303      	str	r3, [sp, #12]

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800403e:	9b03      	ldr	r3, [sp, #12]
 8004040:	3320      	adds	r3, #32
 8004042:	9303      	str	r3, [sp, #12]

  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004048:	9b02      	ldr	r3, [sp, #8]
 800404a:	f383 8809 	msr	PSP, r3

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
 800404e:	f7ff ffe7 	bl	8004020 <port_unlock_from_isr.lto_priv.95>
}
 8004052:	b005      	add	sp, #20
 8004054:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004060 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 8004060:	b500      	push	{lr}
 8004062:	b085      	sub	sp, #20

  port_lock_from_isr();
 8004064:	f7ff ffd4 	bl	8004010 <port_lock_from_isr.lto_priv.102>
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8004068:	4b14      	ldr	r3, [pc, #80]	; (80040bc <_port_irq_epilogue+0x5c>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01d      	beq.n	80040b0 <_port_irq_epilogue+0x50>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004074:	f3ef 8309 	mrs	r3, PSP
 8004078:	9301      	str	r3, [sp, #4]
  return(result);
 800407a:	9b01      	ldr	r3, [sp, #4]
      /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
      (void) __get_FPSCR();
#endif

    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();
 800407c:	9303      	str	r3, [sp, #12]

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	3b20      	subs	r3, #32
 8004082:	9303      	str	r3, [sp, #12]

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800408a:	61da      	str	r2, [r3, #28]
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
#endif

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004090:	9b02      	ldr	r3, [sp, #8]
 8004092:	f383 8809 	msr	PSP, r3

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8004096:	f7ff fa8b 	bl	80035b0 <chSchIsPreemptionRequired>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <_port_irq_epilogue+0x48>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80040a0:	9b03      	ldr	r3, [sp, #12]
 80040a2:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <_port_irq_epilogue+0x60>)
 80040a4:	619a      	str	r2, [r3, #24]
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80040a6:	e005      	b.n	80040b4 <_port_irq_epilogue+0x54>
 80040a8:	9b03      	ldr	r3, [sp, #12]
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <_port_irq_epilogue+0x64>)
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	e001      	b.n	80040b4 <_port_irq_epilogue+0x54>

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
 80040b0:	f7ff ffb6 	bl	8004020 <port_unlock_from_isr.lto_priv.95>
}
 80040b4:	b005      	add	sp, #20
 80040b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80040ba:	bf00      	nop
 80040bc:	e000ed00 	.word	0xe000ed00
 80040c0:	08000301 	.word	0x08000301
 80040c4:	08000304 	.word	0x08000304
	...

080040d0 <port_lock.lto_priv.151>:
static inline void port_lock(void) {
 80040d0:	b082      	sub	sp, #8
 80040d2:	2320      	movs	r3, #32
 80040d4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	f383 8811 	msr	BASEPRI, r3
}
 80040dc:	b002      	add	sp, #8
 80040de:	4770      	bx	lr

080040e0 <port_unlock.lto_priv.127>:
static inline void port_unlock(void) {
 80040e0:	b082      	sub	sp, #8
 80040e2:	2300      	movs	r3, #0
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	9b01      	ldr	r3, [sp, #4]
 80040e8:	f383 8811 	msr	BASEPRI, r3
}
 80040ec:	b002      	add	sp, #8
 80040ee:	4770      	bx	lr

080040f0 <port_lock_from_isr.lto_priv.103>:
static inline void port_lock_from_isr(void) {
 80040f0:	b508      	push	{r3, lr}
  port_lock();
 80040f2:	f7ff ffed 	bl	80040d0 <port_lock.lto_priv.151>
}
 80040f6:	bd08      	pop	{r3, pc}
	...

08004100 <port_unlock_from_isr.lto_priv.96>:
static inline void port_unlock_from_isr(void) {
 8004100:	b508      	push	{r3, lr}
  port_unlock();
 8004102:	f7ff ffed 	bl	80040e0 <port_unlock.lto_priv.127>
}
 8004106:	bd08      	pop	{r3, pc}
	...

08004110 <chSysLock.lto_priv.89>:
static inline void chSysLock(void) {
 8004110:	b508      	push	{r3, lr}
  port_lock();
 8004112:	f7ff ffdd 	bl	80040d0 <port_lock.lto_priv.151>
}
 8004116:	bd08      	pop	{r3, pc}
	...

08004120 <chSysUnlock.lto_priv.70>:
static inline void chSysUnlock(void) {
 8004120:	b508      	push	{r3, lr}
  port_unlock();
 8004122:	f7ff ffdd 	bl	80040e0 <port_unlock.lto_priv.127>
}
 8004126:	bd08      	pop	{r3, pc}
	...

08004130 <chSysLockFromISR.lto_priv.51>:
static inline void chSysLockFromISR(void) {
 8004130:	b508      	push	{r3, lr}
  port_lock_from_isr();
 8004132:	f7ff ffdd 	bl	80040f0 <port_lock_from_isr.lto_priv.103>
}
 8004136:	bd08      	pop	{r3, pc}
	...

08004140 <chSysUnlockFromISR.lto_priv.45>:
static inline void chSysUnlockFromISR(void) {
 8004140:	b508      	push	{r3, lr}
  port_unlock_from_isr();
 8004142:	f7ff ffdd 	bl	8004100 <port_unlock_from_isr.lto_priv.96>
}
 8004146:	bd08      	pop	{r3, pc}
	...

08004150 <chEvtObjectInit.lto_priv.39>:
static inline void chEvtObjectInit(event_source_t *esp) {
 8004150:	b082      	sub	sp, #8
 8004152:	9001      	str	r0, [sp, #4]
  esp->next = (event_listener_t *)esp;
 8004154:	9b01      	ldr	r3, [sp, #4]
 8004156:	9a01      	ldr	r2, [sp, #4]
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	b002      	add	sp, #8
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <chEvtRegisterMask>:
 *
 * @api
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {
 8004160:	b500      	push	{lr}
 8004162:	b085      	sub	sp, #20
 8004164:	9003      	str	r0, [sp, #12]
 8004166:	9102      	str	r1, [sp, #8]
 8004168:	9201      	str	r2, [sp, #4]

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	9a01      	ldr	r2, [sp, #4]
 8004170:	9902      	ldr	r1, [sp, #8]
 8004172:	9803      	ldr	r0, [sp, #12]
 8004174:	f7ff fd64 	bl	8003c40 <chEvtRegisterMaskWithFlags>
}
 8004178:	b005      	add	sp, #20
 800417a:	f85d fb04 	ldr.w	pc, [sp], #4
 800417e:	bf00      	nop

08004180 <chEvtRegister>:
 *
 * @api
 */
static inline void chEvtRegister(event_source_t *esp,
                                 event_listener_t *elp,
                                 eventid_t event) {
 8004180:	b500      	push	{lr}
 8004182:	b085      	sub	sp, #20
 8004184:	9003      	str	r0, [sp, #12]
 8004186:	9102      	str	r1, [sp, #8]
 8004188:	9201      	str	r2, [sp, #4]

  chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	461a      	mov	r2, r3
 8004194:	9902      	ldr	r1, [sp, #8]
 8004196:	9803      	ldr	r0, [sp, #12]
 8004198:	f7ff ffe2 	bl	8004160 <chEvtRegisterMask>
}
 800419c:	b005      	add	sp, #20
 800419e:	f85d fb04 	ldr.w	pc, [sp], #4
 80041a2:	bf00      	nop
	...

080041b0 <osalSysLock.lto_priv.37>:
static inline void osalSysLock(void) {
 80041b0:	b508      	push	{r3, lr}
  chSysLock();
 80041b2:	f7ff ffad 	bl	8004110 <chSysLock.lto_priv.89>
}
 80041b6:	bd08      	pop	{r3, pc}
	...

080041c0 <osalSysUnlock.lto_priv.31>:
static inline void osalSysUnlock(void) {
 80041c0:	b508      	push	{r3, lr}
  chSysUnlock();
 80041c2:	f7ff ffad 	bl	8004120 <chSysUnlock.lto_priv.70>
}
 80041c6:	bd08      	pop	{r3, pc}
	...

080041d0 <osalSysLockFromISR.lto_priv.25>:
static inline void osalSysLockFromISR(void) {
 80041d0:	b508      	push	{r3, lr}
  chSysLockFromISR();
 80041d2:	f7ff ffad 	bl	8004130 <chSysLockFromISR.lto_priv.51>
}
 80041d6:	bd08      	pop	{r3, pc}
	...

080041e0 <osalSysUnlockFromISR.lto_priv.21>:
static inline void osalSysUnlockFromISR(void) {
 80041e0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
 80041e2:	f7ff ffad 	bl	8004140 <chSysUnlockFromISR.lto_priv.45>
}
 80041e6:	bd08      	pop	{r3, pc}
	...

080041f0 <osalThreadSleep>:
static inline void osalThreadSleep(sysinterval_t delay) {
 80041f0:	b500      	push	{lr}
 80041f2:	b083      	sub	sp, #12
 80041f4:	9001      	str	r0, [sp, #4]
  chThdSleep(delay);
 80041f6:	9801      	ldr	r0, [sp, #4]
 80041f8:	f7ff fbb2 	bl	8003960 <chThdSleep>
}
 80041fc:	b003      	add	sp, #12
 80041fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8004202:	bf00      	nop
	...

08004210 <osalEventObjectInit.lto_priv.17>:
static inline void osalEventObjectInit(event_source_t *esp) {
 8004210:	b500      	push	{lr}
 8004212:	b083      	sub	sp, #12
 8004214:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
 8004216:	9801      	ldr	r0, [sp, #4]
 8004218:	f7ff ff9a 	bl	8004150 <chEvtObjectInit.lto_priv.39>
}
 800421c:	b003      	add	sp, #12
 800421e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004222:	bf00      	nop
	...

08004230 <osalEventBroadcastFlagsI.lto_priv.15>:
                                            eventflags_t flags) {
 8004230:	b500      	push	{lr}
 8004232:	b083      	sub	sp, #12
 8004234:	9001      	str	r0, [sp, #4]
 8004236:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
 8004238:	9900      	ldr	r1, [sp, #0]
 800423a:	9801      	ldr	r0, [sp, #4]
 800423c:	f7ff fd28 	bl	8003c90 <chEvtBroadcastFlagsI>
}
 8004240:	b003      	add	sp, #12
 8004242:	f85d fb04 	ldr.w	pc, [sp], #4
 8004246:	bf00      	nop
	...

08004250 <osalMutexObjectInit.lto_priv.12>:
static inline void osalMutexObjectInit(mutex_t *mp) {
 8004250:	b500      	push	{lr}
 8004252:	b083      	sub	sp, #12
 8004254:	9001      	str	r0, [sp, #4]
  chMtxObjectInit(mp);
 8004256:	9801      	ldr	r0, [sp, #4]
 8004258:	f7ff fcc2 	bl	8003be0 <chMtxObjectInit>
}
 800425c:	b003      	add	sp, #12
 800425e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004262:	bf00      	nop
	...

08004270 <nrf24l01GetStatus>:
 *
 * @param[in] spip      pointer to the SPI interface
 *
 * @return              the status register value
 */
static uint8_t nrf24l01GetStatus(SPIDriver *spip) {
 8004270:	b500      	push	{lr}
 8004272:	b085      	sub	sp, #20
 8004274:	9001      	str	r0, [sp, #4]
  uint8_t txbuf = NRF24L01_CMD_NOP;
 8004276:	23ff      	movs	r3, #255	; 0xff
 8004278:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t status;
  spiSelect(spip);
 800427c:	9801      	ldr	r0, [sp, #4]
 800427e:	f7fc ff4f 	bl	8001120 <spiSelect>
  spiExchange(spip, 1, &txbuf, &status);
 8004282:	f10d 030e 	add.w	r3, sp, #14
 8004286:	f10d 020f 	add.w	r2, sp, #15
 800428a:	2101      	movs	r1, #1
 800428c:	9801      	ldr	r0, [sp, #4]
 800428e:	f7fc ff77 	bl	8001180 <spiExchange>
  spiUnselect(spip);
 8004292:	9801      	ldr	r0, [sp, #4]
 8004294:	f7fc ff5c 	bl	8001150 <spiUnselect>
  return status;
 8004298:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
 800429c:	4618      	mov	r0, r3
 800429e:	b005      	add	sp, #20
 80042a0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080042b0 <nrf24l01ReadRegister>:
 * @param[out] pvalue   pointer to a data buffer
 *
 * @return              the status register value
 */
static uint8_t nrf24l01ReadRegister(SPIDriver *spip, uint8_t reg,
                                       uint8_t* pvalue) {
 80042b0:	b500      	push	{lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	9003      	str	r0, [sp, #12]
 80042b6:	460b      	mov	r3, r1
 80042b8:	9201      	str	r2, [sp, #4]
 80042ba:	f88d 300b 	strb.w	r3, [sp, #11]
  uint8_t txbuf = (NRF24L01_CMD_READ | reg);
 80042be:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80042c2:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t status = 0xFF;
 80042c6:	23ff      	movs	r3, #255	; 0xff
 80042c8:	f88d 3016 	strb.w	r3, [sp, #22]
  spiSelect(spip);
 80042cc:	9803      	ldr	r0, [sp, #12]
 80042ce:	f7fc ff27 	bl	8001120 <spiSelect>
  spiExchange(spip, 1, &txbuf, &status);
 80042d2:	f10d 0316 	add.w	r3, sp, #22
 80042d6:	f10d 0217 	add.w	r2, sp, #23
 80042da:	2101      	movs	r1, #1
 80042dc:	9803      	ldr	r0, [sp, #12]
 80042de:	f7fc ff4f 	bl	8001180 <spiExchange>
  spiReceive(spip, 1, pvalue);
 80042e2:	9a01      	ldr	r2, [sp, #4]
 80042e4:	2101      	movs	r1, #1
 80042e6:	9803      	ldr	r0, [sp, #12]
 80042e8:	f7fc ff6a 	bl	80011c0 <spiReceive>
  spiUnselect(spip);
 80042ec:	9803      	ldr	r0, [sp, #12]
 80042ee:	f7fc ff2f 	bl	8001150 <spiUnselect>
  return status;
 80042f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	b007      	add	sp, #28
 80042fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80042fe:	bf00      	nop

08004300 <nrf24l01WriteRegister>:
 * @param[in] value     data value
 *
 * @return              the status register value
 */
static uint8_t nrf24l01WriteRegister(SPIDriver *spip, uint8_t reg,
                                        uint8_t value) {
 8004300:	b500      	push	{lr}
 8004302:	b085      	sub	sp, #20
 8004304:	9001      	str	r0, [sp, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	f88d 3003 	strb.w	r3, [sp, #3]
 800430c:	4613      	mov	r3, r2
 800430e:	f88d 3002 	strb.w	r3, [sp, #2]

  uint8_t txbuf[2] = {(NRF24L01_CMD_WRITE | reg), value};
 8004312:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004316:	f043 0320 	orr.w	r3, r3, #32
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f88d 300c 	strb.w	r3, [sp, #12]
 8004320:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004324:	f88d 300d 	strb.w	r3, [sp, #13]
  uint8_t rxbuf[2] = {0xFF, 0xFF};
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <nrf24l01WriteRegister+0xe4>)
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f8ad 3008 	strh.w	r3, [sp, #8]
  switch (reg) {
 8004330:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004334:	2b1d      	cmp	r3, #29
 8004336:	d83f      	bhi.n	80043b8 <nrf24l01WriteRegister+0xb8>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <nrf24l01WriteRegister+0x40>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	080043c1 	.word	0x080043c1
 8004344:	080043c1 	.word	0x080043c1
 8004348:	080043c1 	.word	0x080043c1
 800434c:	080043c1 	.word	0x080043c1
 8004350:	080043c1 	.word	0x080043c1
 8004354:	080043c1 	.word	0x080043c1
 8004358:	080043c1 	.word	0x080043c1
 800435c:	080043c1 	.word	0x080043c1
 8004360:	080043bd 	.word	0x080043bd
 8004364:	080043bd 	.word	0x080043bd
 8004368:	080043bd 	.word	0x080043bd
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043bd 	.word	0x080043bd
 8004374:	080043bd 	.word	0x080043bd
 8004378:	080043bd 	.word	0x080043bd
 800437c:	080043bd 	.word	0x080043bd
 8004380:	080043bd 	.word	0x080043bd
 8004384:	080043c1 	.word	0x080043c1
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043c1 	.word	0x080043c1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043b9 	.word	0x080043b9
 80043a4:	080043b9 	.word	0x080043b9
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043b9 	.word	0x080043b9
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043c1 	.word	0x080043c1
    default:
      /* Reserved register must not be written, according to the datasheet
       * this could permanently damage the device.
       */
      osalDbgAssert(FALSE, "nrf24l01WriteRegister(), reserved register");
      return 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e00f      	b.n	80043dc <nrf24l01WriteRegister+0xdc>
    case NRF24L01_AD_RX_ADDR_P5:
    case NRF24L01_AD_TX_ADDR:
    /* Read only or addresses registers cannot be written,
     * the command is ignored.
     */
      return 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	e00d      	b.n	80043dc <nrf24l01WriteRegister+0xdc>
    case NRF24L01_AD_RX_PW_P4:
    case NRF24L01_AD_RX_PW_P5:
    case NRF24L01_AD_FIFO_STATUS:
    case NRF24L01_AD_DYNPD:
    case NRF24L01_AD_FEATURE:
      spiSelect(spip);
 80043c0:	9801      	ldr	r0, [sp, #4]
 80043c2:	f7fc fead 	bl	8001120 <spiSelect>
      spiExchange(spip, 2, txbuf, rxbuf);
 80043c6:	ab02      	add	r3, sp, #8
 80043c8:	aa03      	add	r2, sp, #12
 80043ca:	2102      	movs	r1, #2
 80043cc:	9801      	ldr	r0, [sp, #4]
 80043ce:	f7fc fed7 	bl	8001180 <spiExchange>
      spiUnselect(spip);
 80043d2:	9801      	ldr	r0, [sp, #4]
 80043d4:	f7fc febc 	bl	8001150 <spiUnselect>
      return rxbuf[0];
 80043d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	b005      	add	sp, #20
 80043e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80043e4:	08004bc0 	.word	0x08004bc0
	...

080043f0 <nrf24l01WriteAddress>:
 * @param[in] addlen    address len
 *
 * @return              the status register value
 */
static uint8_t nrf24l01WriteAddress(SPIDriver *spip, uint8_t reg,
                                       uint8_t *pvalue, uint8_t addlen) {
 80043f0:	b500      	push	{lr}
 80043f2:	b08b      	sub	sp, #44	; 0x2c
 80043f4:	9003      	str	r0, [sp, #12]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	460b      	mov	r3, r1
 80043fc:	f88d 300b 	strb.w	r3, [sp, #11]
 8004400:	4613      	mov	r3, r2
 8004402:	f88d 300a 	strb.w	r3, [sp, #10]

  uint8_t txbuf[NRF24L01_MAX_ADD_LENGHT + 1];
  uint8_t rxbuf[NRF24L01_MAX_ADD_LENGHT + 1];
  unsigned i;

  if(addlen > NRF24L01_MAX_ADD_LENGHT) {
 8004406:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d901      	bls.n	8004412 <nrf24l01WriteAddress+0x22>
    osalDbgAssert(FALSE, "nrf24l01WriteAddress(), wrong address length");
    return 0;
 800440e:	2300      	movs	r3, #0
 8004410:	e07b      	b.n	800450a <nrf24l01WriteAddress+0x11a>
  }
  txbuf[0] = (NRF24L01_CMD_WRITE | reg);
 8004412:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004416:	f043 0320 	orr.w	r3, r3, #32
 800441a:	b2db      	uxtb	r3, r3
 800441c:	f88d 301c 	strb.w	r3, [sp, #28]
  rxbuf[0] = 0xFF;
 8004420:	23ff      	movs	r3, #255	; 0xff
 8004422:	f88d 3014 	strb.w	r3, [sp, #20]
  for(i = 1; i <= addlen; i++) {
 8004426:	2301      	movs	r3, #1
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	e011      	b.n	8004450 <nrf24l01WriteAddress+0x60>
    txbuf[i] = *(pvalue + (i - 1));
 800442c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442e:	3b01      	subs	r3, #1
 8004430:	9a01      	ldr	r2, [sp, #4]
 8004432:	4413      	add	r3, r2
 8004434:	7819      	ldrb	r1, [r3, #0]
 8004436:	aa07      	add	r2, sp, #28
 8004438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443a:	4413      	add	r3, r2
 800443c:	460a      	mov	r2, r1
 800443e:	701a      	strb	r2, [r3, #0]
    rxbuf[i] = 0xFF;
 8004440:	aa05      	add	r2, sp, #20
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	4413      	add	r3, r2
 8004446:	22ff      	movs	r2, #255	; 0xff
 8004448:	701a      	strb	r2, [r3, #0]
  for(i = 1; i <= addlen; i++) {
 800444a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800444c:	3301      	adds	r3, #1
 800444e:	9309      	str	r3, [sp, #36]	; 0x24
 8004450:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8004454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004456:	429a      	cmp	r2, r3
 8004458:	d9e8      	bls.n	800442c <nrf24l01WriteAddress+0x3c>
  }
  switch (reg) {
 800445a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800445e:	2b1d      	cmp	r3, #29
 8004460:	d83e      	bhi.n	80044e0 <nrf24l01WriteAddress+0xf0>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <nrf24l01WriteAddress+0x78>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	080044e5 	.word	0x080044e5
 800446c:	080044e5 	.word	0x080044e5
 8004470:	080044e5 	.word	0x080044e5
 8004474:	080044e5 	.word	0x080044e5
 8004478:	080044e5 	.word	0x080044e5
 800447c:	080044e5 	.word	0x080044e5
 8004480:	080044e5 	.word	0x080044e5
 8004484:	080044e5 	.word	0x080044e5
 8004488:	080044e5 	.word	0x080044e5
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044e9 	.word	0x080044e9
 80044a0:	080044e9 	.word	0x080044e9
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044e9 	.word	0x080044e9
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044e5 	.word	0x080044e5
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	080044e5 	.word	0x080044e5
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e1 	.word	0x080044e1
 80044d0:	080044e1 	.word	0x080044e1
 80044d4:	080044e1 	.word	0x080044e1
 80044d8:	080044e5 	.word	0x080044e5
 80044dc:	080044e5 	.word	0x080044e5
    default:
      /* Reserved register must not be written, according to the datasheet
       * this could permanently damage the device.
       */
      osalDbgAssert(FALSE, "nrf24l01WriteAddress(), reserved register");
      return 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e012      	b.n	800450a <nrf24l01WriteAddress+0x11a>
    case NRF24L01_AD_RX_PW_P5:
    case NRF24L01_AD_FIFO_STATUS:
    case NRF24L01_AD_DYNPD:
    case NRF24L01_AD_FEATURE:
    /* Not address registers cannot be written, the command is ignored.*/
      return 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e010      	b.n	800450a <nrf24l01WriteAddress+0x11a>
    case NRF24L01_AD_RX_ADDR_P2:
    case NRF24L01_AD_RX_ADDR_P3:
    case NRF24L01_AD_RX_ADDR_P4:
    case NRF24L01_AD_RX_ADDR_P5:
    case NRF24L01_AD_TX_ADDR:
      spiSelect(spip);
 80044e8:	9803      	ldr	r0, [sp, #12]
 80044ea:	f7fc fe19 	bl	8001120 <spiSelect>
      spiExchange(spip, addlen + 1, txbuf, rxbuf);
 80044ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80044f2:	3301      	adds	r3, #1
 80044f4:	4619      	mov	r1, r3
 80044f6:	ab05      	add	r3, sp, #20
 80044f8:	aa07      	add	r2, sp, #28
 80044fa:	9803      	ldr	r0, [sp, #12]
 80044fc:	f7fc fe40 	bl	8001180 <spiExchange>
      spiUnselect(spip);
 8004500:	9803      	ldr	r0, [sp, #12]
 8004502:	f7fc fe25 	bl	8001150 <spiUnselect>
      return rxbuf[0];
 8004506:	f89d 3014 	ldrb.w	r3, [sp, #20]
  }
}
 800450a:	4618      	mov	r0, r3
 800450c:	b00b      	add	sp, #44	; 0x2c
 800450e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004512:	bf00      	nop
	...

08004520 <nrf24l01GetRxPl>:
 * @param[in] rxbuf     pointer to a buffer
 *
 * @return              the status register value
 */
static uint8_t nrf24l01GetRxPl(SPIDriver *spip, uint8_t paylen,
                                  uint8_t* rxbuf) {
 8004520:	b500      	push	{lr}
 8004522:	b087      	sub	sp, #28
 8004524:	9003      	str	r0, [sp, #12]
 8004526:	460b      	mov	r3, r1
 8004528:	9201      	str	r2, [sp, #4]
 800452a:	f88d 300b 	strb.w	r3, [sp, #11]

  uint8_t txbuf = NRF24L01_CMD_R_RX_PAYLOAD;
 800452e:	2361      	movs	r3, #97	; 0x61
 8004530:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t status;
  if(paylen > NRF24L01_MAX_PL_LENGHT) {
 8004534:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8004538:	2b20      	cmp	r3, #32
 800453a:	d901      	bls.n	8004540 <nrf24l01GetRxPl+0x20>
    return 0;
 800453c:	2300      	movs	r3, #0
 800453e:	e016      	b.n	800456e <nrf24l01GetRxPl+0x4e>
  }
  spiSelect(spip);
 8004540:	9803      	ldr	r0, [sp, #12]
 8004542:	f7fc fded 	bl	8001120 <spiSelect>
  spiExchange(spip, 1, &txbuf, &status);
 8004546:	f10d 0316 	add.w	r3, sp, #22
 800454a:	f10d 0217 	add.w	r2, sp, #23
 800454e:	2101      	movs	r1, #1
 8004550:	9803      	ldr	r0, [sp, #12]
 8004552:	f7fc fe15 	bl	8001180 <spiExchange>
  spiReceive(spip, paylen, rxbuf);
 8004556:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800455a:	9a01      	ldr	r2, [sp, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	9803      	ldr	r0, [sp, #12]
 8004560:	f7fc fe2e 	bl	80011c0 <spiReceive>
  spiUnselect(spip);
 8004564:	9803      	ldr	r0, [sp, #12]
 8004566:	f7fc fdf3 	bl	8001150 <spiUnselect>
  return status;
 800456a:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
 800456e:	4618      	mov	r0, r3
 8004570:	b007      	add	sp, #28
 8004572:	f85d fb04 	ldr.w	pc, [sp], #4
 8004576:	bf00      	nop
	...

08004580 <nrf24l01FlushRx>:
 *
 * @param[in] spip      pointer to the SPI interface
 *
 * @return              the status register value
 */
static uint8_t nrf24l01FlushRx(SPIDriver *spip) {
 8004580:	b500      	push	{lr}
 8004582:	b085      	sub	sp, #20
 8004584:	9001      	str	r0, [sp, #4]

  uint8_t txbuf = NRF24L01_CMD_FLUSH_RX;
 8004586:	23e2      	movs	r3, #226	; 0xe2
 8004588:	f88d 300f 	strb.w	r3, [sp, #15]
  uint8_t status;
  spiSelect(spip);
 800458c:	9801      	ldr	r0, [sp, #4]
 800458e:	f7fc fdc7 	bl	8001120 <spiSelect>
  spiExchange(spip, 1, &txbuf, &status);
 8004592:	f10d 030e 	add.w	r3, sp, #14
 8004596:	f10d 020f 	add.w	r2, sp, #15
 800459a:	2101      	movs	r1, #1
 800459c:	9801      	ldr	r0, [sp, #4]
 800459e:	f7fc fdef 	bl	8001180 <spiExchange>
  spiUnselect(spip);
 80045a2:	9801      	ldr	r0, [sp, #4]
 80045a4:	f7fc fdd4 	bl	8001150 <spiUnselect>
  return status;
 80045a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	b005      	add	sp, #20
 80045b0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080045c0 <nrf24l01Activate>:
 *
 * @param[in] spip      pointer to the SPI interface
 *
 * @return              the status register value
 */
static uint8_t nrf24l01Activate(SPIDriver *spip) {
 80045c0:	b500      	push	{lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	9001      	str	r0, [sp, #4]

  uint8_t txbuf[2] = {NRF24L01_CMD_FLUSH_RX, ACTIVATE};
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <nrf24l01Activate+0x34>)
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t rxbuf[2];
  spiSelect(spip);
 80045ce:	9801      	ldr	r0, [sp, #4]
 80045d0:	f7fc fda6 	bl	8001120 <spiSelect>
  spiExchange(spip, 2, txbuf, rxbuf);
 80045d4:	ab02      	add	r3, sp, #8
 80045d6:	aa03      	add	r2, sp, #12
 80045d8:	2102      	movs	r1, #2
 80045da:	9801      	ldr	r0, [sp, #4]
 80045dc:	f7fc fdd0 	bl	8001180 <spiExchange>
  spiUnselect(spip);
 80045e0:	9801      	ldr	r0, [sp, #4]
 80045e2:	f7fc fdb5 	bl	8001150 <spiUnselect>
  return rxbuf[0];
 80045e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	b005      	add	sp, #20
 80045ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80045f2:	bf00      	nop
 80045f4:	08004bc4 	.word	0x08004bc4
	...

08004600 <nrf24l01ReadRxPlWid>:
 * @param[in] spip      pointer to the SPI interface
 * @param[in] ppaylen   pointer to the payload length variable
 *
 * @return              the status register value
 */
static uint8_t nrf24l01ReadRxPlWid(SPIDriver *spip, uint8_t *ppaylen) {
 8004600:	b500      	push	{lr}
 8004602:	b085      	sub	sp, #20
 8004604:	9001      	str	r0, [sp, #4]
 8004606:	9100      	str	r1, [sp, #0]

  uint8_t txbuf[2] = {NRF24L01_CMD_R_RX_PL_WID, 0xFF};
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <nrf24l01ReadRxPlWid+0x3c>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t rxbuf[2];
  spiSelect(spip);
 8004610:	9801      	ldr	r0, [sp, #4]
 8004612:	f7fc fd85 	bl	8001120 <spiSelect>
  spiExchange(spip, 2, txbuf, rxbuf);
 8004616:	ab02      	add	r3, sp, #8
 8004618:	aa03      	add	r2, sp, #12
 800461a:	2102      	movs	r1, #2
 800461c:	9801      	ldr	r0, [sp, #4]
 800461e:	f7fc fdaf 	bl	8001180 <spiExchange>
  spiUnselect(spip);
 8004622:	9801      	ldr	r0, [sp, #4]
 8004624:	f7fc fd94 	bl	8001150 <spiUnselect>
  *ppaylen = rxbuf[1];
 8004628:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800462c:	9b00      	ldr	r3, [sp, #0]
 800462e:	701a      	strb	r2, [r3, #0]
  return rxbuf[0];
 8004630:	f89d 3008 	ldrb.w	r3, [sp, #8]
}
 8004634:	4618      	mov	r0, r3
 8004636:	b005      	add	sp, #20
 8004638:	f85d fb04 	ldr.w	pc, [sp], #4
 800463c:	08004bc8 	.word	0x08004bc8

08004640 <nrf24l01IRQHandler>:
/**
 * @brief   This is the callback used by EXT on interrupt request.
 *
 * @notapi
 */
static void nrf24l01IRQHandler(void *arg) {
 8004640:	b500      	push	{lr}
 8004642:	b083      	sub	sp, #12
 8004644:	9001      	str	r0, [sp, #4]

  (void) arg;
  osalSysLockFromISR();
 8004646:	f7ff fdc3 	bl	80041d0 <osalSysLockFromISR.lto_priv.25>
  cbcounter++;
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <nrf24l01IRQHandler+0x28>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	4a05      	ldr	r2, [pc, #20]	; (8004668 <nrf24l01IRQHandler+0x28>)
 8004652:	6013      	str	r3, [r2, #0]
  osalEventBroadcastFlagsI(&RFD1.irq_event, RF_GENERIC_IRQ);
 8004654:	2101      	movs	r1, #1
 8004656:	4805      	ldr	r0, [pc, #20]	; (800466c <nrf24l01IRQHandler+0x2c>)
 8004658:	f7ff fdea 	bl	8004230 <osalEventBroadcastFlagsI.lto_priv.15>
  osalSysUnlockFromISR();
 800465c:	f7ff fdc0 	bl	80041e0 <osalSysUnlockFromISR.lto_priv.21>
}
 8004660:	b003      	add	sp, #12
 8004662:	f85d fb04 	ldr.w	pc, [sp], #4
 8004666:	bf00      	nop
 8004668:	20000bbc 	.word	0x20000bbc
 800466c:	20000b94 	.word	0x20000b94

08004670 <rfInit>:
/**
 * @brief   RF Complex Driver initialization.
 *
 * @init
 */
void rfInit(void) {
 8004670:	b508      	push	{r3, lr}

  rfObjectInit(&RFD1);
 8004672:	4802      	ldr	r0, [pc, #8]	; (800467c <rfInit+0xc>)
 8004674:	f000 f804 	bl	8004680 <rfObjectInit>
}
 8004678:	bd08      	pop	{r3, pc}
 800467a:	bf00      	nop
 800467c:	20000b8c 	.word	0x20000b8c

08004680 <rfObjectInit>:
 *
 * @param[out] rfp         pointer to the @p RFDriver object
 *
 * @init
 */
void rfObjectInit(RFDriver *rfp){
 8004680:	b500      	push	{lr}
 8004682:	b083      	sub	sp, #12
 8004684:	9001      	str	r0, [sp, #4]

  rfp->state  = RF_STOP;
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
  rfp->config = NULL;
 800468c:	9b01      	ldr	r3, [sp, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	605a      	str	r2, [r3, #4]
  osalEventObjectInit(&rfp->irq_event);
 8004692:	9b01      	ldr	r3, [sp, #4]
 8004694:	3308      	adds	r3, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fdba 	bl	8004210 <osalEventObjectInit.lto_priv.17>
#if RF_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&rfp->mutex);
 800469c:	9b01      	ldr	r3, [sp, #4]
 800469e:	3320      	adds	r3, #32
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fdd5 	bl	8004250 <osalMutexObjectInit.lto_priv.12>
#endif
}
 80046a6:	b003      	add	sp, #12
 80046a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ac:	0000      	movs	r0, r0
	...

080046b0 <rfStart>:
 * @param[in] rfp   pointer to the @p RFDriver object
 * @param[in] config    pointer to the @p RFConfig object
 *
 * @api
 */
void rfStart(RFDriver *rfp, RFConfig *config) {
 80046b0:	b500      	push	{lr}
 80046b2:	b083      	sub	sp, #12
 80046b4:	9001      	str	r0, [sp, #4]
 80046b6:	9100      	str	r1, [sp, #0]

  osalDbgCheck((rfp != NULL) && (config != NULL));

  osalDbgAssert((rfp->state == RF_STOP) || (rfp->state == RF_READY),
              "rfStart(), invalid state");
  rfp->config = config;
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	9a00      	ldr	r2, [sp, #0]
 80046bc:	605a      	str	r2, [r3, #4]

  chEvtRegister(&rfp->irq_event, &rfp->el, 0);
 80046be:	9b01      	ldr	r3, [sp, #4]
 80046c0:	f103 0008 	add.w	r0, r3, #8
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	330c      	adds	r3, #12
 80046c8:	2200      	movs	r2, #0
 80046ca:	4619      	mov	r1, r3
 80046cc:	f7ff fd58 	bl	8004180 <chEvtRegister>
  spiStart(rfp->config->spip, rfp->config->spicfg);
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fc fd06 	bl	80010f0 <spiStart>

  palEnableLineEvent(rfp->config->line_irq, PAL_EVENT_MODE_FALLING_EDGE);
 80046e4:	f7ff fd64 	bl	80041b0 <osalSysLock.lto_priv.37>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 030f 	bic.w	r3, r3, #15
 80046f2:	4618      	mov	r0, r3
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	2202      	movs	r2, #2
 8004700:	4619      	mov	r1, r3
 8004702:	f7fd fc2d 	bl	8001f60 <_pal_lld_enablepadevent>
 8004706:	f7ff fd5b 	bl	80041c0 <osalSysUnlock.lto_priv.31>
  palSetLineCallback(rfp->config->line_irq, nrf24l01IRQHandler, NULL);
 800470a:	f7ff fd51 	bl	80041b0 <osalSysLock.lto_priv.37>
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	4945      	ldr	r1, [pc, #276]	; (800482c <rfStart+0x17c>)
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc fad1 	bl	8000cc0 <palSetLineCallbackI>
 800471e:	f7ff fd4f 	bl	80041c0 <osalSysUnlock.lto_priv.31>

  nrf24l01Reset(rfp->config->spip);
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2270      	movs	r2, #112	; 0x70
 800472a:	2107      	movs	r1, #7
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fde7 	bl	8004300 <nrf24l01WriteRegister>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_CONFIG,
 8004732:	9b01      	ldr	r3, [sp, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	220a      	movs	r2, #10
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fddf 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_CONFIG_PWR_UP | NRF24L01_DI_CONFIG_EN_CRC);
  osalThreadSleepMilliseconds(2);
 8004742:	2014      	movs	r0, #20
 8004744:	f7ff fd54 	bl	80041f0 <osalThreadSleep>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_EN_AA,
 8004748:	9b01      	ldr	r3, [sp, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	223f      	movs	r2, #63	; 0x3f
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fdd4 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_EN_AA);
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_EN_RXADDR,
 8004758:	9b01      	ldr	r3, [sp, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	223f      	movs	r2, #63	; 0x3f
 8004760:	2102      	movs	r1, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fdcc 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_EN_RXADDR);
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_RF_CH,
 8004768:	9b01      	ldr	r3, [sp, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6898      	ldr	r0, [r3, #8]
                        rfp->config->channel_freq);
 800476e:	9b01      	ldr	r3, [sp, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_RF_CH,
 8004772:	7cdb      	ldrb	r3, [r3, #19]
 8004774:	461a      	mov	r2, r3
 8004776:	2105      	movs	r1, #5
 8004778:	f7ff fdc2 	bl	8004300 <nrf24l01WriteRegister>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_SETUP_RETR,
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6898      	ldr	r0, [r3, #8]
                        rfp->config->auto_retr_count |
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	7c1a      	ldrb	r2, [r3, #16]
                        rfp->config->auto_retr_delay);
 8004788:	9b01      	ldr	r3, [sp, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	7c5b      	ldrb	r3, [r3, #17]
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_SETUP_RETR,
 800478e:	4313      	orrs	r3, r2
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	2104      	movs	r1, #4
 8004796:	f7ff fdb3 	bl	8004300 <nrf24l01WriteRegister>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_SETUP_AW,
 800479a:	9b01      	ldr	r3, [sp, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	6898      	ldr	r0, [r3, #8]
                        rfp->config->address_width);
 80047a0:	9b01      	ldr	r3, [sp, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	7c9b      	ldrb	r3, [r3, #18]
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_SETUP_AW,
 80047a6:	461a      	mov	r2, r3
 80047a8:	2103      	movs	r1, #3
 80047aa:	f7ff fda9 	bl	8004300 <nrf24l01WriteRegister>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_RF_SETUP,
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	6898      	ldr	r0, [r3, #8]
                        rfp->config->data_rate |
 80047b4:	9b01      	ldr	r3, [sp, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	7d1a      	ldrb	r2, [r3, #20]
                        rfp->config->out_pwr |
 80047ba:	9b01      	ldr	r3, [sp, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	7d5b      	ldrb	r3, [r3, #21]
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_RF_SETUP,
 80047c0:	4313      	orrs	r3, r2
 80047c2:	b2da      	uxtb	r2, r3
                        rfp->config->lna);
 80047c4:	9b01      	ldr	r3, [sp, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	7d9b      	ldrb	r3, [r3, #22]
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_RF_SETUP,
 80047ca:	4313      	orrs	r3, r2
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	2106      	movs	r1, #6
 80047d2:	f7ff fd95 	bl	8004300 <nrf24l01WriteRegister>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_FEATURE,
 80047d6:	9b01      	ldr	r3, [sp, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2204      	movs	r2, #4
 80047de:	211d      	movs	r1, #29
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fd8d 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_FEATURE_EN_DPL);
  nrf24l01Activate(rfp->config->spip);
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fee7 	bl	80045c0 <nrf24l01Activate>
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_DYNPD,
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	223f      	movs	r2, #63	; 0x3f
 80047fa:	211c      	movs	r1, #28
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fd7f 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_DYNPD);

  palClearLine(rfp->config->line_irq);
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	2201      	movs	r2, #1
 800480e:	409a      	lsls	r2, r3
 8004810:	9b01      	ldr	r3, [sp, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f023 030f 	bic.w	r3, r3, #15
 800481a:	b292      	uxth	r2, r2
 800481c:	835a      	strh	r2, [r3, #26]
  rfp->state = RF_READY;
 800481e:	9b01      	ldr	r3, [sp, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
}
 8004824:	b003      	add	sp, #12
 8004826:	f85d fb04 	ldr.w	pc, [sp], #4
 800482a:	bf00      	nop
 800482c:	08004641 	.word	0x08004641

08004830 <rfRxIsNonEmpty>:
 * @return               The operation result.
 * @retval TRUE          There is a packet.
 * @retval FALSE         RX FIFO is empty.
 * @api
 */
bool rfRxIsNonEmpty(RFDriver *rfp) {
 8004830:	b500      	push	{lr}
 8004832:	b085      	sub	sp, #20
 8004834:	9001      	str	r0, [sp, #4]

  uint8_t fifo_status;
    nrf24l01ReadRegister(rfp->config->spip,
 8004836:	9b01      	ldr	r3, [sp, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f10d 020f 	add.w	r2, sp, #15
 8004840:	2117      	movs	r1, #23
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff fd34 	bl	80042b0 <nrf24l01ReadRegister>
                         NRF24L01_AD_FIFO_STATUS, &fifo_status);
    return (!(fifo_status & NRF24L01_DI_FIFO_STATUS_RX_EMPTY));
 8004848:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
  return FALSE;
}
 800485a:	4618      	mov	r0, r3
 800485c:	b005      	add	sp, #20
 800485e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004862:	bf00      	nop
	...

08004870 <rfReceive>:
 * @retval RF_OK         The operation succeeds.
 * @retval RF_ERROR      Error during the transmission.
 * @api
 */
rf_msg_t rfReceive(RFDriver *rfp, uint32_t n, RFRxFrame *rxbuff,
                   systime_t time) {
 8004870:	b500      	push	{lr}
 8004872:	b087      	sub	sp, #28
 8004874:	9003      	str	r0, [sp, #12]
 8004876:	9102      	str	r1, [sp, #8]
 8004878:	9201      	str	r2, [sp, #4]
 800487a:	9300      	str	r3, [sp, #0]

  osalDbgCheck((rfp != NULL) && (rxbuff != NULL) && (n > 0));

  osalDbgAssert((rfp->state == RF_READY),
              "rfReceive(), invalid state");
  nrf24l01WriteRegister(rfp->config->spip, NRF24L01_AD_CONFIG,
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	220b      	movs	r2, #11
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fd3a 	bl	8004300 <nrf24l01WriteRegister>
                        NRF24L01_DI_CONFIG_PWR_UP |
                        NRF24L01_DI_CONFIG_EN_CRC |
                        NRF24L01_DI_CONFIG_PRIM_RX);
  nrf24l01WriteAddress(rfp->config->spip, NRF24L01_AD_TX_ADDR,
 800488c:	9b03      	ldr	r3, [sp, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	6898      	ldr	r0, [r3, #8]
                       rxbuff->rx_address, RF_ADDLEN);
 8004892:	9a01      	ldr	r2, [sp, #4]
  nrf24l01WriteAddress(rfp->config->spip, NRF24L01_AD_TX_ADDR,
 8004894:	2305      	movs	r3, #5
 8004896:	2110      	movs	r1, #16
 8004898:	f7ff fdaa 	bl	80043f0 <nrf24l01WriteAddress>
  nrf24l01WriteAddress(rfp->config->spip,
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	6898      	ldr	r0, [r3, #8]
                       NRF24L01_AD_RX_ADDR_P1,
                       rxbuff->rx_address, RF_ADDLEN);
 80048a2:	9a01      	ldr	r2, [sp, #4]
  nrf24l01WriteAddress(rfp->config->spip,
 80048a4:	2305      	movs	r3, #5
 80048a6:	210b      	movs	r1, #11
 80048a8:	f7ff fda2 	bl	80043f0 <nrf24l01WriteAddress>
  nrf24l01FlushRx(rfp->config->spip);
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fe64 	bl	8004580 <nrf24l01FlushRx>
  nrf24l01Reset(rfp->config->spip);
 80048b8:	9b03      	ldr	r3, [sp, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2270      	movs	r2, #112	; 0x70
 80048c0:	2107      	movs	r1, #7
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fd1c 	bl	8004300 <nrf24l01WriteRegister>
  cnt = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	9305      	str	r3, [sp, #20]
  rfp->state = RF_RX;
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
  palSetLine(rfp->config->line_ce);
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	9b03      	ldr	r3, [sp, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 030f 	bic.w	r3, r3, #15
 80048ea:	b292      	uxth	r2, r2
 80048ec:	831a      	strh	r2, [r3, #24]
 80048ee:	e07d      	b.n	80049ec <rfReceive+0x17c>
  while(cnt < n) {
    if(chEvtWaitOneTimeout(ALL_EVENTS, time) == 0) {
 80048f0:	9900      	ldr	r1, [sp, #0]
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295
 80048f6:	f7ff fa2b 	bl	8003d50 <chEvtWaitOneTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d112      	bne.n	8004926 <rfReceive+0xb6>
        rfp->state = RF_READY;
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
        palClearLine(rfp->config->line_ce);
 8004906:	9b03      	ldr	r3, [sp, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2201      	movs	r2, #1
 8004912:	409a      	lsls	r2, r3
 8004914:	9b03      	ldr	r3, [sp, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 030f 	bic.w	r3, r3, #15
 800491e:	b292      	uxth	r2, r2
 8004920:	835a      	strh	r2, [r3, #26]
        return RF_TIMEOUT;
 8004922:	2302      	movs	r3, #2
 8004924:	e079      	b.n	8004a1a <rfReceive+0x1aa>
    }
    status = nrf24l01GetStatus(rfp->config->spip);
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fc9f 	bl	8004270 <nrf24l01GetStatus>
 8004932:	4603      	mov	r3, r0
 8004934:	f88d 3013 	strb.w	r3, [sp, #19]
    if (((status & NRF24L01_DI_STATUS_RX_DR) ||
 8004938:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <rfReceive+0xe0>
        (status & NRF24L01_DI_STATUS_TX_DS)) && (rfRxIsNonEmpty(rfp))) {
 8004944:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8004948:	f003 0320 	and.w	r3, r3, #32
    if (((status & NRF24L01_DI_STATUS_RX_DR) ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d032      	beq.n	80049b6 <rfReceive+0x146>
        (status & NRF24L01_DI_STATUS_TX_DS)) && (rfRxIsNonEmpty(rfp))) {
 8004950:	9803      	ldr	r0, [sp, #12]
 8004952:	f7ff ff6d 	bl	8004830 <rfRxIsNonEmpty>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02c      	beq.n	80049b6 <rfReceive+0x146>
      nrf24l01ReadRxPlWid(rfp->config->spip, &(rxbuff + cnt)->rx_paylen);
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	6898      	ldr	r0, [r3, #8]
 8004962:	9b05      	ldr	r3, [sp, #20]
 8004964:	2226      	movs	r2, #38	; 0x26
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	9a01      	ldr	r2, [sp, #4]
 800496c:	4413      	add	r3, r2
 800496e:	3305      	adds	r3, #5
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fe45 	bl	8004600 <nrf24l01ReadRxPlWid>
      osalDbgCheck((rxbuff + cnt)->rx_paylen <= RF_PAYLEN);
      nrf24l01GetRxPl(rfp->config->spip, (rxbuff + cnt)->rx_paylen,
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	6898      	ldr	r0, [r3, #8]
 800497c:	9b05      	ldr	r3, [sp, #20]
 800497e:	2226      	movs	r2, #38	; 0x26
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	9a01      	ldr	r2, [sp, #4]
 8004986:	4413      	add	r3, r2
 8004988:	7959      	ldrb	r1, [r3, #5]
                      (rxbuff + cnt)->rx_payload);
 800498a:	9b05      	ldr	r3, [sp, #20]
 800498c:	2226      	movs	r2, #38	; 0x26
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	9a01      	ldr	r2, [sp, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3306      	adds	r3, #6
      nrf24l01GetRxPl(rfp->config->spip, (rxbuff + cnt)->rx_paylen,
 8004998:	461a      	mov	r2, r3
 800499a:	f7ff fdc1 	bl	8004520 <nrf24l01GetRxPl>
      cnt++;
 800499e:	9b05      	ldr	r3, [sp, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	9305      	str	r3, [sp, #20]
      nrf24l01Reset(rfp->config->spip);
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2270      	movs	r2, #112	; 0x70
 80049ac:	2107      	movs	r1, #7
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fca6 	bl	8004300 <nrf24l01WriteRegister>
 80049b4:	e01a      	b.n	80049ec <rfReceive+0x17c>
      continue;
    }
    else {
      nrf24l01Reset(rfp->config->spip);
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2270      	movs	r2, #112	; 0x70
 80049be:	2107      	movs	r1, #7
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fc9d 	bl	8004300 <nrf24l01WriteRegister>
      rfp->state = RF_READY;
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	2202      	movs	r2, #2
 80049ca:	701a      	strb	r2, [r3, #0]
      palClearLine(rfp->config->line_ce);
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	2201      	movs	r2, #1
 80049d8:	409a      	lsls	r2, r3
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	b292      	uxth	r2, r2
 80049e6:	835a      	strh	r2, [r3, #26]
      return RF_ERROR;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e016      	b.n	8004a1a <rfReceive+0x1aa>
  while(cnt < n) {
 80049ec:	9a05      	ldr	r2, [sp, #20]
 80049ee:	9b02      	ldr	r3, [sp, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	f4ff af7d 	bcc.w	80048f0 <rfReceive+0x80>
    }
    palClearLine(rfp->config->line_ce);
  }
  rfp->state = RF_READY;
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	2202      	movs	r2, #2
 80049fa:	701a      	strb	r2, [r3, #0]
  palClearLine(rfp->config->line_ce);
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	2201      	movs	r2, #1
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 030f 	bic.w	r3, r3, #15
 8004a14:	b292      	uxth	r2, r2
 8004a16:	835a      	strh	r2, [r3, #26]
  return RF_OK;
 8004a18:	2301      	movs	r3, #1
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	b007      	add	sp, #28
 8004a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a22:	bf00      	nop
	...

08004a30 <rfReceiveString>:
 * @retval RF_OK         The operation succeeds.
 * @retval RF_ERROR      Error during the transmission.
 * @api
 */
rf_msg_t rfReceiveString(RFDriver *rfp, char* sp, char* addp,
                   systime_t time) {
 8004a30:	b500      	push	{lr}
 8004a32:	b091      	sub	sp, #68	; 0x44
 8004a34:	9003      	str	r0, [sp, #12]
 8004a36:	9102      	str	r1, [sp, #8]
 8004a38:	9201      	str	r2, [sp, #4]
 8004a3a:	9300      	str	r3, [sp, #0]
  unsigned i;
  osalDbgCheck((rfp != NULL) && (sp != NULL) && (addp != NULL));

  osalDbgAssert((rfp->state == RF_READY),
              "rfReceive(), invalid state");
  if(strlen(addp) < RF_ADDLEN){
 8004a3c:	9801      	ldr	r0, [sp, #4]
 8004a3e:	f7fb fcff 	bl	8000440 <strlen>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d804      	bhi.n	8004a52 <rfReceiveString+0x22>
    *sp = '\0';
 8004a48:	9b02      	ldr	r3, [sp, #8]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
    return RF_ERROR;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e047      	b.n	8004ae2 <rfReceiveString+0xb2>
  }
  for (i = 0; i < RF_ADDLEN; i++) {
 8004a52:	2300      	movs	r3, #0
 8004a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a56:	e00c      	b.n	8004a72 <rfReceiveString+0x42>
    _rxframe.rx_address[i] = (uint8_t)*addp;
 8004a58:	9b01      	ldr	r3, [sp, #4]
 8004a5a:	7819      	ldrb	r1, [r3, #0]
 8004a5c:	aa05      	add	r2, sp, #20
 8004a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a60:	4413      	add	r3, r2
 8004a62:	460a      	mov	r2, r1
 8004a64:	701a      	strb	r2, [r3, #0]
    addp++;
 8004a66:	9b01      	ldr	r3, [sp, #4]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	9301      	str	r3, [sp, #4]
  for (i = 0; i < RF_ADDLEN; i++) {
 8004a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6e:	3301      	adds	r3, #1
 8004a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d9ef      	bls.n	8004a58 <rfReceiveString+0x28>
  }
  _rxframe.rx_paylen = RF_PAYLEN;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	f88d 3019 	strb.w	r3, [sp, #25]
  msg = rfReceive(rfp, 1, &_rxframe, time);
 8004a7e:	aa05      	add	r2, sp, #20
 8004a80:	9b00      	ldr	r3, [sp, #0]
 8004a82:	2101      	movs	r1, #1
 8004a84:	9803      	ldr	r0, [sp, #12]
 8004a86:	f7ff fef3 	bl	8004870 <rfReceive>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if(msg == RF_OK){
 8004a90:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d122      	bne.n	8004ade <rfReceiveString+0xae>
    for (i = 0; i < RF_PAYLEN; i++) {
 8004a98:	2300      	movs	r3, #0
 8004a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a9c:	e019      	b.n	8004ad2 <rfReceiveString+0xa2>
      if(_rxframe.rx_payload[i] == '\0'){
 8004a9e:	f10d 021a 	add.w	r2, sp, #26
 8004aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aa4:	4413      	add	r3, r2
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <rfReceiveString+0x88>
        *sp = '\0';
 8004aac:	9b02      	ldr	r3, [sp, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
        return msg;
 8004ab2:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8004ab6:	e014      	b.n	8004ae2 <rfReceiveString+0xb2>
      }
      else{
        *sp = _rxframe.rx_payload[i];
 8004ab8:	f10d 021a 	add.w	r2, sp, #26
 8004abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004abe:	4413      	add	r3, r2
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	9b02      	ldr	r3, [sp, #8]
 8004ac4:	701a      	strb	r2, [r3, #0]
        sp++;
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	9302      	str	r3, [sp, #8]
    for (i = 0; i < RF_PAYLEN; i++) {
 8004acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ace:	3301      	adds	r3, #1
 8004ad0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ad4:	2b1f      	cmp	r3, #31
 8004ad6:	d9e2      	bls.n	8004a9e <rfReceiveString+0x6e>
      }
    }
    *sp = '\0';
 8004ad8:	9b02      	ldr	r3, [sp, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
  }
  return msg;
 8004ade:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	b011      	add	sp, #68	; 0x44
 8004ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004aea:	bf00      	nop
 8004aec:	0000      	movs	r0, r0
	...

08004af0 <main>:
static uint32_t strl;

/*
 * Application entry point.
 */
int main(void) {
 8004af0:	b508      	push	{r3, lr}
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
halInit();
 8004af2:	f7fb fd6d 	bl	80005d0 <halInit>
  chSysInit();
 8004af6:	f7fe f9db 	bl	8002eb0 <chSysInit>

  /*
   * SPID1 I/O pins setup.(It bypasses board.h configurations)
   */
  palSetLineMode(NRF24L01_SPI_SCK,  PAL_MODE_ALTERNATE(5) |
 8004afa:	f240 229a 	movw	r2, #666	; 0x29a
 8004afe:	2120      	movs	r1, #32
 8004b00:	4825      	ldr	r0, [pc, #148]	; (8004b98 <main+0xa8>)
 8004b02:	f7fd f975 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(NRF24L01_SPI_MISO, PAL_MODE_ALTERNATE(5) |
 8004b06:	f240 229a 	movw	r2, #666	; 0x29a
 8004b0a:	2140      	movs	r1, #64	; 0x40
 8004b0c:	4822      	ldr	r0, [pc, #136]	; (8004b98 <main+0xa8>)
 8004b0e:	f7fd f96f 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(NRF24L01_SPI_MOSI, PAL_MODE_ALTERNATE(5) |
 8004b12:	f240 229a 	movw	r2, #666	; 0x29a
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	481f      	ldr	r0, [pc, #124]	; (8004b98 <main+0xa8>)
 8004b1a:	f7fd f969 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(NRF24L01_SPI_CS,   PAL_MODE_OUTPUT_PUSHPULL |
 8004b1e:	2219      	movs	r2, #25
 8004b20:	2140      	movs	r1, #64	; 0x40
 8004b22:	481e      	ldr	r0, [pc, #120]	; (8004b9c <main+0xac>)
 8004b24:	f7fd f964 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);
  /*
   * CE and IRQ pins setup.
   */
  palSetLineMode(NRF24L01_LINE_CE,  PAL_MODE_OUTPUT_PUSHPULL |
 8004b28:	2219      	movs	r2, #25
 8004b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b2e:	481a      	ldr	r0, [pc, #104]	; (8004b98 <main+0xa8>)
 8004b30:	f7fd f95e 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(NRF24L01_LINE_IRQ, PAL_MODE_INPUT |
 8004b34:	2218      	movs	r2, #24
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	4819      	ldr	r0, [pc, #100]	; (8004ba0 <main+0xb0>)
 8004b3a:	f7fd f959 	bl	8001df0 <_pal_lld_setgroupmode>
                                    PAL_STM32_OSPEED_HIGHEST);

  /* Starting Serial Driver 2 with default configurations. */
  sdStart(&SD2, NULL);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4818      	ldr	r0, [pc, #96]	; (8004ba4 <main+0xb4>)
 8004b42:	f7fc fa25 	bl	8000f90 <sdStart>

  /* RF Driver Object constructor. */
  rfInit();
 8004b46:	f7ff fd93 	bl	8004670 <rfInit>

  /* Starting RF driver. */
  rfStart(&RFD1, &nrf24l01_cfg);
 8004b4a:	4917      	ldr	r1, [pc, #92]	; (8004ba8 <main+0xb8>)
 8004b4c:	4817      	ldr	r0, [pc, #92]	; (8004bac <main+0xbc>)
 8004b4e:	f7ff fdaf 	bl	80046b0 <rfStart>
        chnWrite(&SD2, (const uint8_t *)"Message not sent (TIMEOUT)\n\r", 28);
      }
    }
    chThdSleepMilliseconds(50);
#else
    string[0] = '\0';
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <main+0xc0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
    rfReceiveString(&RFD1, string, "TavB5", TIME_MS2I(2));
 8004b58:	2314      	movs	r3, #20
 8004b5a:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <main+0xc4>)
 8004b5c:	4914      	ldr	r1, [pc, #80]	; (8004bb0 <main+0xc0>)
 8004b5e:	4813      	ldr	r0, [pc, #76]	; (8004bac <main+0xbc>)
 8004b60:	f7ff ff66 	bl	8004a30 <rfReceiveString>
    strl = strlen(string);
 8004b64:	4812      	ldr	r0, [pc, #72]	; (8004bb0 <main+0xc0>)
 8004b66:	f7fb fc6b 	bl	8000440 <strlen>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <main+0xc8>)
 8004b6e:	601a      	str	r2, [r3, #0]
    if(strl){
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <main+0xc8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ec      	beq.n	8004b52 <main+0x62>
      chnWrite(&SD2, (const uint8_t *)string, strl);
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <main+0xb4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <main+0xc8>)
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	490b      	ldr	r1, [pc, #44]	; (8004bb0 <main+0xc0>)
 8004b84:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <main+0xb4>)
 8004b86:	4798      	blx	r3
      chnWrite(&SD2, (const uint8_t *)"\n\r", 2);
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <main+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	490a      	ldr	r1, [pc, #40]	; (8004bbc <main+0xcc>)
 8004b92:	4804      	ldr	r0, [pc, #16]	; (8004ba4 <main+0xb4>)
 8004b94:	4798      	blx	r3
 8004b96:	e7dc      	b.n	8004b52 <main+0x62>
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	20000954 	.word	0x20000954
 8004ba8:	20000800 	.word	0x20000800
 8004bac:	20000b8c 	.word	0x20000b8c
 8004bb0:	20000bc0 	.word	0x20000bc0
 8004bb4:	08004e40 	.word	0x08004e40
 8004bb8:	20000be4 	.word	0x20000be4
 8004bbc:	08004e48 	.word	0x08004e48
